"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@story-protocol";
exports.ids = ["vendor-chunks/@story-protocol"];
exports.modules = {

/***/ "(ssr)/./app/node_modules/@story-protocol/core-sdk/dist/story-protocol-core-sdk.esm.js":
/*!***************************************************************************************!*\
  !*** ./app/node_modules/@story-protocol/core-sdk/dist/story-protocol-core-sdk.esm.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionType: () => (/* binding */ ActionType),\n/* harmony export */   AddressZero: () => (/* binding */ AddressZero),\n/* harmony export */   HashZero: () => (/* binding */ HashZero),\n/* harmony export */   HookReadOnlyClient: () => (/* binding */ HookReadOnlyClient),\n/* harmony export */   HookType: () => (/* binding */ HookType),\n/* harmony export */   IPAssetClient: () => (/* binding */ IPAssetClient),\n/* harmony export */   IPAssetReadOnlyClient: () => (/* binding */ IPAssetReadOnlyClient),\n/* harmony export */   IPOrgClient: () => (/* binding */ IPOrgClient),\n/* harmony export */   IPOrgReadOnlyClient: () => (/* binding */ IPOrgReadOnlyClient),\n/* harmony export */   LicenseClient: () => (/* binding */ LicenseClient),\n/* harmony export */   LicenseReadOnlyClient: () => (/* binding */ LicenseReadOnlyClient),\n/* harmony export */   ModuleReadOnlyClient: () => (/* binding */ ModuleReadOnlyClient),\n/* harmony export */   PlatformClient: () => (/* binding */ PlatformClient),\n/* harmony export */   Relatables: () => (/* binding */ Relatables),\n/* harmony export */   RelationshipClient: () => (/* binding */ RelationshipClient),\n/* harmony export */   ResourceType: () => (/* binding */ ResourceType),\n/* harmony export */   StoryClient: () => (/* binding */ StoryClient),\n/* harmony export */   TransactionClient: () => (/* binding */ TransactionClient)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! axios */ \"(ssr)/./app/node_modules/axios/lib/axios.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./app/node_modules/viem/_esm/utils/address/isAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./app/node_modules/viem/node_modules/abitype/dist/esm/human-readable/parseAbi.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./app/node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/./app/node_modules/viem/_esm/utils/abi/decodeEventLog.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/./app/node_modules/viem/_esm/utils/abi/encodeAbiParameters.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/./app/node_modules/viem/node_modules/abitype/dist/esm/human-readable/parseAbiParameters.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem */ \"(ssr)/./app/node_modules/viem/_esm/utils/encoding/toHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! viem */ \"(ssr)/./app/node_modules/viem/_esm/clients/transports/http.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! viem */ \"(ssr)/./app/node_modules/viem/_esm/clients/createPublicClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! viem */ \"(ssr)/./app/node_modules/viem/_esm/clients/createWalletClient.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./app/node_modules/viem/_esm/chains/definitions/sepolia.js\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dotenv */ \"(ssr)/./app/node_modules/dotenv/lib/main.js\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dotenv__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var abitype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! abitype */ \"(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbi.js\");\n\n\n\n\n\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread2(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _regeneratorRuntime() {\n    _regeneratorRuntime = function() {\n        return e;\n    };\n    var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function(t, e, r) {\n        t[e] = r.value;\n    }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\";\n    function define(t, e, r) {\n        return Object.defineProperty(t, e, {\n            value: r,\n            enumerable: !0,\n            configurable: !0,\n            writable: !0\n        }), t[e];\n    }\n    try {\n        define({}, \"\");\n    } catch (t) {\n        define = function(t, e, r) {\n            return t[e] = r;\n        };\n    }\n    function wrap(t, e, r, n) {\n        var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []);\n        return o(a, \"_invoke\", {\n            value: makeInvokeMethod(t, r, c)\n        }), a;\n    }\n    function tryCatch(t, e, r) {\n        try {\n            return {\n                type: \"normal\",\n                arg: t.call(e, r)\n            };\n        } catch (t) {\n            return {\n                type: \"throw\",\n                arg: t\n            };\n        }\n    }\n    e.wrap = wrap;\n    var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {};\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n    var p = {};\n    define(p, a, function() {\n        return this;\n    });\n    var d = Object.getPrototypeOf, v = d && d(d(values([])));\n    v && v !== r && n.call(v, a) && (p = v);\n    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n    function defineIteratorMethods(t) {\n        [\n            \"next\",\n            \"throw\",\n            \"return\"\n        ].forEach(function(e) {\n            define(t, e, function(t) {\n                return this._invoke(e, t);\n            });\n        });\n    }\n    function AsyncIterator(t, e) {\n        function invoke(r, o, i, a) {\n            var c = tryCatch(t[r], t, o);\n            if (\"throw\" !== c.type) {\n                var u = c.arg, h = u.value;\n                return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function(t) {\n                    invoke(\"next\", t, i, a);\n                }, function(t) {\n                    invoke(\"throw\", t, i, a);\n                }) : e.resolve(h).then(function(t) {\n                    u.value = t, i(u);\n                }, function(t) {\n                    return invoke(\"throw\", t, i, a);\n                });\n            }\n            a(c.arg);\n        }\n        var r;\n        o(this, \"_invoke\", {\n            value: function(t, n) {\n                function callInvokeWithMethodAndArg() {\n                    return new e(function(e, r) {\n                        invoke(t, n, e, r);\n                    });\n                }\n                return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n            }\n        });\n    }\n    function makeInvokeMethod(e, r, n) {\n        var o = h;\n        return function(i, a) {\n            if (o === f) throw new Error(\"Generator is already running\");\n            if (o === s) {\n                if (\"throw\" === i) throw a;\n                return {\n                    value: t,\n                    done: !0\n                };\n            }\n            for(n.method = i, n.arg = a;;){\n                var c = n.delegate;\n                if (c) {\n                    var u = maybeInvokeDelegate(c, n);\n                    if (u) {\n                        if (u === y) continue;\n                        return u;\n                    }\n                }\n                if (\"next\" === n.method) n.sent = n._sent = n.arg;\n                else if (\"throw\" === n.method) {\n                    if (o === h) throw o = s, n.arg;\n                    n.dispatchException(n.arg);\n                } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n                o = f;\n                var p = tryCatch(e, r, n);\n                if (\"normal\" === p.type) {\n                    if (o = n.done ? s : l, p.arg === y) continue;\n                    return {\n                        value: p.arg,\n                        done: n.done\n                    };\n                }\n                \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n            }\n        };\n    }\n    function maybeInvokeDelegate(e, r) {\n        var n = r.method, o = e.iterator[n];\n        if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n        var i = tryCatch(o, e.iterator, r.arg);\n        if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n        var a = i.arg;\n        return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n    }\n    function pushTryEntry(t) {\n        var e = {\n            tryLoc: t[0]\n        };\n        1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n    }\n    function resetTryEntry(t) {\n        var e = t.completion || {};\n        e.type = \"normal\", delete e.arg, t.completion = e;\n    }\n    function Context(t) {\n        this.tryEntries = [\n            {\n                tryLoc: \"root\"\n            }\n        ], t.forEach(pushTryEntry, this), this.reset(!0);\n    }\n    function values(e) {\n        if (e || \"\" === e) {\n            var r = e[a];\n            if (r) return r.call(e);\n            if (\"function\" == typeof e.next) return e;\n            if (!isNaN(e.length)) {\n                var o = -1, i = function next() {\n                    for(; ++o < e.length;)if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n                    return next.value = t, next.done = !0, next;\n                };\n                return i.next = i;\n            }\n        }\n        throw new TypeError(typeof e + \" is not iterable\");\n    }\n    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n        value: GeneratorFunctionPrototype,\n        configurable: !0\n    }), o(GeneratorFunctionPrototype, \"constructor\", {\n        value: GeneratorFunction,\n        configurable: !0\n    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function(t) {\n        var e = \"function\" == typeof t && t.constructor;\n        return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n    }, e.mark = function(t) {\n        return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n    }, e.awrap = function(t) {\n        return {\n            __await: t\n        };\n    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function() {\n        return this;\n    }), e.AsyncIterator = AsyncIterator, e.async = function(t, r, n, o, i) {\n        void 0 === i && (i = Promise);\n        var a = new AsyncIterator(wrap(t, r, n, o), i);\n        return e.isGeneratorFunction(r) ? a : a.next().then(function(t) {\n            return t.done ? t.value : a.next();\n        });\n    }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function() {\n        return this;\n    }), define(g, \"toString\", function() {\n        return \"[object Generator]\";\n    }), e.keys = function(t) {\n        var e = Object(t), r = [];\n        for(var n in e)r.push(n);\n        return r.reverse(), function next() {\n            for(; r.length;){\n                var t = r.pop();\n                if (t in e) return next.value = t, next.done = !1, next;\n            }\n            return next.done = !0, next;\n        };\n    }, e.values = values, Context.prototype = {\n        constructor: Context,\n        reset: function(e) {\n            if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for(var r in this)\"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n        },\n        stop: function() {\n            this.done = !0;\n            var t = this.tryEntries[0].completion;\n            if (\"throw\" === t.type) throw t.arg;\n            return this.rval;\n        },\n        dispatchException: function(e) {\n            if (this.done) throw e;\n            var r = this;\n            function handle(n, o) {\n                return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n            }\n            for(var o = this.tryEntries.length - 1; o >= 0; --o){\n                var i = this.tryEntries[o], a = i.completion;\n                if (\"root\" === i.tryLoc) return handle(\"end\");\n                if (i.tryLoc <= this.prev) {\n                    var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\");\n                    if (c && u) {\n                        if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n                        if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n                    } else if (c) {\n                        if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n                    } else {\n                        if (!u) throw new Error(\"try statement without catch or finally\");\n                        if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n                    }\n                }\n            }\n        },\n        abrupt: function(t, e) {\n            for(var r = this.tryEntries.length - 1; r >= 0; --r){\n                var o = this.tryEntries[r];\n                if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n                    var i = o;\n                    break;\n                }\n            }\n            i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n            var a = i ? i.completion : {};\n            return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n        },\n        complete: function(t, e) {\n            if (\"throw\" === t.type) throw t.arg;\n            return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n        },\n        finish: function(t) {\n            for(var e = this.tryEntries.length - 1; e >= 0; --e){\n                var r = this.tryEntries[e];\n                if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n            }\n        },\n        catch: function(t) {\n            for(var e = this.tryEntries.length - 1; e >= 0; --e){\n                var r = this.tryEntries[e];\n                if (r.tryLoc === t) {\n                    var n = r.completion;\n                    if (\"throw\" === n.type) {\n                        var o = n.arg;\n                        resetTryEntry(r);\n                    }\n                    return o;\n                }\n            }\n            throw new Error(\"illegal catch attempt\");\n        },\n        delegateYield: function(e, r, n) {\n            return this.delegate = {\n                iterator: values(e),\n                resultName: r,\n                nextLoc: n\n            }, \"next\" === this.method && (this.arg = t), y;\n        }\n    }, e;\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction handleError(error, msg) {\n    if (error instanceof Error) {\n        throw new Error(\"\".concat(msg, \": \").concat(error.message));\n    }\n    throw new Error(\"\".concat(msg, \": Unknown error type\"));\n}\n/**\n * IPOrgReadOnlyClient allows you to view and search IPOrgs on Story Protocol.\n */ var IPOrgReadOnlyClient = /*#__PURE__*/ function() {\n    function IPOrgReadOnlyClient(httpClient, rpcClient) {\n        _classCallCheck(this, IPOrgReadOnlyClient);\n        this.httpClient = httpClient;\n        this.rpcClient = rpcClient;\n    }\n    /**\n   * Get a IPOrg data based on the specified IPOrg id.\n   *\n   * @param request - the request object for getting the IPOrg\n   * @returns the response object that contains the fetched IPOrg object\n   */ _createClass(IPOrgReadOnlyClient, [\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                if ((0,viem__WEBPACK_IMPORTED_MODULE_1__.isAddress)(request.ipOrgId)) {\n                                    _context.next = 3;\n                                    break;\n                                }\n                                throw new Error(\"Invalid IPOrg id. Must be an address. But got: \".concat(request.ipOrgId));\n                            case 3:\n                                _context.next = 5;\n                                return this.httpClient.get(\"/protocol/iporg/\".concat(request.ipOrgId));\n                            case 5:\n                                response = _context.sent;\n                                return _context.abrupt(\"return\", response.data);\n                            case 9:\n                                _context.prev = 9;\n                                _context.t0 = _context[\"catch\"](0);\n                                handleError(_context.t0, \"Failed to get IPOrg\");\n                            case 12:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            9\n                        ]\n                    ]);\n                }));\n                function get(_x) {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        },\n        {\n            key: \"list\",\n            value: function() {\n                var _list = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                        while(1)switch(_context2.prev = _context2.next){\n                            case 0:\n                                _context2.prev = 0;\n                                _context2.next = 3;\n                                return this.httpClient.post(\"/protocol/iporg\", request || {});\n                            case 3:\n                                response = _context2.sent;\n                                return _context2.abrupt(\"return\", response.data);\n                            case 7:\n                                _context2.prev = 7;\n                                _context2.t0 = _context2[\"catch\"](0);\n                                handleError(_context2.t0, \"Failed to list IPOrgs.\");\n                            case 10:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }, _callee2, this, [\n                        [\n                            0,\n                            7\n                        ]\n                    ]);\n                }));\n                function list(_x2) {\n                    return _list.apply(this, arguments);\n                }\n                return list;\n            }()\n        }\n    ]);\n    return IPOrgReadOnlyClient;\n}();\nvar storyProtocolJson = [\n    {\n        type: \"constructor\",\n        inputs: [\n            {\n                name: \"ipOrgController_\",\n                type: \"address\",\n                internalType: \"contract IIPOrgController\"\n            },\n            {\n                name: \"moduleRegistry_\",\n                type: \"address\",\n                internalType: \"contract ModuleRegistry\"\n            }\n        ],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"IP_ORG_CONTROLLER\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract IIPOrgController\"\n            }\n        ],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"function\",\n        name: \"MODULE_REGISTRY\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract ModuleRegistry\"\n            }\n        ],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"function\",\n        name: \"activateLicense\",\n        inputs: [\n            {\n                name: \"ipOrg_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"licenseId_\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            }\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"addIPAssetTypes\",\n        inputs: [\n            {\n                name: \"ipOrg_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"ipAssetTypes_\",\n                type: \"string[]\",\n                internalType: \"string[]\"\n            }\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"addRelationshipType\",\n        inputs: [\n            {\n                name: \"params_\",\n                type: \"tuple\",\n                internalType: \"struct LibRelationship.AddRelationshipTypeParams\",\n                components: [\n                    {\n                        name: \"relType\",\n                        type: \"string\",\n                        internalType: \"string\"\n                    },\n                    {\n                        name: \"ipOrg\",\n                        type: \"address\",\n                        internalType: \"address\"\n                    },\n                    {\n                        name: \"allowedElements\",\n                        type: \"tuple\",\n                        internalType: \"struct LibRelationship.RelatedElements\",\n                        components: [\n                            {\n                                name: \"src\",\n                                type: \"uint8\",\n                                internalType: \"enum LibRelationship.Relatables\"\n                            },\n                            {\n                                name: \"dst\",\n                                type: \"uint8\",\n                                internalType: \"enum LibRelationship.Relatables\"\n                            }\n                        ]\n                    },\n                    {\n                        name: \"allowedSrcs\",\n                        type: \"uint8[]\",\n                        internalType: \"uint8[]\"\n                    },\n                    {\n                        name: \"allowedDsts\",\n                        type: \"uint8[]\",\n                        internalType: \"uint8[]\"\n                    }\n                ]\n            }\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"configureIpOrgLicensing\",\n        inputs: [\n            {\n                name: \"ipOrg_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"config_\",\n                type: \"tuple\",\n                internalType: \"struct Licensing.LicensingConfig\",\n                components: [\n                    {\n                        name: \"frameworkId\",\n                        type: \"string\",\n                        internalType: \"string\"\n                    },\n                    {\n                        name: \"params\",\n                        type: \"tuple[]\",\n                        internalType: \"struct Licensing.ParamValue[]\",\n                        components: [\n                            {\n                                name: \"tag\",\n                                type: \"bytes32\",\n                                internalType: \"ShortString\"\n                            },\n                            {\n                                name: \"value\",\n                                type: \"bytes\",\n                                internalType: \"bytes\"\n                            }\n                        ]\n                    },\n                    {\n                        name: \"licensor\",\n                        type: \"uint8\",\n                        internalType: \"enum Licensing.LicensorConfig\"\n                    }\n                ]\n            }\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"createLicense\",\n        inputs: [\n            {\n                name: \"ipOrg_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"params_\",\n                type: \"tuple\",\n                internalType: \"struct Licensing.LicenseCreation\",\n                components: [\n                    {\n                        name: \"params\",\n                        type: \"tuple[]\",\n                        internalType: \"struct Licensing.ParamValue[]\",\n                        components: [\n                            {\n                                name: \"tag\",\n                                type: \"bytes32\",\n                                internalType: \"ShortString\"\n                            },\n                            {\n                                name: \"value\",\n                                type: \"bytes\",\n                                internalType: \"bytes\"\n                            }\n                        ]\n                    },\n                    {\n                        name: \"parentLicenseId\",\n                        type: \"uint256\",\n                        internalType: \"uint256\"\n                    },\n                    {\n                        name: \"ipaId\",\n                        type: \"uint256\",\n                        internalType: \"uint256\"\n                    }\n                ]\n            },\n            {\n                name: \"preHooksData_\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            },\n            {\n                name: \"postHooksData_\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"createRelationship\",\n        inputs: [\n            {\n                name: \"ipOrg_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"params_\",\n                type: \"tuple\",\n                internalType: \"struct LibRelationship.CreateRelationshipParams\",\n                components: [\n                    {\n                        name: \"relType\",\n                        type: \"string\",\n                        internalType: \"string\"\n                    },\n                    {\n                        name: \"srcAddress\",\n                        type: \"address\",\n                        internalType: \"address\"\n                    },\n                    {\n                        name: \"srcId\",\n                        type: \"uint256\",\n                        internalType: \"uint256\"\n                    },\n                    {\n                        name: \"dstAddress\",\n                        type: \"address\",\n                        internalType: \"address\"\n                    },\n                    {\n                        name: \"dstId\",\n                        type: \"uint256\",\n                        internalType: \"uint256\"\n                    }\n                ]\n            },\n            {\n                name: \"preHooksData_\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            },\n            {\n                name: \"postHooksData_\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"relId\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"licensingModule\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract ILicensingModule\"\n            }\n        ],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"function\",\n        name: \"linkLnftToIpa\",\n        inputs: [\n            {\n                name: \"ipOrg_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"licenseId_\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            },\n            {\n                name: \"ipaId_\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            }\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"multicall\",\n        inputs: [\n            {\n                name: \"data\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"results\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            }\n        ],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"registerIPAsset\",\n        inputs: [\n            {\n                name: \"ipOrg_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"params_\",\n                type: \"tuple\",\n                internalType: \"struct Registration.RegisterIPAssetParams\",\n                components: [\n                    {\n                        name: \"owner\",\n                        type: \"address\",\n                        internalType: \"address\"\n                    },\n                    {\n                        name: \"ipOrgAssetType\",\n                        type: \"uint8\",\n                        internalType: \"uint8\"\n                    },\n                    {\n                        name: \"name\",\n                        type: \"string\",\n                        internalType: \"string\"\n                    },\n                    {\n                        name: \"hash\",\n                        type: \"bytes32\",\n                        internalType: \"bytes32\"\n                    },\n                    {\n                        name: \"mediaUrl\",\n                        type: \"string\",\n                        internalType: \"string\"\n                    }\n                ]\n            },\n            {\n                name: \"licenseId_\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            },\n            {\n                name: \"preHooksData_\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            },\n            {\n                name: \"postHooksData_\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            },\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"registerIpOrg\",\n        inputs: [\n            {\n                name: \"owner_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"name_\",\n                type: \"string\",\n                internalType: \"string\"\n            },\n            {\n                name: \"symbol_\",\n                type: \"string\",\n                internalType: \"string\"\n            },\n            {\n                name: \"ipAssetTypes_\",\n                type: \"string[]\",\n                internalType: \"string[]\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"ipOrg_\",\n                type: \"address\",\n                internalType: \"address\"\n            }\n        ],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"registrationModule\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract IRegistrationModule\"\n            }\n        ],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"function\",\n        name: \"relationshipModule\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract IRelationshipModule\"\n            }\n        ],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"function\",\n        name: \"removeRelationshipType\",\n        inputs: [\n            {\n                name: \"ipOrg_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"relType\",\n                type: \"string\",\n                internalType: \"string\"\n            }\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"setMetadata\",\n        inputs: [\n            {\n                name: \"ipOrg_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"baseURI_\",\n                type: \"string\",\n                internalType: \"string\"\n            },\n            {\n                name: \"contractURI_\",\n                type: \"string\",\n                internalType: \"string\"\n            }\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"function\",\n        name: \"transferIPAsset\",\n        inputs: [\n            {\n                name: \"ipOrg_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"from_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"to_\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"ipAssetId_\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            },\n            {\n                name: \"preHooksData_\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            },\n            {\n                name: \"postHooksData_\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            }\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\"\n    },\n    {\n        type: \"error\",\n        name: \"ZeroAddress\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"BaseModule_HooksParamsLengthMismatch\",\n        inputs: [\n            {\n                name: \"hookType\",\n                type: \"uint8\",\n                internalType: \"uint8\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"BaseModule_OnlyModuleRegistry\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"BaseModule_Unauthorized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"BaseModule_ZeroIpaRegistry\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"BaseModule_ZeroLicenseRegistry\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"BaseRelationshipProcessor_OnlyRelationshipModule\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectModule_CallerUnauthorized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectModule_CollectNotYetInitialized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectModule_CollectUnauthorized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectModule_IPAssetAlreadyInitialized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectModule_IPAssetNonExistent\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectModule_IPOrgNonExistent\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectNFT_AlreadyInitialized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectNFT_CallerUnauthorized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectNFT_CollectorInvalid\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectNFT_IPAssetNonExistent\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectPaymentModule_AmountInvalid\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectPaymentModule_ERC20TransferFailed\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectPaymentModule_ERC20TransferInvalidABIEncoding\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectPaymentModule_ERC20TransferInvalidReturnValue\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectPaymentModule_InvalidSettings\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectPaymentModule_NativeTokenNotAllowed\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectPaymentModule_NativeTransferFailed\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectPaymentModule_PaymentInsufficient\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectPaymentModule_PaymentParamsInvalid\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"CollectPaymentModule_TokenInvalid\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ERC721_OwnerInvalid\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ERC721_ReceiverInvalid\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ERC721_SafeTransferUnsupported\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ERC721_SenderUnauthorized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ERC721_TokenAlreadyMinted\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ERC721_TokenNonExistent\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"EmptyArray\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"HookRegistry_CallerNotIPOrgOwner\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"HookRegistry_HooksConfigLengthMismatch\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"HookRegistry_IndexOutOfBounds\",\n        inputs: [\n            {\n                name: \"hooksIndex\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"HookRegistry_MaxHooksExceeded\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"HookRegistry_RegisteringDuplicatedHook\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"HookRegistry_RegisteringNonWhitelistedHook\",\n        inputs: [\n            {\n                name: \"hookAddress\",\n                type: \"address\",\n                internalType: \"address\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"HookRegistry_RegisteringZeroAddressHook\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"HookRegistry_ZeroModuleRegistry\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"Hook_AsyncHookError\",\n        inputs: [\n            {\n                name: \"requestId\",\n                type: \"bytes32\",\n                internalType: \"bytes32\"\n            },\n            {\n                name: \"reason\",\n                type: \"string\",\n                internalType: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"Hook_InvalidAsyncRequestId\",\n        inputs: [\n            {\n                name: \"invalidRequestId\",\n                type: \"bytes32\",\n                internalType: \"bytes32\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"Hook_InvalidHookConfig\",\n        inputs: [\n            {\n                name: \"reason\",\n                type: \"string\",\n                internalType: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"Hook_OnlyCallbackCallerCanCallback\",\n        inputs: [\n            {\n                name: \"current\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"expected\",\n                type: \"address\",\n                internalType: \"address\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"Hook_UnsupportedAsyncOperation\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"Hook_UnsupportedSyncOperation\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"IPAccountImpl_CallerNotOwner\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"IPAccountRegistry_InitializationFailed\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"IPAccountRegistry_NonExistentIpAccountImpl\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"IPOrgController_IPOrgNonExistent\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"IPOrgController_InvalidIPOrgOwner\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"IPOrgController_InvalidNewIPOrgOwner\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"IPOrgController_InvalidOwner\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"IPOrgController_OwnerTransferUninitialized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"IPOrg_IdDoesNotExist\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"IPOrg_IdOverBounds\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"IPOrg_LicensingNotConfigured\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LengthMismatch\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LibDuration_CallerNotRenewer\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LibDuration_InvalidStartTime\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LibDuration_NotRenewable\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LibDuration_ZeroTTL\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicenseRegistry_CallerNotLicensingModule\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicenseRegistry_CallerNotLicensingModuleOrLicensee\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicenseRegistry_CallerNotLicensor\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicenseRegistry_CallerNotRevoker\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicenseRegistry_IPANotActive\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicenseRegistry_InvalidLicenseStatus\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicenseRegistry_LicenseAlreadyLinkedToIpa\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicenseRegistry_LicenseNotActive\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicenseRegistry_LicenseNotPendingApproval\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicenseRegistry_ParentLicenseNotActive\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicenseRegistry_UnknownLicenseId\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingFrameworkRepo_DuplicateParamType\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingFrameworkRepo_FrameworkAlreadyAdded\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingFrameworkRepo_TooManyParams\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_CallerNotIpOrgOwner\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_CallerNotLicenseOwner\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_CallerNotLicensor\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_CantFindParentLicenseOrRelatedIpa\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_CommercialLicenseNotAllowed\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_DerivativeNotAllowed\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_DuplicateParam\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_DuplicateTermId\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_InvalidAction\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_InvalidConfigType\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_InvalidInputValue\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_InvalidIpa\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_InvalidLicenseeType\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_InvalidLicensorConfig\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_InvalidLicensorType\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_InvalidParamValue\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_InvalidParamsLength\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_InvalidTermCommercialStatus\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_IpOrgAlreadyConfigured\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_IpOrgFrameworkAlreadySet\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_IpOrgFrameworkNotSet\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_IpOrgNotConfigured\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_NonCommercialTermsRequired\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_ParamSetByIpOrg\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_ParentLicenseNotActive\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_ReciprocalCannotSetParams\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_ShareAlikeDisabled\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensingModule_ipOrgTermNotFound\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensorApprovalHook_ApprovalAlreadyRequested\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensorApprovalHook_InvalidLicenseId\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensorApprovalHook_InvalidLicensor\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensorApprovalHook_InvalidResponseStatus\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"LicensorApprovalHook_NoApprovalRequested\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"MissingRole\",\n        inputs: [\n            {\n                name: \"role\",\n                type: \"bytes32\",\n                internalType: \"bytes32\"\n            },\n            {\n                name: \"account\",\n                type: \"address\",\n                internalType: \"address\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"ModuleRegistry_CallerNotOrgOwner\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ModuleRegistry_DependencyAlreadyRegistered\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ModuleRegistry_DependencyNotYetRegistered\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ModuleRegistry_HookNotRegistered\",\n        inputs: [\n            {\n                name: \"hookKey\",\n                type: \"string\",\n                internalType: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"ModuleRegistry_InvalidGateway\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ModuleRegistry_ModuleAlreadyRegistered\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ModuleRegistry_ModuleKeyMismatch\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ModuleRegistry_ModuleNotYetRegistered\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ModuleRegistry_Unauthorized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RegistrationModule_CallerNotAuthorized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RegistrationModule_IPAssetNonExistent\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RegistrationModule_IPOrgNotConfigured\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RegistrationModule_InvalidCaller\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RegistrationModule_InvalidConfigOperation\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RegistrationModule_InvalidExecutionOperation\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RegistrationModule_InvalidIPAssetType\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RegistrationModule_TooManyAssetTypes\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_CallerNotIpOrgOwner\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_CannotRelateToOtherIPOrg\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_IntentAlreadyRegistered\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_InvalidConfigOperation\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_InvalidDstAddress\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_InvalidDstId\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_InvalidEndTimestamp\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_InvalidRelatable\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_InvalidSrcAddress\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_InvalidSrcId\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_InvalidTTL\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_IpOrgRelatableCannotBeProtocolLevel\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_NonExistingRelationship\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_RelTypeNotSet\",\n        inputs: [\n            {\n                name: \"relType\",\n                type: \"string\",\n                internalType: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_UnsupportedIpOrgIndexType\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_UnsupportedRelationshipDst\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RelationshipModule_UnsupportedRelationshipSrc\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"RoyaltyNFT_AccountsAndAllocationsMismatch\",\n        inputs: [\n            {\n                name: \"accountsLength\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            },\n            {\n                name: \"allocationsLength\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"RoyaltyNFT_InvalidAllocationsSum\",\n        inputs: [\n            {\n                name: \"allocationsSum\",\n                type: \"uint32\",\n                internalType: \"uint32\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"TokenGatedHook_NotTokenOwner\",\n        inputs: [\n            {\n                name: \"tokenAddress\",\n                type: \"address\",\n                internalType: \"address\"\n            },\n            {\n                name: \"ownerAddress\",\n                type: \"address\",\n                internalType: \"address\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"UintArrayMask_EmptyArray\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"Unauthorized\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"UnsupportedInterface\",\n        inputs: [\n            {\n                name: \"name\",\n                type: \"string\",\n                internalType: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"error\",\n        name: \"ZeroAddress\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"ZeroAmount\",\n        inputs: []\n    }\n];\nif (typeof process !== \"undefined\") {\n    dotenv__WEBPACK_IMPORTED_MODULE_0__.config();\n}\nvar storyProtocolAbi = storyProtocolJson;\nvar storyProtocolReadable = (0,abitype__WEBPACK_IMPORTED_MODULE_2__.formatAbi)(storyProtocolAbi);\nvar storyProtocolConfig = {\n    abi: (0,viem__WEBPACK_IMPORTED_MODULE_3__.parseAbi)(storyProtocolReadable),\n    address: (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(\"0x537fcCce413236A4E5f4f385e2edC861aEc622f0\")\n};\nif (typeof process !== \"undefined\") {\n    dotenv__WEBPACK_IMPORTED_MODULE_0__.config();\n}\nvar ipOrgControllerAbi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"ipAssetOrg\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\"\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"symbol\",\n                type: \"string\"\n            },\n            {\n                indexed: false,\n                internalType: \"string[]\",\n                name: \"ipAssetTypes\",\n                type: \"string[]\"\n            }\n        ],\n        name: \"IPOrgRegistered\",\n        type: \"event\"\n    }\n];\nvar ipOrgControllerConfig = {\n    abi: ipOrgControllerAbi,\n    address: (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(process.env.IP_ORG_CONTROLLER_CONTRACT || \"0x6Fb096d829304aCeC8922a10a8C2581E8E84695A\" || 0)\n};\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function() {};\n            return {\n                s: F,\n                n: function() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function(e) {\n                    throw e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function() {\n            it = it.call(o);\n        },\n        n: function() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function(e) {\n            didErr = true;\n            err = e;\n        },\n        f: function() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nvar PARAMS_TAG = {\n    CHANNELS_OF_DISTRIBUTION: \"Channels-Of-Distribution\",\n    ATTRIBUTION: \"Attribution\",\n    DERIVATIVES_ALLOWED: \"Derivatives-Allowed\",\n    DERIVATIVES_ALLOWED_OPTIONS: \"Derivatives-Allowed-Options\"\n};\nvar DERIVATIVES_ALLOWED_OPTIONS = [\n    \"Allowed-With-Approval\",\n    \"Allowed-Reciprocal-License\",\n    \"Allowed-With-Attribution\"\n];\nfunction isIntegerString(s) {\n    var num = Number(s);\n    return !isNaN(num) && parseInt(s, 10) === num;\n}\nfunction parseToBigInt(num) {\n    return BigInt(num);\n}\nfunction waitTxAndFilterLog(_x, _x2, _x3) {\n    return _waitTxAndFilterLog.apply(this, arguments);\n}\nfunction _waitTxAndFilterLog() {\n    _waitTxAndFilterLog = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(client, txHash, params) {\n        var txReceipt, _iterator, _step, log;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while(1)switch(_context.prev = _context.next){\n                case 0:\n                    _context.next = 2;\n                    return client.waitForTransactionReceipt({\n                        hash: txHash,\n                        confirmations: params.confirmations,\n                        pollingInterval: params.pollingInterval,\n                        timeout: params.timeout\n                    });\n                case 2:\n                    txReceipt = _context.sent;\n                    _iterator = _createForOfIteratorHelper(txReceipt.logs);\n                    _context.prev = 4;\n                    _iterator.s();\n                case 6:\n                    if ((_step = _iterator.n()).done) {\n                        _context.next = 17;\n                        break;\n                    }\n                    log = _step.value;\n                    _context.prev = 8;\n                    return _context.abrupt(\"return\", (0,viem__WEBPACK_IMPORTED_MODULE_5__.decodeEventLog)({\n                        abi: params.abi,\n                        eventName: params.eventName,\n                        data: log.data,\n                        topics: log.topics\n                    }));\n                case 12:\n                    _context.prev = 12;\n                    _context.t0 = _context[\"catch\"](8);\n                    return _context.abrupt(\"continue\", 15);\n                case 15:\n                    _context.next = 6;\n                    break;\n                case 17:\n                    _context.next = 22;\n                    break;\n                case 19:\n                    _context.prev = 19;\n                    _context.t1 = _context[\"catch\"](4);\n                    _iterator.e(_context.t1);\n                case 22:\n                    _context.prev = 22;\n                    _iterator.f();\n                    return _context.finish(22);\n                case 25:\n                    throw new Error(\"not found event \".concat(params.eventName, \" in target transaction\"));\n                case 26:\n                case \"end\":\n                    return _context.stop();\n            }\n        }, _callee, null, [\n            [\n                4,\n                19,\n                22,\n                25\n            ],\n            [\n                8,\n                12\n            ]\n        ]);\n    }));\n    return _waitTxAndFilterLog.apply(this, arguments);\n}\nfunction dictToQueryParams(params) {\n    var queryParamList = [];\n    for(var key in params){\n        var value = params[key];\n        queryParamList.push(\"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(value)));\n    }\n    return queryParamList.join(\"&\");\n}\nfunction typedDataArrayToBytesArray(typedDataArray) {\n    var result = [];\n    typedDataArray.forEach(function(typedData) {\n        result.push(typedDataToBytes(typedData));\n    });\n    return result;\n}\nfunction typedDataToBytes(typedData) {\n    return (0,viem__WEBPACK_IMPORTED_MODULE_6__.encodeAbiParameters)((0,viem__WEBPACK_IMPORTED_MODULE_7__.parseAbiParameters)(typedData[\"interface\"]), typedData.data);\n}\nfunction decodeShortstring(hexString) {\n    if (hexString.startsWith(\"0x\")) {\n        hexString = hexString.slice(2);\n    }\n    // Replace the last two hexadecimal digits with zero\n    hexString = hexString.substring(0, hexString.length - 2) + \"00\";\n    var asciiString = \"\";\n    for(var i = 0; i < hexString.length; i += 2){\n        var hexByte = hexString.substring(i, i + 2);\n        if (hexByte === \"00\") {\n            break; // Stop if padding (00) is found\n        }\n        asciiString += String.fromCharCode(parseInt(hexByte, 16));\n    }\n    return asciiString;\n}\nfunction splitIntoBytes32(hexString) {\n    if (hexString.startsWith(\"0x\")) {\n        hexString = hexString.slice(2); // Remove the '0x' prefix\n    }\n    if (hexString.length % 64 !== 0) {\n        throw new Error(\"Hex string length must be a multiple of 64.\");\n    }\n    var bytes32Array = [];\n    for(var i = 0; i < hexString.length; i += 64){\n        bytes32Array.push(\"0x\" + hexString.substring(i, i + 64));\n    }\n    return bytes32Array;\n}\nfunction decodeChannelsOfDistribution(value) {\n    return splitIntoBytes32(value).map(function(bytes32) {\n        // Set the last byte to zero\n        return decodeShortstring(bytes32);\n    });\n}\nfunction hexToFixedLengthBitmask(hexString) {\n    if (hexString.startsWith(\"0x\")) {\n        hexString = hexString.slice(2);\n    }\n    var binaryString = BigInt(\"0x\" + hexString).toString(2);\n    // Pad or truncate the binary string to the desired length\n    binaryString = binaryString.padStart(3, \"0\").slice(-3);\n    return Array.from(binaryString).map(function(bit) {\n        return parseInt(bit);\n    });\n}\nfunction hexToBoolean(hexString) {\n    if (hexString.toLowerCase() === \"0x\") {\n        return false;\n    }\n    if (hexString.toLowerCase().startsWith(\"0x\")) {\n        hexString = hexString.slice(2);\n    }\n    return BigInt(\"0x\" + hexString) !== BigInt(0);\n}\nfunction decodeDerivativesAllowedOptions(bitmask, options) {\n    return options.filter(function(_, index) {\n        return bitmask[index] === 1;\n    });\n}\nfunction paramsTagValueDecoder(paramTag, paramValue) {\n    var parsedTag = decodeShortstring(paramTag);\n    var value = paramValue;\n    var type = \"unknown\";\n    switch(parsedTag){\n        case PARAMS_TAG.CHANNELS_OF_DISTRIBUTION:\n            value = decodeChannelsOfDistribution(paramValue);\n            type = \"string[]\";\n            break;\n        case PARAMS_TAG.ATTRIBUTION:\n            value = hexToBoolean(paramValue);\n            type = \"boolean\";\n            break;\n        case PARAMS_TAG.DERIVATIVES_ALLOWED:\n            value = hexToBoolean(paramValue);\n            type = \"boolean\";\n            break;\n        case PARAMS_TAG.DERIVATIVES_ALLOWED_OPTIONS:\n            value = decodeDerivativesAllowedOptions(hexToFixedLengthBitmask(paramValue), DERIVATIVES_ALLOWED_OPTIONS);\n            type = \"string[]\";\n            break;\n    }\n    return {\n        tag: parsedTag,\n        value: value,\n        type: type\n    };\n}\n/**\n * IPOrgClient allows you to create, view, search IPOrgs on Story Protocol.\n */ var IPOrgClient = /*#__PURE__*/ function(_IPOrgReadOnlyClient) {\n    _inherits(IPOrgClient, _IPOrgReadOnlyClient);\n    var _super = _createSuper(IPOrgClient);\n    function IPOrgClient(httpClient, rpcClient, wallet) {\n        var _this;\n        _classCallCheck(this, IPOrgClient);\n        _this = _super.call(this, httpClient, rpcClient);\n        _this.wallet = wallet;\n        return _this;\n    }\n    /**\n   * Create a IPOrg on Story Protocol based on the specified input IPOrg data.\n   *\n   * @param request - the request object that contains all data needed to create a IPOrg\n   * @returns the response object that contains results from the create IPOrg action\n   */ _createClass(IPOrgClient, [\n        {\n            key: \"create\",\n            value: function() {\n                var _create = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var _request$txOptions, _yield$this$rpcClient, call, txHash, targetLog;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this.rpcClient.simulateContract(_objectSpread2(_objectSpread2({}, storyProtocolConfig), {}, {\n                                    functionName: \"registerIpOrg\",\n                                    args: [\n                                        (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(request.owner || this.wallet.account.address),\n                                        request.name,\n                                        request.symbol,\n                                        request.ipAssetTypes\n                                    ],\n                                    account: this.wallet.account\n                                }));\n                            case 3:\n                                _yield$this$rpcClient = _context.sent;\n                                call = _yield$this$rpcClient.request;\n                                _context.next = 7;\n                                return this.wallet.writeContract(call);\n                            case 7:\n                                txHash = _context.sent;\n                                if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.waitForTransaction)) {\n                                    _context.next = 15;\n                                    break;\n                                }\n                                _context.next = 11;\n                                return waitTxAndFilterLog(this.rpcClient, txHash, _objectSpread2(_objectSpread2({}, ipOrgControllerConfig), {}, {\n                                    eventName: \"IPOrgRegistered\"\n                                }));\n                            case 11:\n                                targetLog = _context.sent;\n                                return _context.abrupt(\"return\", {\n                                    txHash: txHash,\n                                    ipOrgId: targetLog === null || targetLog === void 0 ? void 0 : targetLog.args.ipAssetOrg\n                                });\n                            case 15:\n                                return _context.abrupt(\"return\", {\n                                    txHash: txHash\n                                });\n                            case 16:\n                                _context.next = 21;\n                                break;\n                            case 18:\n                                _context.prev = 18;\n                                _context.t0 = _context[\"catch\"](0);\n                                handleError(_context.t0, \"Failed to create IPOrg\");\n                            case 21:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            18\n                        ]\n                    ]);\n                }));\n                function create(_x) {\n                    return _create.apply(this, arguments);\n                }\n                return create;\n            }()\n        }\n    ]);\n    return IPOrgClient;\n}(IPOrgReadOnlyClient);\n/**\n * RelationshipReadOnlyClient allows you to view and search relationships on Story Protocol.\n */ var RelationshipReadOnlyClient = /*#__PURE__*/ function() {\n    function RelationshipReadOnlyClient(httpClient, rpcClient) {\n        _classCallCheck(this, RelationshipReadOnlyClient);\n        this.httpClient = httpClient;\n        this.rpcClient = rpcClient;\n    }\n    /**\n   * Get a relationship by its ID.\n   *\n   * @param request - the request object for getting the relationship\n   * @returns the response object that contains the fetched relationship object\n   */ _createClass(RelationshipReadOnlyClient, [\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                if (isIntegerString(request.relationshipId)) {\n                                    _context.next = 3;\n                                    break;\n                                }\n                                throw new Error(\"Invalid relationshipId. Must be an integer. But got: \".concat(request.relationshipId));\n                            case 3:\n                                _context.next = 5;\n                                return this.httpClient.get(\"/protocol/relationship/\".concat(request.relationshipId));\n                            case 5:\n                                response = _context.sent;\n                                return _context.abrupt(\"return\", response.data);\n                            case 9:\n                                _context.prev = 9;\n                                _context.t0 = _context[\"catch\"](0);\n                                handleError(_context.t0, \"Failed to get relationship\");\n                            case 12:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            9\n                        ]\n                    ]);\n                }));\n                function get(_x) {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        },\n        {\n            key: \"list\",\n            value: function() {\n                var _list = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                        while(1)switch(_context2.prev = _context2.next){\n                            case 0:\n                                _context2.prev = 0;\n                                _context2.next = 3;\n                                return this.httpClient.post(\"/protocol/relationship\", request, {\n                                    params: {\n                                        contract: request.contract,\n                                        tokenId: request.tokenId\n                                    }\n                                });\n                            case 3:\n                                response = _context2.sent;\n                                return _context2.abrupt(\"return\", response.data);\n                            case 7:\n                                _context2.prev = 7;\n                                _context2.t0 = _context2[\"catch\"](0);\n                                handleError(_context2.t0, \"Failed to list relationships\");\n                            case 10:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }, _callee2, this, [\n                        [\n                            0,\n                            7\n                        ]\n                    ]);\n                }));\n                function list(_x2) {\n                    return _list.apply(this, arguments);\n                }\n                return list;\n            }()\n        }\n    ]);\n    return RelationshipReadOnlyClient;\n}();\n/**\n * IPAssetReadOnlyClient allows you to view and search IP Assets on Story Protocol.\n */ var IPAssetReadOnlyClient = /*#__PURE__*/ function() {\n    function IPAssetReadOnlyClient(httpClient, rpcClient) {\n        _classCallCheck(this, IPAssetReadOnlyClient);\n        this.httpClient = httpClient;\n        this.rpcClient = rpcClient;\n    }\n    /**\n   * Get an IP Asset based on the specified IP asset ID.\n   *\n   * @param request - the request object for getting an IP Asset.\n   * @returns the response object the contains the fetched IP Asset.\n   */ _createClass(IPAssetReadOnlyClient, [\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                if (isIntegerString(request.ipAssetId)) {\n                                    _context.next = 3;\n                                    break;\n                                }\n                                throw new Error(\"Invalid IP Asset id. Must be an integer. But get: \".concat(request.ipAssetId));\n                            case 3:\n                                _context.next = 5;\n                                return this.httpClient.get(\"/protocol/ipasset/\".concat(request.ipAssetId));\n                            case 5:\n                                response = _context.sent;\n                                return _context.abrupt(\"return\", response.data);\n                            case 9:\n                                _context.prev = 9;\n                                _context.t0 = _context[\"catch\"](0);\n                                handleError(_context.t0, \"Failed to get IP Asset\");\n                            case 12:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            9\n                        ]\n                    ]);\n                }));\n                function get(_x) {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        },\n        {\n            key: \"list\",\n            value: function() {\n                var _list = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                        while(1)switch(_context2.prev = _context2.next){\n                            case 0:\n                                _context2.prev = 0;\n                                _context2.next = 3;\n                                return this.httpClient.post(\"/protocol/ipasset\", request || {});\n                            case 3:\n                                response = _context2.sent;\n                                return _context2.abrupt(\"return\", response.data);\n                            case 7:\n                                _context2.prev = 7;\n                                _context2.t0 = _context2[\"catch\"](0);\n                                handleError(_context2.t0, \"Failed to list IP Asset.\");\n                            case 10:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }, _callee2, this, [\n                        [\n                            0,\n                            7\n                        ]\n                    ]);\n                }));\n                function list(_x2) {\n                    return _list.apply(this, arguments);\n                }\n                return list;\n            }()\n        }\n    ]);\n    return IPAssetReadOnlyClient;\n}();\nif (typeof process !== \"undefined\") {\n    dotenv__WEBPACK_IMPORTED_MODULE_0__.config();\n}\nvar registrationModuleAbi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"ipAssetId_\",\n                type: \"uint256\"\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"ipOrg_\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"ipOrgAssetId_\",\n                type: \"uint256\"\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner_\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"name_\",\n                type: \"string\"\n            },\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"ipOrgAssetType_\",\n                type: \"uint8\"\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"hash_\",\n                type: \"bytes32\"\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"mediaUrl_\",\n                type: \"string\"\n            }\n        ],\n        name: \"IPAssetRegistered\",\n        type: \"event\"\n    }\n];\nvar registrationModuleConfig = {\n    abi: registrationModuleAbi,\n    address: (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(process.env.REGISTRATION_MODULE_CONTRACT || \"0xEC2a3833f96c9e4492E2BC013CC2C6DF8583ceC9\" || 0)\n};\nvar AddressZero = \"0x0000000000000000000000000000000000000000\";\nvar HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n/**\n * IpAssetClient allows you to create, view, and search IP Assets on Story Protocol.\n */ var IPAssetClient = /*#__PURE__*/ function(_IPAssetReadOnlyClien) {\n    _inherits(IPAssetClient, _IPAssetReadOnlyClien);\n    var _super = _createSuper(IPAssetClient);\n    function IPAssetClient(httpClient, rpcClient, wallet) {\n        var _this;\n        _classCallCheck(this, IPAssetClient);\n        _this = _super.call(this, httpClient, rpcClient);\n        _this.wallet = wallet;\n        return _this;\n    }\n    /**\n   * Create an IP Asset on Story Protocol based on the specified input asset data.\n   *\n   * @param request - the request object that contains all data needed to create an IP Asset.\n   * @returns the response object that contains results from the asset creation.\n   */ _createClass(IPAssetClient, [\n        {\n            key: \"create\",\n            value: function() {\n                var _create = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var _request$txOptions, _yield$this$rpcClient, call, txHash, targetLog;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this.rpcClient.simulateContract(_objectSpread2(_objectSpread2({}, storyProtocolConfig), {}, {\n                                    functionName: \"registerIPAsset\",\n                                    args: [\n                                        (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(request.ipOrgId),\n                                        {\n                                            owner: (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(request.owner || this.wallet.account.address),\n                                            name: request.name,\n                                            ipOrgAssetType: parseToBigInt(request.typeIndex),\n                                            hash: request.contentHash || HashZero,\n                                            mediaUrl: request.mediaUrl || \"\"\n                                        },\n                                        request.licenseId || 0,\n                                        request.preHookData ? typedDataArrayToBytesArray(request.preHookData) : [],\n                                        request.postHookData ? typedDataArrayToBytesArray(request.postHookData) : []\n                                    ],\n                                    account: this.wallet.account\n                                }));\n                            case 3:\n                                _yield$this$rpcClient = _context.sent;\n                                call = _yield$this$rpcClient.request;\n                                _context.next = 7;\n                                return this.wallet.writeContract(call);\n                            case 7:\n                                txHash = _context.sent;\n                                if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.waitForTransaction)) {\n                                    _context.next = 15;\n                                    break;\n                                }\n                                _context.next = 11;\n                                return waitTxAndFilterLog(this.rpcClient, txHash, _objectSpread2(_objectSpread2({}, registrationModuleConfig), {}, {\n                                    eventName: \"IPAssetRegistered\"\n                                }));\n                            case 11:\n                                targetLog = _context.sent;\n                                return _context.abrupt(\"return\", {\n                                    txHash: txHash,\n                                    ipAssetId: targetLog === null || targetLog === void 0 ? void 0 : targetLog.args.ipAssetId_.toString()\n                                });\n                            case 15:\n                                return _context.abrupt(\"return\", {\n                                    txHash: txHash\n                                });\n                            case 16:\n                                _context.next = 21;\n                                break;\n                            case 18:\n                                _context.prev = 18;\n                                _context.t0 = _context[\"catch\"](0);\n                                handleError(_context.t0, \"Failed to create IP Asset\");\n                            case 21:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            18\n                        ]\n                    ]);\n                }));\n                function create(_x) {\n                    return _create.apply(this, arguments);\n                }\n                return create;\n            }()\n        }\n    ]);\n    return IPAssetClient;\n}(IPAssetReadOnlyClient);\n/**\n * LicenseReadOnlyClient allows you to view and search relationships on Story Protocol.\n */ var LicenseReadOnlyClient = /*#__PURE__*/ function() {\n    function LicenseReadOnlyClient(httpClient, rpcClient) {\n        _classCallCheck(this, LicenseReadOnlyClient);\n        this.httpClient = httpClient;\n        this.rpcClient = rpcClient;\n    }\n    /**\n   * Get a license's data based on the specified license id.\n   *\n   * @param request - the request object for getting the license\n   * @returns the response object that contains the fetched license object\n   */ _createClass(LicenseReadOnlyClient, [\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                if (isIntegerString(request.licenseId)) {\n                                    _context.next = 3;\n                                    break;\n                                }\n                                throw new Error(\"Invalid licenseId. Must be an integer. But got: \".concat(request.licenseId));\n                            case 3:\n                                _context.next = 5;\n                                return this.httpClient.get(\"/protocol/license/\".concat(request.licenseId));\n                            case 5:\n                                response = _context.sent;\n                                return _context.abrupt(\"return\", response.data);\n                            case 9:\n                                _context.prev = 9;\n                                _context.t0 = _context[\"catch\"](0);\n                                handleError(_context.t0, \"Failed to get license\");\n                            case 12:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            9\n                        ]\n                    ]);\n                }));\n                function get(_x) {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        },\n        {\n            key: \"list\",\n            value: function() {\n                var _list = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                        while(1)switch(_context2.prev = _context2.next){\n                            case 0:\n                                _context2.prev = 0;\n                                _context2.next = 3;\n                                return this.httpClient.post(\"/protocol/license\", request || {}, {\n                                    params: {\n                                        ipOrgId: request === null || request === void 0 ? void 0 : request.ipOrgId,\n                                        ipAssetId: request === null || request === void 0 ? void 0 : request.ipAssetId,\n                                        options: request === null || request === void 0 ? void 0 : request.options\n                                    }\n                                });\n                            case 3:\n                                response = _context2.sent;\n                                return _context2.abrupt(\"return\", response.data);\n                            case 7:\n                                _context2.prev = 7;\n                                _context2.t0 = _context2[\"catch\"](0);\n                                handleError(_context2.t0, \"Failed to get licenses\");\n                            case 10:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }, _callee2, this, [\n                        [\n                            0,\n                            7\n                        ]\n                    ]);\n                }));\n                function list(_x2) {\n                    return _list.apply(this, arguments);\n                }\n                return list;\n            }()\n        },\n        {\n            key: \"listParams\",\n            value: function() {\n                var _listParams = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee3(request) {\n                    var _response$data$licens, _response$data$licens2, response, formattedRes;\n                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                        while(1)switch(_context3.prev = _context3.next){\n                            case 0:\n                                _context3.prev = 0;\n                                _context3.next = 3;\n                                return this.httpClient.post(\"/protocol/license-params\", request, {\n                                    params: {\n                                        ipOrgId: request.ipOrgId,\n                                        options: request === null || request === void 0 ? void 0 : request.options\n                                    }\n                                });\n                            case 3:\n                                response = _context3.sent;\n                                formattedRes = {\n                                    licenseParams: [\n                                        _objectSpread2(_objectSpread2({}, (_response$data$licens = response.data.licenseParams) === null || _response$data$licens === void 0 ? void 0 : _response$data$licens[0]), {}, {\n                                            params: (_response$data$licens2 = response.data.licenseParams) === null || _response$data$licens2 === void 0 ? void 0 : _response$data$licens2[0].params.map(function(_ref) {\n                                                var tag = _ref.tag, value = _ref.value;\n                                                return paramsTagValueDecoder(tag, value);\n                                            })\n                                        })\n                                    ]\n                                };\n                                return _context3.abrupt(\"return\", formattedRes);\n                            case 8:\n                                _context3.prev = 8;\n                                _context3.t0 = _context3[\"catch\"](0);\n                                handleError(_context3.t0, \"Failed to get license params\");\n                            case 11:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }, _callee3, this, [\n                        [\n                            0,\n                            8\n                        ]\n                    ]);\n                }));\n                function listParams(_x3) {\n                    return _listParams.apply(this, arguments);\n                }\n                return listParams;\n            }()\n        }\n    ]);\n    return LicenseReadOnlyClient;\n}();\n/**\n * TransactionClient allows you to view and monitor transactions on Story Protocol.\n */ var TransactionReadOnlyClient = /*#__PURE__*/ function() {\n    function TransactionReadOnlyClient(httpClient, rpcClient) {\n        _classCallCheck(this, TransactionReadOnlyClient);\n        this.httpClient = httpClient;\n        this.rpcClient = rpcClient;\n    }\n    /**\n   * Get transaction data based on the specified transaction id.\n   *\n   * @param request - the request object for getting the transaction\n   * @returns the response object that contains the fetched transaction object\n   */ _createClass(TransactionReadOnlyClient, [\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this.httpClient.get(\"/protocol/transaction/\".concat(request.transactionId));\n                            case 3:\n                                response = _context.sent;\n                                return _context.abrupt(\"return\", response.data);\n                            case 7:\n                                _context.prev = 7;\n                                _context.t0 = _context[\"catch\"](0);\n                                handleError(_context.t0, \"Failed to get transaction\");\n                            case 10:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            7\n                        ]\n                    ]);\n                }));\n                function get(_x) {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        },\n        {\n            key: \"list\",\n            value: function() {\n                var _list = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                        while(1)switch(_context2.prev = _context2.next){\n                            case 0:\n                                _context2.prev = 0;\n                                _context2.next = 3;\n                                return this.httpClient.post(\"/protocol/transaction\", request || {});\n                            case 3:\n                                response = _context2.sent;\n                                return _context2.abrupt(\"return\", response.data);\n                            case 7:\n                                _context2.prev = 7;\n                                _context2.t0 = _context2[\"catch\"](0);\n                                handleError(_context2.t0, \"Failed to list transactions\");\n                            case 10:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }, _callee2, this, [\n                        [\n                            0,\n                            7\n                        ]\n                    ]);\n                }));\n                function list(_x2) {\n                    return _list.apply(this, arguments);\n                }\n                return list;\n            }()\n        }\n    ]);\n    return TransactionReadOnlyClient;\n}();\n/**\n * TransactionClient allows you to view and monitor transactions on Story Protocol.\n */ var TransactionClient = /*#__PURE__*/ function(_TransactionReadOnlyC) {\n    _inherits(TransactionClient, _TransactionReadOnlyC);\n    var _super = _createSuper(TransactionClient);\n    function TransactionClient(httpClient, rpcClient, wallet) {\n        var _this;\n        _classCallCheck(this, TransactionClient);\n        _this = _super.call(this, httpClient, rpcClient);\n        _this.wallet = wallet;\n        return _this;\n    }\n    return _createClass(TransactionClient);\n}(TransactionReadOnlyClient);\n/**\n * Default timeout value for http clients.\n */ var HTTP_TIMEOUT = 5000;\n/**\n * ModuleReadOnlyClient allows you to view and search modules on Story Protocol.\n */ var ModuleReadOnlyClient = /*#__PURE__*/ function() {\n    function ModuleReadOnlyClient(httpClient, rpcClient) {\n        _classCallCheck(this, ModuleReadOnlyClient);\n        this.httpClient = httpClient;\n        this.rpcClient = rpcClient;\n    }\n    /**\n   * Get module data based on the specified module id.\n   *\n   * @param request - the request object for getting the module\n   * @returns the response object that contains the fetched module object\n   */ _createClass(ModuleReadOnlyClient, [\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this.httpClient.get(\"/protocol/module/\".concat(request.moduleId));\n                            case 3:\n                                response = _context.sent;\n                                return _context.abrupt(\"return\", response.data);\n                            case 7:\n                                _context.prev = 7;\n                                _context.t0 = _context[\"catch\"](0);\n                                handleError(_context.t0, \"Failed to get module\");\n                            case 10:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            7\n                        ]\n                    ]);\n                }));\n                function get(_x) {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        },\n        {\n            key: \"list\",\n            value: function() {\n                var _list = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                        while(1)switch(_context2.prev = _context2.next){\n                            case 0:\n                                _context2.prev = 0;\n                                _context2.next = 3;\n                                return this.httpClient.post(\"/protocol/module\", request || {}, {\n                                    params: {\n                                        ipOrgId: request === null || request === void 0 ? void 0 : request.ipOrgId\n                                    }\n                                });\n                            case 3:\n                                response = _context2.sent;\n                                return _context2.abrupt(\"return\", response.data);\n                            case 7:\n                                _context2.prev = 7;\n                                _context2.t0 = _context2[\"catch\"](0);\n                                handleError(_context2.t0, \"Failed to list modules\");\n                            case 10:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }, _callee2, this, [\n                        [\n                            0,\n                            7\n                        ]\n                    ]);\n                }));\n                function list(_x2) {\n                    return _list.apply(this, arguments);\n                }\n                return list;\n            }()\n        }\n    ]);\n    return ModuleReadOnlyClient;\n}();\n/**\n * ModuleClient allows you to view and search modules on Story Protocol.\n */ var ModuleClient = /*#__PURE__*/ function(_ModuleReadOnlyClient) {\n    _inherits(ModuleClient, _ModuleReadOnlyClient);\n    var _super = _createSuper(ModuleClient);\n    function ModuleClient(httpClient, rpcClient, wallet) {\n        var _this;\n        _classCallCheck(this, ModuleClient);\n        _this = _super.call(this, httpClient, rpcClient);\n        _this.wallet = wallet;\n        return _this;\n    }\n    return _createClass(ModuleClient);\n}(ModuleReadOnlyClient);\n/**\n * HookReadOnlyClient allows you to get and search hooks on Story Protocol.\n */ var HookReadOnlyClient = /*#__PURE__*/ function() {\n    function HookReadOnlyClient(httpClient, rpcClient) {\n        _classCallCheck(this, HookReadOnlyClient);\n        this.httpClient = httpClient;\n        this.rpcClient = rpcClient;\n    }\n    /**\n   * Get hook data based on the specified hook id.\n   *\n   * @param request - the request object for getting the hook\n   * @returns the response object that contains the fetched hook object\n   */ _createClass(HookReadOnlyClient, [\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this.httpClient.get(\"/protocol/hook/\".concat(request.hookId));\n                            case 3:\n                                response = _context.sent;\n                                return _context.abrupt(\"return\", response.data);\n                            case 7:\n                                _context.prev = 7;\n                                _context.t0 = _context[\"catch\"](0);\n                                handleError(_context.t0, \"Failed to get hook\");\n                            case 10:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            7\n                        ]\n                    ]);\n                }));\n                function get(_x) {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        },\n        {\n            key: \"list\",\n            value: function() {\n                var _list = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                        while(1)switch(_context2.prev = _context2.next){\n                            case 0:\n                                _context2.prev = 0;\n                                _context2.next = 3;\n                                return this.httpClient.post(\"/protocol/hook\", request || {}, {\n                                    params: {\n                                        moduleId: request === null || request === void 0 ? void 0 : request.moduleId\n                                    }\n                                });\n                            case 3:\n                                response = _context2.sent;\n                                return _context2.abrupt(\"return\", response.data);\n                            case 7:\n                                _context2.prev = 7;\n                                _context2.t0 = _context2[\"catch\"](0);\n                                handleError(_context2.t0, \"Failed to get hooks\");\n                            case 10:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }, _callee2, this, [\n                        [\n                            0,\n                            7\n                        ]\n                    ]);\n                }));\n                function list(_x2) {\n                    return _list.apply(this, arguments);\n                }\n                return list;\n            }()\n        }\n    ]);\n    return HookReadOnlyClient;\n}();\n/**\n * HookClient allows you to view and search hooks on Story Protocol.\n */ var HookClient = /*#__PURE__*/ function(_HookReadOnlyClient) {\n    _inherits(HookClient, _HookReadOnlyClient);\n    var _super = _createSuper(HookClient);\n    function HookClient(httpClient, rpcClient, wallet) {\n        var _this;\n        _classCallCheck(this, HookClient);\n        _this = _super.call(this, httpClient, rpcClient);\n        _this.wallet = wallet;\n        return _this;\n    }\n    return _createClass(HookClient);\n}(HookReadOnlyClient);\nvar PlatformClient = /*#__PURE__*/ function() {\n    function PlatformClient(httpClient) {\n        _classCallCheck(this, PlatformClient);\n        this.httpClient = httpClient;\n    }\n    /**\n   * Upload a file to Arweave.\n   *\n   * @param file - the file binary data to upload\n   * @param mimeType - the mime type of the file\n   * @returns the response object that contains the uri of the uploaded file\n   */ _createClass(PlatformClient, [\n        {\n            key: \"uploadFile\",\n            value: function() {\n                var _uploadFile = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(file, mimeType) {\n                    var preSignUrlResp, data, uploadResp, confirmResp;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this.httpClient.post(\"/platform/file-upload/request\");\n                            case 3:\n                                preSignUrlResp = _context.sent;\n                                data = preSignUrlResp.data; // upload the file to s3\n                                _context.next = 7;\n                                return this.httpClient.put(data.url, file, {\n                                    timeout: 0,\n                                    headers: {\n                                        \"Content-Type\": mimeType\n                                    }\n                                });\n                            case 7:\n                                uploadResp = _context.sent;\n                                if (!(uploadResp.status !== 200)) {\n                                    _context.next = 10;\n                                    break;\n                                }\n                                throw new Error(\"Failed to upload file to s3. Status: \".concat(uploadResp.status));\n                            case 10:\n                                _context.next = 12;\n                                return this.httpClient.post(\"/platform/file-upload/confirm\", {\n                                    key: data.key\n                                });\n                            case 12:\n                                confirmResp = _context.sent;\n                                return _context.abrupt(\"return\", confirmResp.data);\n                            case 16:\n                                _context.prev = 16;\n                                _context.t0 = _context[\"catch\"](0);\n                                return _context.abrupt(\"return\", handleError(_context.t0, \"Failed to upload file\"));\n                            case 19:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            16\n                        ]\n                    ]);\n                }));\n                function uploadFile(_x, _x2) {\n                    return _uploadFile.apply(this, arguments);\n                }\n                return uploadFile;\n            }()\n        }\n    ]);\n    return PlatformClient;\n}();\n/**\n * Client for managing relationships.\n */ var LicenseClient = /*#__PURE__*/ function(_LicenseReadOnlyClien) {\n    _inherits(LicenseClient, _LicenseReadOnlyClien);\n    var _super = _createSuper(LicenseClient);\n    function LicenseClient(httpClient, rpcClient, wallet) {\n        var _this;\n        _classCallCheck(this, LicenseClient);\n        _this = _super.call(this, httpClient, rpcClient);\n        _this.wallet = wallet;\n        return _this;\n    }\n    _createClass(LicenseClient, [\n        {\n            key: \"create\",\n            value: function() {\n                var _create = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var parsedParams, createLicenseParams, args, _request$txOptions, _yield$this$rpcClient, call, txHash, _request$txOptions2, targetLog;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                parsedParams = this.parseParamValues(request.params);\n                                createLicenseParams = {\n                                    params: parsedParams,\n                                    parentLicenseId: request.parentLicenseId,\n                                    ipaId: request.ipaId\n                                };\n                                args = [\n                                    request.ipOrgId,\n                                    createLicenseParams,\n                                    request.preHookData,\n                                    request.postHookData\n                                ];\n                                _context.prev = 3;\n                                _context.next = 6;\n                                return this.rpcClient.simulateContract(_objectSpread2(_objectSpread2({}, storyProtocolConfig), {}, {\n                                    functionName: \"createLicense\",\n                                    args: args,\n                                    account: this.wallet.account\n                                }));\n                            case 6:\n                                _yield$this$rpcClient = _context.sent;\n                                call = _yield$this$rpcClient.request;\n                                _context.next = 10;\n                                return this.wallet.writeContract(call);\n                            case 10:\n                                txHash = _context.sent;\n                                if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.waitForTransaction)) {\n                                    _context.next = 18;\n                                    break;\n                                }\n                                _context.next = 14;\n                                return waitTxAndFilterLog(this.rpcClient, txHash, {\n                                    abi: [\n                                        {\n                                            type: \"event\",\n                                            name: \"LicenseRegistered\",\n                                            inputs: [\n                                                {\n                                                    name: \"id\",\n                                                    type: \"uint256\",\n                                                    indexed: true,\n                                                    internalType: \"uint256\"\n                                                },\n                                                {\n                                                    name: \"licenseData\",\n                                                    type: \"tuple\",\n                                                    indexed: false,\n                                                    internalType: \"struct Licensing.LicenseData\",\n                                                    components: [\n                                                        {\n                                                            name: \"status\",\n                                                            type: \"uint8\",\n                                                            internalType: \"enum Licensing.LicenseStatus\"\n                                                        },\n                                                        {\n                                                            name: \"derivativesAllowed\",\n                                                            type: \"bool\",\n                                                            internalType: \"bool\"\n                                                        },\n                                                        {\n                                                            name: \"isReciprocal\",\n                                                            type: \"bool\",\n                                                            internalType: \"bool\"\n                                                        },\n                                                        {\n                                                            name: \"derivativeNeedsApproval\",\n                                                            type: \"bool\",\n                                                            internalType: \"bool\"\n                                                        },\n                                                        {\n                                                            name: \"revoker\",\n                                                            type: \"address\",\n                                                            internalType: \"address\"\n                                                        },\n                                                        {\n                                                            name: \"licensor\",\n                                                            type: \"address\",\n                                                            internalType: \"address\"\n                                                        },\n                                                        {\n                                                            name: \"ipOrg\",\n                                                            type: \"address\",\n                                                            internalType: \"address\"\n                                                        },\n                                                        {\n                                                            name: \"frameworkId\",\n                                                            type: \"bytes32\",\n                                                            internalType: \"ShortString\"\n                                                        },\n                                                        {\n                                                            name: \"ipaId\",\n                                                            type: \"uint256\",\n                                                            internalType: \"uint256\"\n                                                        },\n                                                        {\n                                                            name: \"parentLicenseId\",\n                                                            type: \"uint256\",\n                                                            internalType: \"uint256\"\n                                                        }\n                                                    ]\n                                                }\n                                            ],\n                                            anonymous: false\n                                        }\n                                    ],\n                                    eventName: \"LicenseRegistered\",\n                                    confirmations: (_request$txOptions2 = request.txOptions) === null || _request$txOptions2 === void 0 ? void 0 : _request$txOptions2.numBlockConfirmations\n                                });\n                            case 14:\n                                targetLog = _context.sent;\n                                return _context.abrupt(\"return\", {\n                                    txHash: txHash,\n                                    licenseId: targetLog === null || targetLog === void 0 ? void 0 : targetLog.args.id.toString()\n                                });\n                            case 18:\n                                return _context.abrupt(\"return\", {\n                                    txHash: txHash\n                                });\n                            case 19:\n                                _context.next = 24;\n                                break;\n                            case 21:\n                                _context.prev = 21;\n                                _context.t0 = _context[\"catch\"](3);\n                                handleError(_context.t0, \"Failed to register license\");\n                            case 24:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            3,\n                            21\n                        ]\n                    ]);\n                }));\n                function create(_x) {\n                    return _create.apply(this, arguments);\n                }\n                return create;\n            }()\n        },\n        {\n            key: \"configure\",\n            value: function() {\n                var _configure = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(request) {\n                    var parsedParams, config, _request$txOptions3, _yield$this$rpcClient2, call, txHash;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                        while(1)switch(_context2.prev = _context2.next){\n                            case 0:\n                                parsedParams = this.parseParamValues(request.params);\n                                config = {\n                                    frameworkId: request.frameworkId,\n                                    params: parsedParams,\n                                    licensor: request.licensor\n                                };\n                                _context2.prev = 2;\n                                _context2.next = 5;\n                                return this.rpcClient.simulateContract({\n                                    // ...storyProtocolConfig,\n                                    abi: storyProtocolJson,\n                                    address: (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(\"0x537fcCce413236A4E5f4f385e2edC861aEc622f0\"),\n                                    functionName: \"configureIpOrgLicensing\",\n                                    args: [\n                                        request.ipOrg,\n                                        config\n                                    ],\n                                    account: this.wallet.account\n                                });\n                            case 5:\n                                _yield$this$rpcClient2 = _context2.sent;\n                                call = _yield$this$rpcClient2.request;\n                                _context2.next = 9;\n                                return this.wallet.writeContract(call);\n                            case 9:\n                                txHash = _context2.sent;\n                                if (!((_request$txOptions3 = request.txOptions) !== null && _request$txOptions3 !== void 0 && _request$txOptions3.waitForTransaction)) {\n                                    _context2.next = 16;\n                                    break;\n                                }\n                                _context2.next = 13;\n                                return this.rpcClient.waitForTransactionReceipt({\n                                    hash: txHash\n                                });\n                            case 13:\n                                return _context2.abrupt(\"return\", {\n                                    txHash: txHash,\n                                    success: true\n                                });\n                            case 16:\n                                return _context2.abrupt(\"return\", {\n                                    txHash: txHash\n                                });\n                            case 17:\n                                _context2.next = 22;\n                                break;\n                            case 19:\n                                _context2.prev = 19;\n                                _context2.t0 = _context2[\"catch\"](2);\n                                handleError(_context2.t0, \"Failed to configure license\");\n                            case 22:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }, _callee2, this, [\n                        [\n                            2,\n                            19\n                        ]\n                    ]);\n                }));\n                function configure(_x2) {\n                    return _configure.apply(this, arguments);\n                }\n                return configure;\n            }()\n        },\n        {\n            key: \"parseParamValues\",\n            value: function parseParamValues(params) {\n                return params.map(function(param) {\n                    if (param.tag.toLowerCase() === \"attribution\") {\n                        return _objectSpread2(_objectSpread2({}, param), {}, {\n                            tag: \"0x4174747269627574696f6e00000000000000000000000000000000000000000b\",\n                            value: typedDataToBytes(param.value)\n                        });\n                    } else if (param.tag.toLowerCase() === \"derivatives-allowed\") {\n                        return _objectSpread2(_objectSpread2({}, param), {}, {\n                            tag: \"0x44657269766174697665732d416c6c6f77656400000000000000000000000013\",\n                            value: typedDataToBytes(param.value)\n                        });\n                    }\n                    return _objectSpread2(_objectSpread2({}, param), {}, {\n                        tag: (0,viem__WEBPACK_IMPORTED_MODULE_8__.stringToHex)(param.tag, {\n                            size: 32\n                        }),\n                        value: typedDataToBytes(param.value)\n                    });\n                });\n            }\n        }\n    ]);\n    return LicenseClient;\n}(LicenseReadOnlyClient);\nvar relationshipModuleAbi = [\n    // EVENTS\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"relationshipId\",\n                type: \"uint256\"\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"relType\",\n                type: \"string\"\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"srcAddress\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"srcId\",\n                type: \"uint256\"\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"dstAddress\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"dstId\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"RelationshipCreated\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"relType\",\n                type: \"string\"\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"ipOrg\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"src\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                internalType: \"enum LibRelationship.Relatables\",\n                name: \"srcRelatable\",\n                type: \"uint8\"\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"srcSubtypesMask\",\n                type: \"uint256\"\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"dst\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                internalType: \"enum LibRelationship.Relatables\",\n                name: \"dstRelatable\",\n                type: \"uint8\"\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"dstSubtypesMask\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"RelationshipTypeSet\",\n        type: \"event\"\n    }\n];\nvar relationshipModuleConfig = {\n    abi: relationshipModuleAbi,\n    address: (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(process.env.RELATIONSHIP_MODULE_CONTRACT || \"0x481972bA7702FA848cCd1Ee15eCD3eD6b059E2aa\" || 0)\n};\n/**\n * RelationshipClient allows you to create, view and search relationships on Story Protocol.\n */ var RelationshipClient = /*#__PURE__*/ function(_RelationshipReadOnly) {\n    _inherits(RelationshipClient, _RelationshipReadOnly);\n    var _super = _createSuper(RelationshipClient);\n    function RelationshipClient(httpClient, rpcClient, wallet) {\n        var _this;\n        _classCallCheck(this, RelationshipClient);\n        _this = _super.call(this, httpClient, rpcClient);\n        _this.wallet = wallet;\n        return _this;\n    }\n    /**\n   * Register a relationship on Story Protocol based on the specified input relationship data.\n   *\n   * @param request - the request object that contains all data needed to register a relationship\n   * @returns the response object that contains results from the register relationship action\n   */ _createClass(RelationshipClient, [\n        {\n            key: \"register\",\n            value: function() {\n                var _register = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var _request$txOptions, _yield$this$rpcClient, call, txHash, targetLog;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this.rpcClient.simulateContract(_objectSpread2(_objectSpread2({}, storyProtocolConfig), {}, {\n                                    functionName: \"createRelationship\",\n                                    args: [\n                                        (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(request.ipOrgId),\n                                        {\n                                            relType: request.relType,\n                                            srcAddress: request.srcContract,\n                                            srcId: request.srcTokenId,\n                                            dstAddress: request.dstContract,\n                                            dstId: request.dstTokenId\n                                        },\n                                        request.preHookData ? typedDataArrayToBytesArray(request.preHookData) : [],\n                                        request.postHookData ? typedDataArrayToBytesArray(request.postHookData) : []\n                                    ],\n                                    account: this.wallet.account\n                                }));\n                            case 3:\n                                _yield$this$rpcClient = _context.sent;\n                                call = _yield$this$rpcClient.request;\n                                _context.next = 7;\n                                return this.wallet.writeContract(call);\n                            case 7:\n                                txHash = _context.sent;\n                                if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.waitForTransaction)) {\n                                    _context.next = 15;\n                                    break;\n                                }\n                                _context.next = 11;\n                                return waitTxAndFilterLog(this.rpcClient, txHash, _objectSpread2(_objectSpread2({}, relationshipModuleConfig), {}, {\n                                    eventName: \"RelationshipCreated\"\n                                }));\n                            case 11:\n                                targetLog = _context.sent;\n                                return _context.abrupt(\"return\", {\n                                    txHash: txHash,\n                                    relationshipId: targetLog === null || targetLog === void 0 ? void 0 : targetLog.args.relationshipId.toString()\n                                });\n                            case 15:\n                                return _context.abrupt(\"return\", {\n                                    txHash: txHash\n                                });\n                            case 16:\n                                _context.next = 21;\n                                break;\n                            case 18:\n                                _context.prev = 18;\n                                _context.t0 = _context[\"catch\"](0);\n                                handleError(_context.t0, \"Failed to register relationship\");\n                            case 21:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            18\n                        ]\n                    ]);\n                }));\n                function register(_x) {\n                    return _register.apply(this, arguments);\n                }\n                return register;\n            }()\n        }\n    ]);\n    return RelationshipClient;\n}(RelationshipReadOnlyClient);\n/**\n * RelationshipTypeReadOnlyClient allows you to view and search relationship types on Story Protocol.\n */ var RelationshipTypeReadOnlyClient = /*#__PURE__*/ function() {\n    function RelationshipTypeReadOnlyClient(httpClient, rpcClient) {\n        _classCallCheck(this, RelationshipTypeReadOnlyClient);\n        this.httpClient = httpClient;\n        this.rpcClient = rpcClient;\n    }\n    /**\n   * Get a RelationshipType by ipOrgId or relType.\n   *\n   * @param request - the request object for getting the relationship type\n   * @returns the response object that contains the fetched relationship type object\n   */ _createClass(RelationshipTypeReadOnlyClient, [\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var params, response;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                if ((0,viem__WEBPACK_IMPORTED_MODULE_1__.isAddress)(request.ipOrgId)) {\n                                    _context.next = 2;\n                                    break;\n                                }\n                                return _context.abrupt(\"return\", handleError(new Error(\"Invalid ipOrgId. Must be an address. But got: \".concat(request.ipOrgId)), \"Failed to get relationship type\"));\n                            case 2:\n                                _context.prev = 2;\n                                params = dictToQueryParams(request);\n                                _context.next = 6;\n                                return this.httpClient.get(\"/protocol/relationship-type?\".concat(params));\n                            case 6:\n                                response = _context.sent;\n                                return _context.abrupt(\"return\", response.data);\n                            case 10:\n                                _context.prev = 10;\n                                _context.t0 = _context[\"catch\"](2);\n                                handleError(_context.t0, \"Failed to get relationship type\");\n                            case 13:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            2,\n                            10\n                        ]\n                    ]);\n                }));\n                function get(_x) {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        },\n        {\n            key: \"list\",\n            value: function() {\n                var _list = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(request) {\n                    var response;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                        while(1)switch(_context2.prev = _context2.next){\n                            case 0:\n                                _context2.prev = 0;\n                                _context2.next = 3;\n                                return this.httpClient.post(\"/protocol/relationship-type\", request, {\n                                    params: {\n                                        ipOrgId: request === null || request === void 0 ? void 0 : request.ipOrgId,\n                                        options: request === null || request === void 0 ? void 0 : request.options\n                                    }\n                                });\n                            case 3:\n                                response = _context2.sent;\n                                return _context2.abrupt(\"return\", response.data);\n                            case 7:\n                                _context2.prev = 7;\n                                _context2.t0 = _context2[\"catch\"](0);\n                                handleError(_context2.t0, \"Failed to list relationship types\");\n                            case 10:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }, _callee2, this, [\n                        [\n                            0,\n                            7\n                        ]\n                    ]);\n                }));\n                function list(_x2) {\n                    return _list.apply(this, arguments);\n                }\n                return list;\n            }()\n        }\n    ]);\n    return RelationshipTypeReadOnlyClient;\n}();\n/**\n * RelationshipTypeClient allows you to create, view and search relationship types on Story Protocol.\n */ var RelationshipTypeClient = /*#__PURE__*/ function(_RelationshipTypeRead) {\n    _inherits(RelationshipTypeClient, _RelationshipTypeRead);\n    var _super = _createSuper(RelationshipTypeClient);\n    function RelationshipTypeClient(httpClient, rpcClient, wallet) {\n        var _this;\n        _classCallCheck(this, RelationshipTypeClient);\n        _this = _super.call(this, httpClient, rpcClient);\n        _this.wallet = wallet;\n        return _this;\n    }\n    /**\n   * Register a relationship type on Story Protocol based on the specified input data.\n   *\n   * @param request - the request object that contains all data needed to register a relationship type\n   * @returns the response object that contains results from the register relationship type action\n   */ _createClass(RelationshipTypeClient, [\n        {\n            key: \"register\",\n            value: function() {\n                var _register = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(request) {\n                    var _request$txOptions, _yield$this$rpcClient, call, txHash;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this.rpcClient.simulateContract(_objectSpread2(_objectSpread2({}, storyProtocolConfig), {}, {\n                                    functionName: \"addRelationshipType\",\n                                    args: [\n                                        {\n                                            ipOrg: (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(request.ipOrgId),\n                                            relType: request.relType,\n                                            allowedElements: {\n                                                src: request.relatedElements.src,\n                                                dst: request.relatedElements.dst\n                                            },\n                                            allowedSrcs: request.allowedSrcIpAssetTypes,\n                                            allowedDsts: request.allowedDstIpAssetTypes\n                                        }\n                                    ],\n                                    account: this.wallet.account\n                                }));\n                            case 3:\n                                _yield$this$rpcClient = _context.sent;\n                                call = _yield$this$rpcClient.request;\n                                _context.next = 7;\n                                return this.wallet.writeContract(call);\n                            case 7:\n                                txHash = _context.sent;\n                                if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.waitForTransaction)) {\n                                    _context.next = 14;\n                                    break;\n                                }\n                                _context.next = 11;\n                                return waitTxAndFilterLog(this.rpcClient, txHash, _objectSpread2(_objectSpread2({}, relationshipModuleConfig), {}, {\n                                    eventName: \"RelationshipTypeSet\"\n                                }));\n                            case 11:\n                                return _context.abrupt(\"return\", {\n                                    txHash: txHash,\n                                    success: true\n                                });\n                            case 14:\n                                return _context.abrupt(\"return\", {\n                                    txHash: txHash\n                                });\n                            case 15:\n                                _context.next = 20;\n                                break;\n                            case 17:\n                                _context.prev = 17;\n                                _context.t0 = _context[\"catch\"](0);\n                                handleError(_context.t0, \"Failed to register relationship type\");\n                            case 20:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            0,\n                            17\n                        ]\n                    ]);\n                }));\n                function register(_x) {\n                    return _register.apply(this, arguments);\n                }\n                return register;\n            }()\n        }\n    ]);\n    return RelationshipTypeClient;\n}(RelationshipTypeReadOnlyClient);\nif (typeof process !== \"undefined\") {\n    dotenv__WEBPACK_IMPORTED_MODULE_0__.config();\n}\n/**\n * The StoryClient is the main entry point for the SDK.\n */ var StoryClient = /*#__PURE__*/ function() {\n    /**\n   * @param config - the configuration for the SDK client\n   * @param isReadOnly\n   */ function StoryClient(config) {\n        var isReadOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        _classCallCheck(this, StoryClient);\n        _defineProperty(this, \"isReadOnly\", false);\n        _defineProperty(this, \"_ipOrg\", null);\n        _defineProperty(this, \"_license\", null);\n        _defineProperty(this, \"_transaction\", null);\n        _defineProperty(this, \"_ipAsset\", null);\n        _defineProperty(this, \"_relationship\", null);\n        _defineProperty(this, \"_relationshipType\", null);\n        _defineProperty(this, \"_module\", null);\n        _defineProperty(this, \"_hook\", null);\n        _defineProperty(this, \"_platform\", null);\n        this.config = config;\n        this.isReadOnly = isReadOnly;\n        var clientConfig = {\n            chain: this.config.chain || viem_chains__WEBPACK_IMPORTED_MODULE_9__.sepolia,\n            transport: this.config.transport || (0,viem__WEBPACK_IMPORTED_MODULE_10__.http)(process.env.RPC_PROVIDER_URL)\n        };\n        this.rpcClient = (0,viem__WEBPACK_IMPORTED_MODULE_11__.createPublicClient)(clientConfig);\n        if (!isReadOnly) {\n            var account = this.config.account;\n            if (!account) {\n                throw new Error(\"account is null\");\n            }\n            this.wallet = (0,viem__WEBPACK_IMPORTED_MODULE_12__.createWalletClient)(_objectSpread2(_objectSpread2({}, clientConfig), {}, {\n                account: account\n            }));\n        }\n        this.httpClient = axios__WEBPACK_IMPORTED_MODULE_13__[\"default\"].create({\n            baseURL: process.env.API_BASE_URL || \"https://stag.api.storyprotocol.net\",\n            timeout: HTTP_TIMEOUT,\n            headers: {\n                version: \"v0-alpha\"\n            }\n        });\n    }\n    /**\n   * Factory method for creating a read only SDK client.\n   *\n   * @param config - the configuration for a read only SDK client\n   */ _createClass(StoryClient, [\n        {\n            key: \"ipOrg\",\n            get: /**\n     * Getter for the ipOrg client. The client is lazily created when\n     * this method is called.\n     *\n     * @returns the IPOrgClient or IPOrgReadOnlyClient instance\n     */ function get() {\n                if (this._ipOrg === null) {\n                    this._ipOrg = this.isReadOnly ? new IPOrgReadOnlyClient(this.httpClient, this.rpcClient) : new IPOrgClient(this.httpClient, this.rpcClient, this.wallet);\n                }\n                return this._ipOrg;\n            }\n        },\n        {\n            key: \"relationship\",\n            get: function get() {\n                if (this._relationship === null) {\n                    this._relationship = this.isReadOnly ? new RelationshipReadOnlyClient(this.httpClient, this.rpcClient) : new RelationshipClient(this.httpClient, this.rpcClient, this.wallet);\n                }\n                return this._relationship;\n            }\n        },\n        {\n            key: \"relationshipType\",\n            get: function get() {\n                if (this._relationshipType === null) {\n                    this._relationshipType = this.isReadOnly ? new RelationshipTypeReadOnlyClient(this.httpClient, this.rpcClient) : new RelationshipTypeClient(this.httpClient, this.rpcClient, this.wallet);\n                }\n                return this._relationshipType;\n            }\n        },\n        {\n            key: \"ipAsset\",\n            get: function get() {\n                if (this._ipAsset === null) {\n                    this._ipAsset = this.isReadOnly ? new IPAssetReadOnlyClient(this.httpClient, this.rpcClient) : new IPAssetClient(this.httpClient, this.rpcClient, this.wallet);\n                }\n                return this._ipAsset;\n            }\n        },\n        {\n            key: \"license\",\n            get: function get() {\n                if (this._license === null) {\n                    this._license = this.isReadOnly ? new LicenseReadOnlyClient(this.httpClient, this.rpcClient) : new LicenseClient(this.httpClient, this.rpcClient, this.wallet);\n                }\n                return this._license;\n            }\n        },\n        {\n            key: \"transaction\",\n            get: function get() {\n                if (this._transaction === null) {\n                    this._transaction = this.isReadOnly ? new TransactionReadOnlyClient(this.httpClient, this.rpcClient) : new TransactionClient(this.httpClient, this.rpcClient, this.wallet);\n                }\n                return this._transaction;\n            }\n        },\n        {\n            key: \"module\",\n            get: function get() {\n                if (this._module === null) {\n                    this._module = this.isReadOnly ? new ModuleReadOnlyClient(this.httpClient, this.rpcClient) : new ModuleClient(this.httpClient, this.rpcClient, this.wallet);\n                }\n                return this._module;\n            }\n        },\n        {\n            key: \"hook\",\n            get: function get() {\n                if (this._hook === null) {\n                    this._hook = this.isReadOnly ? new HookReadOnlyClient(this.httpClient, this.rpcClient) : new HookClient(this.httpClient, this.rpcClient, this.wallet);\n                }\n                return this._hook;\n            }\n        },\n        {\n            key: \"platform\",\n            get: function get() {\n                if (this._platform === null) {\n                    this._platform = new PlatformClient(this.httpClient);\n                }\n                return this._platform;\n            }\n        }\n    ], [\n        {\n            key: \"newReadOnlyClient\",\n            value: function newReadOnlyClient(config) {\n                return new StoryClient(config, true);\n            }\n        },\n        {\n            key: \"newClient\",\n            value: function newClient(config) {\n                return new StoryClient(config, false);\n            }\n        }\n    ]);\n    return StoryClient;\n}();\n/**\n * @public\n */ var ResourceType = /*#__PURE__*/ function(ResourceType) {\n    ResourceType[\"Unspecified\"] = \"Unspecified\";\n    ResourceType[\"IPOrg\"] = \"IPOrg\";\n    ResourceType[\"IPAsset\"] = \"IPAsset\";\n    ResourceType[\"License\"] = \"License\";\n    ResourceType[\"Relationship\"] = \"Relationship\";\n    ResourceType[\"RelationshipType\"] = \"RelationshipType\";\n    ResourceType[\"Module\"] = \"Module\";\n    ResourceType[\"Hook\"] = \"Hook\";\n    ResourceType[\"Dispute\"] = \"Dispute\";\n    return ResourceType;\n}({});\n/**\n * @public\n */ var HookType = /*#__PURE__*/ function(HookType) {\n    HookType[HookType[\"PreAction\"] = 0] = \"PreAction\";\n    HookType[HookType[\"PostAction\"] = 1] = \"PostAction\";\n    return HookType;\n}({});\n/**\n * @public\n */ var ActionType = /*#__PURE__*/ function(ActionType) {\n    ActionType[\"Unspecified\"] = \"Unspecified\";\n    ActionType[\"Register\"] = \"Register\";\n    ActionType[\"Unregister\"] = \"Unregister\";\n    ActionType[\"Configure\"] = \"Configure\";\n    ActionType[\"Create\"] = \"Create\";\n    return ActionType;\n}({});\n/**\n * @public\n */ var Relatables = /*#__PURE__*/ function(Relatables) {\n    Relatables[Relatables[\"Undefined\"] = 0] = \"Undefined\";\n    Relatables[Relatables[\"IPA\"] = 1] = \"IPA\";\n    Relatables[Relatables[\"IPOrgEntry\"] = 2] = \"IPOrgEntry\";\n    Relatables[Relatables[\"License\"] = 3] = \"License\";\n    Relatables[Relatables[\"Address\"] = 4] = \"Address\";\n    Relatables[Relatables[\"ExternalNFT\"] = 5] = \"ExternalNFT\";\n    return Relatables;\n}({});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@story-protocol/core-sdk/dist/story-protocol-core-sdk.esm.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbi.js":
/*!*************************************************************************************************************!*\
  !*** ./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbi.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatAbi: () => (/* binding */ formatAbi)\n/* harmony export */ });\n/* harmony import */ var _formatAbiItem_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatAbiItem.js */ \"(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiItem.js\");\n\n/**\n * Parses JSON ABI into human-readable ABI\n *\n * @param abi - ABI\n * @returns Human-readable ABI\n */ function formatAbi(abi) {\n    const signatures = [];\n    const length = abi.length;\n    for(let i = 0; i < length; i++){\n        const abiItem = abi[i];\n        const signature = (0,_formatAbiItem_js__WEBPACK_IMPORTED_MODULE_0__.formatAbiItem)(abiItem);\n        signatures.push(signature);\n    }\n    return signatures;\n} //# sourceMappingURL=formatAbi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0BzdG9yeS1wcm90b2NvbC9jb3JlLXNkay9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2VzbS9odW1hbi1yZWFkYWJsZS9mb3JtYXRBYmkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBbUQ7QUFDbkQ7Ozs7O0NBS0MsR0FDTSxTQUFTQyxVQUFVQyxHQUFHO0lBQ3pCLE1BQU1DLGFBQWEsRUFBRTtJQUNyQixNQUFNQyxTQUFTRixJQUFJRSxNQUFNO0lBQ3pCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRCxRQUFRQyxJQUFLO1FBQzdCLE1BQU1DLFVBQVVKLEdBQUcsQ0FBQ0csRUFBRTtRQUN0QixNQUFNRSxZQUFZUCxnRUFBYUEsQ0FBQ007UUFDaENILFdBQVdLLElBQUksQ0FBQ0Q7SUFDcEI7SUFDQSxPQUFPSjtBQUNYLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9hcHAvbm9kZV9tb2R1bGVzL0BzdG9yeS1wcm90b2NvbC9jb3JlLXNkay9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2VzbS9odW1hbi1yZWFkYWJsZS9mb3JtYXRBYmkuanM/Y2EyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JtYXRBYmlJdGVtIH0gZnJvbSAnLi9mb3JtYXRBYmlJdGVtLmpzJztcbi8qKlxuICogUGFyc2VzIEpTT04gQUJJIGludG8gaHVtYW4tcmVhZGFibGUgQUJJXG4gKlxuICogQHBhcmFtIGFiaSAtIEFCSVxuICogQHJldHVybnMgSHVtYW4tcmVhZGFibGUgQUJJXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRBYmkoYWJpKSB7XG4gICAgY29uc3Qgc2lnbmF0dXJlcyA9IFtdO1xuICAgIGNvbnN0IGxlbmd0aCA9IGFiaS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhYmlJdGVtID0gYWJpW2ldO1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBmb3JtYXRBYmlJdGVtKGFiaUl0ZW0pO1xuICAgICAgICBzaWduYXR1cmVzLnB1c2goc2lnbmF0dXJlKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpZ25hdHVyZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtYXRBYmkuanMubWFwIl0sIm5hbWVzIjpbImZvcm1hdEFiaUl0ZW0iLCJmb3JtYXRBYmkiLCJhYmkiLCJzaWduYXR1cmVzIiwibGVuZ3RoIiwiaSIsImFiaUl0ZW0iLCJzaWduYXR1cmUiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbi.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiItem.js":
/*!*****************************************************************************************************************!*\
  !*** ./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiItem.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatAbiItem: () => (/* binding */ formatAbiItem)\n/* harmony export */ });\n/* harmony import */ var _formatAbiParameters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatAbiParameters.js */ \"(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiParameters.js\");\n\n/**\n * Formats ABI item (e.g. error, event, function) into human-readable ABI item\n *\n * @param abiItem - ABI item\n * @returns Human-readable ABI item\n */ function formatAbiItem(abiItem) {\n    if (abiItem.type === \"function\") return `function ${abiItem.name}(${(0,_formatAbiParameters_js__WEBPACK_IMPORTED_MODULE_0__.formatAbiParameters)(abiItem.inputs)})${abiItem.stateMutability && abiItem.stateMutability !== \"nonpayable\" ? ` ${abiItem.stateMutability}` : \"\"}${abiItem.outputs.length ? ` returns (${(0,_formatAbiParameters_js__WEBPACK_IMPORTED_MODULE_0__.formatAbiParameters)(abiItem.outputs)})` : \"\"}`;\n    else if (abiItem.type === \"event\") return `event ${abiItem.name}(${(0,_formatAbiParameters_js__WEBPACK_IMPORTED_MODULE_0__.formatAbiParameters)(abiItem.inputs)})`;\n    else if (abiItem.type === \"error\") return `error ${abiItem.name}(${(0,_formatAbiParameters_js__WEBPACK_IMPORTED_MODULE_0__.formatAbiParameters)(abiItem.inputs)})`;\n    else if (abiItem.type === \"constructor\") return `constructor(${(0,_formatAbiParameters_js__WEBPACK_IMPORTED_MODULE_0__.formatAbiParameters)(abiItem.inputs)})${abiItem.stateMutability === \"payable\" ? \" payable\" : \"\"}`;\n    else if (abiItem.type === \"fallback\") return \"fallback()\";\n    return \"receive() external payable\";\n} //# sourceMappingURL=formatAbiItem.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0BzdG9yeS1wcm90b2NvbC9jb3JlLXNkay9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2VzbS9odW1hbi1yZWFkYWJsZS9mb3JtYXRBYmlJdGVtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdFO0FBQ2hFOzs7OztDQUtDLEdBQ00sU0FBU0MsY0FBY0MsT0FBTztJQUNqQyxJQUFJQSxRQUFRQyxJQUFJLEtBQUssWUFDakIsT0FBTyxDQUFDLFNBQVMsRUFBRUQsUUFBUUUsSUFBSSxDQUFDLENBQUMsRUFBRUosNEVBQW1CQSxDQUFDRSxRQUFRRyxNQUFNLEVBQUUsQ0FBQyxFQUFFSCxRQUFRSSxlQUFlLElBQUlKLFFBQVFJLGVBQWUsS0FBSyxlQUMzSCxDQUFDLENBQUMsRUFBRUosUUFBUUksZUFBZSxDQUFDLENBQUMsR0FDN0IsR0FBRyxFQUFFSixRQUFRSyxPQUFPLENBQUNDLE1BQU0sR0FDM0IsQ0FBQyxVQUFVLEVBQUVSLDRFQUFtQkEsQ0FBQ0UsUUFBUUssT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUNwRCxHQUFHLENBQUM7U0FDVCxJQUFJTCxRQUFRQyxJQUFJLEtBQUssU0FDdEIsT0FBTyxDQUFDLE1BQU0sRUFBRUQsUUFBUUUsSUFBSSxDQUFDLENBQUMsRUFBRUosNEVBQW1CQSxDQUFDRSxRQUFRRyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQ3JFLElBQUlILFFBQVFDLElBQUksS0FBSyxTQUN0QixPQUFPLENBQUMsTUFBTSxFQUFFRCxRQUFRRSxJQUFJLENBQUMsQ0FBQyxFQUFFSiw0RUFBbUJBLENBQUNFLFFBQVFHLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDckUsSUFBSUgsUUFBUUMsSUFBSSxLQUFLLGVBQ3RCLE9BQU8sQ0FBQyxZQUFZLEVBQUVILDRFQUFtQkEsQ0FBQ0UsUUFBUUcsTUFBTSxFQUFFLENBQUMsRUFBRUgsUUFBUUksZUFBZSxLQUFLLFlBQVksYUFBYSxHQUFHLENBQUM7U0FDckgsSUFBSUosUUFBUUMsSUFBSSxLQUFLLFlBQ3RCLE9BQU87SUFDWCxPQUFPO0FBQ1gsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS8uL2FwcC9ub2RlX21vZHVsZXMvQHN0b3J5LXByb3RvY29sL2NvcmUtc2RrL25vZGVfbW9kdWxlcy9hYml0eXBlL2Rpc3QvZXNtL2h1bWFuLXJlYWRhYmxlL2Zvcm1hdEFiaUl0ZW0uanM/ZTFjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JtYXRBYmlQYXJhbWV0ZXJzLCB9IGZyb20gJy4vZm9ybWF0QWJpUGFyYW1ldGVycy5qcyc7XG4vKipcbiAqIEZvcm1hdHMgQUJJIGl0ZW0gKGUuZy4gZXJyb3IsIGV2ZW50LCBmdW5jdGlvbikgaW50byBodW1hbi1yZWFkYWJsZSBBQkkgaXRlbVxuICpcbiAqIEBwYXJhbSBhYmlJdGVtIC0gQUJJIGl0ZW1cbiAqIEByZXR1cm5zIEh1bWFuLXJlYWRhYmxlIEFCSSBpdGVtXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRBYmlJdGVtKGFiaUl0ZW0pIHtcbiAgICBpZiAoYWJpSXRlbS50eXBlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gYGZ1bmN0aW9uICR7YWJpSXRlbS5uYW1lfSgke2Zvcm1hdEFiaVBhcmFtZXRlcnMoYWJpSXRlbS5pbnB1dHMpfSkke2FiaUl0ZW0uc3RhdGVNdXRhYmlsaXR5ICYmIGFiaUl0ZW0uc3RhdGVNdXRhYmlsaXR5ICE9PSAnbm9ucGF5YWJsZSdcbiAgICAgICAgICAgID8gYCAke2FiaUl0ZW0uc3RhdGVNdXRhYmlsaXR5fWBcbiAgICAgICAgICAgIDogJyd9JHthYmlJdGVtLm91dHB1dHMubGVuZ3RoXG4gICAgICAgICAgICA/IGAgcmV0dXJucyAoJHtmb3JtYXRBYmlQYXJhbWV0ZXJzKGFiaUl0ZW0ub3V0cHV0cyl9KWBcbiAgICAgICAgICAgIDogJyd9YDtcbiAgICBlbHNlIGlmIChhYmlJdGVtLnR5cGUgPT09ICdldmVudCcpXG4gICAgICAgIHJldHVybiBgZXZlbnQgJHthYmlJdGVtLm5hbWV9KCR7Zm9ybWF0QWJpUGFyYW1ldGVycyhhYmlJdGVtLmlucHV0cyl9KWA7XG4gICAgZWxzZSBpZiAoYWJpSXRlbS50eXBlID09PSAnZXJyb3InKVxuICAgICAgICByZXR1cm4gYGVycm9yICR7YWJpSXRlbS5uYW1lfSgke2Zvcm1hdEFiaVBhcmFtZXRlcnMoYWJpSXRlbS5pbnB1dHMpfSlgO1xuICAgIGVsc2UgaWYgKGFiaUl0ZW0udHlwZSA9PT0gJ2NvbnN0cnVjdG9yJylcbiAgICAgICAgcmV0dXJuIGBjb25zdHJ1Y3Rvcigke2Zvcm1hdEFiaVBhcmFtZXRlcnMoYWJpSXRlbS5pbnB1dHMpfSkke2FiaUl0ZW0uc3RhdGVNdXRhYmlsaXR5ID09PSAncGF5YWJsZScgPyAnIHBheWFibGUnIDogJyd9YDtcbiAgICBlbHNlIGlmIChhYmlJdGVtLnR5cGUgPT09ICdmYWxsYmFjaycpXG4gICAgICAgIHJldHVybiAnZmFsbGJhY2soKSc7XG4gICAgcmV0dXJuICdyZWNlaXZlKCkgZXh0ZXJuYWwgcGF5YWJsZSc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtYXRBYmlJdGVtLmpzLm1hcCJdLCJuYW1lcyI6WyJmb3JtYXRBYmlQYXJhbWV0ZXJzIiwiZm9ybWF0QWJpSXRlbSIsImFiaUl0ZW0iLCJ0eXBlIiwibmFtZSIsImlucHV0cyIsInN0YXRlTXV0YWJpbGl0eSIsIm91dHB1dHMiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiItem.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiParameter.js":
/*!**********************************************************************************************************************!*\
  !*** ./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiParameter.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatAbiParameter: () => (/* binding */ formatAbiParameter)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../regex.js */ \"(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/regex.js\");\n\n// https://regexr.com/7f7rv\nconst tupleRegex = /^tuple(?<array>(\\[(\\d*)\\])*)$/;\n/**\n * Formats {@link AbiParameter} to human-readable ABI parameter.\n *\n * @param abiParameter - ABI parameter\n * @returns Human-readable ABI parameter\n *\n * @example\n * const result = formatAbiParameter({ type: 'address', name: 'from' })\n * //    ^? const result: 'address from'\n */ function formatAbiParameter(abiParameter) {\n    let type = abiParameter.type;\n    if (tupleRegex.test(abiParameter.type) && \"components\" in abiParameter) {\n        type = \"(\";\n        const length = abiParameter.components.length;\n        for(let i = 0; i < length; i++){\n            const component = abiParameter.components[i];\n            type += formatAbiParameter(component);\n            if (i < length - 1) type += \", \";\n        }\n        const result = (0,_regex_js__WEBPACK_IMPORTED_MODULE_0__.execTyped)(tupleRegex, abiParameter.type);\n        type += `)${result?.array ?? \"\"}`;\n        return formatAbiParameter({\n            ...abiParameter,\n            type\n        });\n    }\n    // Add `indexed` to type if in `abiParameter`\n    if (\"indexed\" in abiParameter && abiParameter.indexed) type = `${type} indexed`;\n    // Return human-readable ABI parameter\n    if (abiParameter.name) return `${type} ${abiParameter.name}`;\n    return type;\n} //# sourceMappingURL=formatAbiParameter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0BzdG9yeS1wcm90b2NvbC9jb3JlLXNkay9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2VzbS9odW1hbi1yZWFkYWJsZS9mb3JtYXRBYmlQYXJhbWV0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFDeEMsMkJBQTJCO0FBQzNCLE1BQU1DLGFBQWE7QUFDbkI7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0MsbUJBQW1CQyxZQUFZO0lBQzNDLElBQUlDLE9BQU9ELGFBQWFDLElBQUk7SUFDNUIsSUFBSUgsV0FBV0ksSUFBSSxDQUFDRixhQUFhQyxJQUFJLEtBQUssZ0JBQWdCRCxjQUFjO1FBQ3BFQyxPQUFPO1FBQ1AsTUFBTUUsU0FBU0gsYUFBYUksVUFBVSxDQUFDRCxNQUFNO1FBQzdDLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJRixRQUFRRSxJQUFLO1lBQzdCLE1BQU1DLFlBQVlOLGFBQWFJLFVBQVUsQ0FBQ0MsRUFBRTtZQUM1Q0osUUFBUUYsbUJBQW1CTztZQUMzQixJQUFJRCxJQUFJRixTQUFTLEdBQ2JGLFFBQVE7UUFDaEI7UUFDQSxNQUFNTSxTQUFTVixvREFBU0EsQ0FBQ0MsWUFBWUUsYUFBYUMsSUFBSTtRQUN0REEsUUFBUSxDQUFDLENBQUMsRUFBRU0sUUFBUUMsU0FBUyxHQUFHLENBQUM7UUFDakMsT0FBT1QsbUJBQW1CO1lBQ3RCLEdBQUdDLFlBQVk7WUFDZkM7UUFDSjtJQUNKO0lBQ0EsNkNBQTZDO0lBQzdDLElBQUksYUFBYUQsZ0JBQWdCQSxhQUFhUyxPQUFPLEVBQ2pEUixPQUFPLENBQUMsRUFBRUEsS0FBSyxRQUFRLENBQUM7SUFDNUIsc0NBQXNDO0lBQ3RDLElBQUlELGFBQWFVLElBQUksRUFDakIsT0FBTyxDQUFDLEVBQUVULEtBQUssQ0FBQyxFQUFFRCxhQUFhVSxJQUFJLENBQUMsQ0FBQztJQUN6QyxPQUFPVDtBQUNYLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9hcHAvbm9kZV9tb2R1bGVzL0BzdG9yeS1wcm90b2NvbC9jb3JlLXNkay9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2VzbS9odW1hbi1yZWFkYWJsZS9mb3JtYXRBYmlQYXJhbWV0ZXIuanM/MmM2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjVHlwZWQgfSBmcm9tICcuLi9yZWdleC5qcyc7XG4vLyBodHRwczovL3JlZ2V4ci5jb20vN2Y3cnZcbmNvbnN0IHR1cGxlUmVnZXggPSAvXnR1cGxlKD88YXJyYXk+KFxcWyhcXGQqKVxcXSkqKSQvO1xuLyoqXG4gKiBGb3JtYXRzIHtAbGluayBBYmlQYXJhbWV0ZXJ9IHRvIGh1bWFuLXJlYWRhYmxlIEFCSSBwYXJhbWV0ZXIuXG4gKlxuICogQHBhcmFtIGFiaVBhcmFtZXRlciAtIEFCSSBwYXJhbWV0ZXJcbiAqIEByZXR1cm5zIEh1bWFuLXJlYWRhYmxlIEFCSSBwYXJhbWV0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0QWJpUGFyYW1ldGVyKHsgdHlwZTogJ2FkZHJlc3MnLCBuYW1lOiAnZnJvbScgfSlcbiAqIC8vICAgIF4/IGNvbnN0IHJlc3VsdDogJ2FkZHJlc3MgZnJvbSdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEFiaVBhcmFtZXRlcihhYmlQYXJhbWV0ZXIpIHtcbiAgICBsZXQgdHlwZSA9IGFiaVBhcmFtZXRlci50eXBlO1xuICAgIGlmICh0dXBsZVJlZ2V4LnRlc3QoYWJpUGFyYW1ldGVyLnR5cGUpICYmICdjb21wb25lbnRzJyBpbiBhYmlQYXJhbWV0ZXIpIHtcbiAgICAgICAgdHlwZSA9ICcoJztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYWJpUGFyYW1ldGVyLmNvbXBvbmVudHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBhYmlQYXJhbWV0ZXIuY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgIHR5cGUgKz0gZm9ybWF0QWJpUGFyYW1ldGVyKGNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaSA8IGxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgdHlwZSArPSAnLCAnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGV4ZWNUeXBlZCh0dXBsZVJlZ2V4LCBhYmlQYXJhbWV0ZXIudHlwZSk7XG4gICAgICAgIHR5cGUgKz0gYCkke3Jlc3VsdD8uYXJyYXkgPz8gJyd9YDtcbiAgICAgICAgcmV0dXJuIGZvcm1hdEFiaVBhcmFtZXRlcih7XG4gICAgICAgICAgICAuLi5hYmlQYXJhbWV0ZXIsXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gQWRkIGBpbmRleGVkYCB0byB0eXBlIGlmIGluIGBhYmlQYXJhbWV0ZXJgXG4gICAgaWYgKCdpbmRleGVkJyBpbiBhYmlQYXJhbWV0ZXIgJiYgYWJpUGFyYW1ldGVyLmluZGV4ZWQpXG4gICAgICAgIHR5cGUgPSBgJHt0eXBlfSBpbmRleGVkYDtcbiAgICAvLyBSZXR1cm4gaHVtYW4tcmVhZGFibGUgQUJJIHBhcmFtZXRlclxuICAgIGlmIChhYmlQYXJhbWV0ZXIubmFtZSlcbiAgICAgICAgcmV0dXJuIGAke3R5cGV9ICR7YWJpUGFyYW1ldGVyLm5hbWV9YDtcbiAgICByZXR1cm4gdHlwZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdEFiaVBhcmFtZXRlci5qcy5tYXAiXSwibmFtZXMiOlsiZXhlY1R5cGVkIiwidHVwbGVSZWdleCIsImZvcm1hdEFiaVBhcmFtZXRlciIsImFiaVBhcmFtZXRlciIsInR5cGUiLCJ0ZXN0IiwibGVuZ3RoIiwiY29tcG9uZW50cyIsImkiLCJjb21wb25lbnQiLCJyZXN1bHQiLCJhcnJheSIsImluZGV4ZWQiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiParameter.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiParameters.js":
/*!***********************************************************************************************************************!*\
  !*** ./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiParameters.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatAbiParameters: () => (/* binding */ formatAbiParameters)\n/* harmony export */ });\n/* harmony import */ var _formatAbiParameter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatAbiParameter.js */ \"(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiParameter.js\");\n\n/**\n * Formats {@link AbiParameter}s to human-readable ABI parameters.\n *\n * @param abiParameters - ABI parameters\n * @returns Human-readable ABI parameters\n *\n * @example\n * const result = formatAbiParameters([\n *   //  ^? const result: 'address from, uint256 tokenId'\n *   { type: 'address', name: 'from' },\n *   { type: 'uint256', name: 'tokenId' },\n * ])\n */ function formatAbiParameters(abiParameters) {\n    let params = \"\";\n    const length = abiParameters.length;\n    for(let i = 0; i < length; i++){\n        const abiParameter = abiParameters[i];\n        params += (0,_formatAbiParameter_js__WEBPACK_IMPORTED_MODULE_0__.formatAbiParameter)(abiParameter);\n        if (i !== length - 1) params += \", \";\n    }\n    return params;\n} //# sourceMappingURL=formatAbiParameters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0BzdG9yeS1wcm90b2NvbC9jb3JlLXNkay9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2VzbS9odW1hbi1yZWFkYWJsZS9mb3JtYXRBYmlQYXJhbWV0ZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThEO0FBQzlEOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNNLFNBQVNDLG9CQUFvQkMsYUFBYTtJQUM3QyxJQUFJQyxTQUFTO0lBQ2IsTUFBTUMsU0FBU0YsY0FBY0UsTUFBTTtJQUNuQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUQsUUFBUUMsSUFBSztRQUM3QixNQUFNQyxlQUFlSixhQUFhLENBQUNHLEVBQUU7UUFDckNGLFVBQVVILDBFQUFrQkEsQ0FBQ007UUFDN0IsSUFBSUQsTUFBTUQsU0FBUyxHQUNmRCxVQUFVO0lBQ2xCO0lBQ0EsT0FBT0E7QUFDWCxFQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLy4vYXBwL25vZGVfbW9kdWxlcy9Ac3RvcnktcHJvdG9jb2wvY29yZS1zZGsvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9lc20vaHVtYW4tcmVhZGFibGUvZm9ybWF0QWJpUGFyYW1ldGVycy5qcz9mZWRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdEFiaVBhcmFtZXRlciwgfSBmcm9tICcuL2Zvcm1hdEFiaVBhcmFtZXRlci5qcyc7XG4vKipcbiAqIEZvcm1hdHMge0BsaW5rIEFiaVBhcmFtZXRlcn1zIHRvIGh1bWFuLXJlYWRhYmxlIEFCSSBwYXJhbWV0ZXJzLlxuICpcbiAqIEBwYXJhbSBhYmlQYXJhbWV0ZXJzIC0gQUJJIHBhcmFtZXRlcnNcbiAqIEByZXR1cm5zIEh1bWFuLXJlYWRhYmxlIEFCSSBwYXJhbWV0ZXJzXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdEFiaVBhcmFtZXRlcnMoW1xuICogICAvLyAgXj8gY29uc3QgcmVzdWx0OiAnYWRkcmVzcyBmcm9tLCB1aW50MjU2IHRva2VuSWQnXG4gKiAgIHsgdHlwZTogJ2FkZHJlc3MnLCBuYW1lOiAnZnJvbScgfSxcbiAqICAgeyB0eXBlOiAndWludDI1NicsIG5hbWU6ICd0b2tlbklkJyB9LFxuICogXSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEFiaVBhcmFtZXRlcnMoYWJpUGFyYW1ldGVycykge1xuICAgIGxldCBwYXJhbXMgPSAnJztcbiAgICBjb25zdCBsZW5ndGggPSBhYmlQYXJhbWV0ZXJzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFiaVBhcmFtZXRlciA9IGFiaVBhcmFtZXRlcnNbaV07XG4gICAgICAgIHBhcmFtcyArPSBmb3JtYXRBYmlQYXJhbWV0ZXIoYWJpUGFyYW1ldGVyKTtcbiAgICAgICAgaWYgKGkgIT09IGxlbmd0aCAtIDEpXG4gICAgICAgICAgICBwYXJhbXMgKz0gJywgJztcbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdEFiaVBhcmFtZXRlcnMuanMubWFwIl0sIm5hbWVzIjpbImZvcm1hdEFiaVBhcmFtZXRlciIsImZvcm1hdEFiaVBhcmFtZXRlcnMiLCJhYmlQYXJhbWV0ZXJzIiwicGFyYW1zIiwibGVuZ3RoIiwiaSIsImFiaVBhcmFtZXRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/human-readable/formatAbiParameters.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/regex.js":
/*!******************************************************************************************!*\
  !*** ./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/regex.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bytesRegex: () => (/* binding */ bytesRegex),\n/* harmony export */   execTyped: () => (/* binding */ execTyped),\n/* harmony export */   integerRegex: () => (/* binding */ integerRegex),\n/* harmony export */   isTupleRegex: () => (/* binding */ isTupleRegex)\n/* harmony export */ });\n// TODO: This looks cool. Need to check the performance of `new RegExp` versus defined inline though.\n// https://twitter.com/GabrielVergnaud/status/1622906834343366657\nfunction execTyped(regex, string) {\n    const match = regex.exec(string);\n    return match?.groups;\n}\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nconst bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nconst integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\nconst isTupleRegex = /^\\(.+?\\).*?$/; //# sourceMappingURL=regex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0BzdG9yeS1wcm90b2NvbC9jb3JlLXNkay9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2VzbS9yZWdleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEscUdBQXFHO0FBQ3JHLGlFQUFpRTtBQUMxRCxTQUFTQSxVQUFVQyxLQUFLLEVBQUVDLE1BQU07SUFDbkMsTUFBTUMsUUFBUUYsTUFBTUcsSUFBSSxDQUFDRjtJQUN6QixPQUFPQyxPQUFPRTtBQUNsQjtBQUNBLHNEQUFzRDtBQUN0RCwyQkFBMkI7QUFDcEIsTUFBTUMsYUFBYSx1Q0FBdUM7QUFDakUsaUZBQWlGO0FBQ2pGLDJCQUEyQjtBQUNwQixNQUFNQyxlQUFlLCtIQUErSDtBQUNwSixNQUFNQyxlQUFlLGVBQWUsQ0FDM0MsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9hcHAvbm9kZV9tb2R1bGVzL0BzdG9yeS1wcm90b2NvbC9jb3JlLXNkay9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2VzbS9yZWdleC5qcz82YzFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRPRE86IFRoaXMgbG9va3MgY29vbC4gTmVlZCB0byBjaGVjayB0aGUgcGVyZm9ybWFuY2Ugb2YgYG5ldyBSZWdFeHBgIHZlcnN1cyBkZWZpbmVkIGlubGluZSB0aG91Z2guXG4vLyBodHRwczovL3R3aXR0ZXIuY29tL0dhYnJpZWxWZXJnbmF1ZC9zdGF0dXMvMTYyMjkwNjgzNDM0MzM2NjY1N1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWNUeXBlZChyZWdleCwgc3RyaW5nKSB7XG4gICAgY29uc3QgbWF0Y2ggPSByZWdleC5leGVjKHN0cmluZyk7XG4gICAgcmV0dXJuIG1hdGNoPy5ncm91cHM7XG59XG4vLyBgYnl0ZXM8TT5gOiBiaW5hcnkgdHlwZSBvZiBgTWAgYnl0ZXMsIGAwIDwgTSA8PSAzMmBcbi8vIGh0dHBzOi8vcmVnZXhyLmNvbS82dmE1NVxuZXhwb3J0IGNvbnN0IGJ5dGVzUmVnZXggPSAvXmJ5dGVzKFsxLTldfDFbMC05XXwyWzAtOV18M1swLTJdKT8kLztcbi8vIGAodSlpbnQ8TT5gOiAodW4pc2lnbmVkIGludGVnZXIgdHlwZSBvZiBgTWAgYml0cywgYDAgPCBNIDw9IDI1NmAsIGBNICUgOCA9PSAwYFxuLy8gaHR0cHM6Ly9yZWdleHIuY29tLzZ2OGhwXG5leHBvcnQgY29uc3QgaW50ZWdlclJlZ2V4ID0gL151P2ludCg4fDE2fDI0fDMyfDQwfDQ4fDU2fDY0fDcyfDgwfDg4fDk2fDEwNHwxMTJ8MTIwfDEyOHwxMzZ8MTQ0fDE1MnwxNjB8MTY4fDE3NnwxODR8MTkyfDIwMHwyMDh8MjE2fDIyNHwyMzJ8MjQwfDI0OHwyNTYpPyQvO1xuZXhwb3J0IGNvbnN0IGlzVHVwbGVSZWdleCA9IC9eXFwoLis/XFwpLio/JC87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWdleC5qcy5tYXAiXSwibmFtZXMiOlsiZXhlY1R5cGVkIiwicmVnZXgiLCJzdHJpbmciLCJtYXRjaCIsImV4ZWMiLCJncm91cHMiLCJieXRlc1JlZ2V4IiwiaW50ZWdlclJlZ2V4IiwiaXNUdXBsZVJlZ2V4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@story-protocol/core-sdk/node_modules/abitype/dist/esm/regex.js\n");

/***/ })

};
;