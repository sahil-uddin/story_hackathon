/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-json-rpc-filters";
exports.ids = ["vendor-chunks/eth-json-rpc-filters"];
exports.modules = {

/***/ "(ssr)/./app/node_modules/eth-json-rpc-filters/base-filter-history.js":
/*!**********************************************************************!*\
  !*** ./app/node_modules/eth-json-rpc-filters/base-filter-history.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const BaseFilter = __webpack_require__(/*! ./base-filter */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/base-filter.js\");\n// tracks all results ever recorded\nclass BaseFilterWithHistory extends BaseFilter {\n    constructor(){\n        super();\n        this.allResults = [];\n    }\n    async update() {\n        throw new Error(\"BaseFilterWithHistory - no update method specified\");\n    }\n    addResults(newResults) {\n        this.allResults = this.allResults.concat(newResults);\n        super.addResults(newResults);\n    }\n    addInitialResults(newResults) {\n        this.allResults = this.allResults.concat(newResults);\n        super.addInitialResults(newResults);\n    }\n    getAllResults() {\n        return this.allResults;\n    }\n}\nmodule.exports = BaseFilterWithHistory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2Jhc2UtZmlsdGVyLWhpc3RvcnkuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFFM0IsbUNBQW1DO0FBQ25DLE1BQU1DLDhCQUE4QkY7SUFFbENHLGFBQWU7UUFDYixLQUFLO1FBQ0wsSUFBSSxDQUFDQyxVQUFVLEdBQUcsRUFBRTtJQUN0QjtJQUVBLE1BQU1DLFNBQVU7UUFDZCxNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFFQUMsV0FBWUMsVUFBVSxFQUFFO1FBQ3RCLElBQUksQ0FBQ0osVUFBVSxHQUFHLElBQUksQ0FBQ0EsVUFBVSxDQUFDSyxNQUFNLENBQUNEO1FBQ3pDLEtBQUssQ0FBQ0QsV0FBV0M7SUFDbkI7SUFFQUUsa0JBQW1CRixVQUFVLEVBQUU7UUFDN0IsSUFBSSxDQUFDSixVQUFVLEdBQUcsSUFBSSxDQUFDQSxVQUFVLENBQUNLLE1BQU0sQ0FBQ0Q7UUFDekMsS0FBSyxDQUFDRSxrQkFBa0JGO0lBQzFCO0lBRUFHLGdCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDUCxVQUFVO0lBQ3hCO0FBRUY7QUFFQVEsT0FBT0MsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLy4vYXBwL25vZGVfbW9kdWxlcy9ldGgtanNvbi1ycGMtZmlsdGVycy9iYXNlLWZpbHRlci1oaXN0b3J5LmpzP2JiMzUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmFzZUZpbHRlciA9IHJlcXVpcmUoJy4vYmFzZS1maWx0ZXInKVxuXG4vLyB0cmFja3MgYWxsIHJlc3VsdHMgZXZlciByZWNvcmRlZFxuY2xhc3MgQmFzZUZpbHRlcldpdGhIaXN0b3J5IGV4dGVuZHMgQmFzZUZpbHRlciB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmFsbFJlc3VsdHMgPSBbXVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jhc2VGaWx0ZXJXaXRoSGlzdG9yeSAtIG5vIHVwZGF0ZSBtZXRob2Qgc3BlY2lmaWVkJylcbiAgfVxuXG4gIGFkZFJlc3VsdHMgKG5ld1Jlc3VsdHMpIHtcbiAgICB0aGlzLmFsbFJlc3VsdHMgPSB0aGlzLmFsbFJlc3VsdHMuY29uY2F0KG5ld1Jlc3VsdHMpXG4gICAgc3VwZXIuYWRkUmVzdWx0cyhuZXdSZXN1bHRzKVxuICB9XG5cbiAgYWRkSW5pdGlhbFJlc3VsdHMgKG5ld1Jlc3VsdHMpIHtcbiAgICB0aGlzLmFsbFJlc3VsdHMgPSB0aGlzLmFsbFJlc3VsdHMuY29uY2F0KG5ld1Jlc3VsdHMpXG4gICAgc3VwZXIuYWRkSW5pdGlhbFJlc3VsdHMobmV3UmVzdWx0cylcbiAgfVxuXG4gIGdldEFsbFJlc3VsdHMgKCkge1xuICAgIHJldHVybiB0aGlzLmFsbFJlc3VsdHNcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZUZpbHRlcldpdGhIaXN0b3J5Il0sIm5hbWVzIjpbIkJhc2VGaWx0ZXIiLCJyZXF1aXJlIiwiQmFzZUZpbHRlcldpdGhIaXN0b3J5IiwiY29uc3RydWN0b3IiLCJhbGxSZXN1bHRzIiwidXBkYXRlIiwiRXJyb3IiLCJhZGRSZXN1bHRzIiwibmV3UmVzdWx0cyIsImNvbmNhdCIsImFkZEluaXRpYWxSZXN1bHRzIiwiZ2V0QWxsUmVzdWx0cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/eth-json-rpc-filters/base-filter-history.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/eth-json-rpc-filters/base-filter.js":
/*!**************************************************************!*\
  !*** ./app/node_modules/eth-json-rpc-filters/base-filter.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SafeEventEmitter = (__webpack_require__(/*! @metamask/safe-event-emitter */ \"(ssr)/./app/node_modules/@metamask/safe-event-emitter/index.js\")[\"default\"]);\nclass BaseFilter extends SafeEventEmitter {\n    constructor(){\n        super();\n        this.updates = [];\n    }\n    async initialize() {}\n    async update() {\n        throw new Error(\"BaseFilter - no update method specified\");\n    }\n    addResults(newResults) {\n        this.updates = this.updates.concat(newResults);\n        newResults.forEach((result)=>this.emit(\"update\", result));\n    }\n    addInitialResults(newResults) {}\n    getChangesAndClear() {\n        const updates = this.updates;\n        this.updates = [];\n        return updates;\n    }\n}\nmodule.exports = BaseFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2Jhc2UtZmlsdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLG1CQUFtQkMsc0lBQStDO0FBRXhFLE1BQU1FLG1CQUFtQkg7SUFFdkJJLGFBQWU7UUFDYixLQUFLO1FBQ0wsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtJQUNuQjtJQUVBLE1BQU1DLGFBQWMsQ0FBQztJQUVyQixNQUFNQyxTQUFVO1FBQ2QsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBRUFDLFdBQVlDLFVBQVUsRUFBRTtRQUN0QixJQUFJLENBQUNMLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU8sQ0FBQ00sTUFBTSxDQUFDRDtRQUNuQ0EsV0FBV0UsT0FBTyxDQUFDQyxDQUFBQSxTQUFVLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFVBQVVEO0lBQ25EO0lBRUFFLGtCQUFtQkwsVUFBVSxFQUFFLENBQUM7SUFFaENNLHFCQUFzQjtRQUNwQixNQUFNWCxVQUFVLElBQUksQ0FBQ0EsT0FBTztRQUM1QixJQUFJLENBQUNBLE9BQU8sR0FBRyxFQUFFO1FBQ2pCLE9BQU9BO0lBQ1Q7QUFFRjtBQUVBWSxPQUFPQyxPQUFPLEdBQUdmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9hcHAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2Jhc2UtZmlsdGVyLmpzPzYwMzciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2FmZUV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ0BtZXRhbWFzay9zYWZlLWV2ZW50LWVtaXR0ZXInKS5kZWZhdWx0XG5cbmNsYXNzIEJhc2VGaWx0ZXIgZXh0ZW5kcyBTYWZlRXZlbnRFbWl0dGVyIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudXBkYXRlcyA9IFtdXG4gIH1cblxuICBhc3luYyBpbml0aWFsaXplICgpIHt9XG5cbiAgYXN5bmMgdXBkYXRlICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jhc2VGaWx0ZXIgLSBubyB1cGRhdGUgbWV0aG9kIHNwZWNpZmllZCcpXG4gIH1cblxuICBhZGRSZXN1bHRzIChuZXdSZXN1bHRzKSB7XG4gICAgdGhpcy51cGRhdGVzID0gdGhpcy51cGRhdGVzLmNvbmNhdChuZXdSZXN1bHRzKVxuICAgIG5ld1Jlc3VsdHMuZm9yRWFjaChyZXN1bHQgPT4gdGhpcy5lbWl0KCd1cGRhdGUnLCByZXN1bHQpKVxuICB9XG5cbiAgYWRkSW5pdGlhbFJlc3VsdHMgKG5ld1Jlc3VsdHMpIHt9XG5cbiAgZ2V0Q2hhbmdlc0FuZENsZWFyICgpIHtcbiAgICBjb25zdCB1cGRhdGVzID0gdGhpcy51cGRhdGVzXG4gICAgdGhpcy51cGRhdGVzID0gW11cbiAgICByZXR1cm4gdXBkYXRlc1xuICB9XG4gIFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VGaWx0ZXJcbiJdLCJuYW1lcyI6WyJTYWZlRXZlbnRFbWl0dGVyIiwicmVxdWlyZSIsImRlZmF1bHQiLCJCYXNlRmlsdGVyIiwiY29uc3RydWN0b3IiLCJ1cGRhdGVzIiwiaW5pdGlhbGl6ZSIsInVwZGF0ZSIsIkVycm9yIiwiYWRkUmVzdWx0cyIsIm5ld1Jlc3VsdHMiLCJjb25jYXQiLCJmb3JFYWNoIiwicmVzdWx0IiwiZW1pdCIsImFkZEluaXRpYWxSZXN1bHRzIiwiZ2V0Q2hhbmdlc0FuZENsZWFyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/eth-json-rpc-filters/base-filter.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/eth-json-rpc-filters/block-filter.js":
/*!***************************************************************!*\
  !*** ./app/node_modules/eth-json-rpc-filters/block-filter.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const BaseFilter = __webpack_require__(/*! ./base-filter */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/base-filter.js\");\nconst getBlocksForRange = __webpack_require__(/*! ./getBlocksForRange */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/getBlocksForRange.js\");\nconst { incrementHexInt } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/hexUtils.js\");\nclass BlockFilter extends BaseFilter {\n    constructor({ provider, params }){\n        super();\n        this.type = \"block\";\n        this.provider = provider;\n    }\n    async update({ oldBlock, newBlock }) {\n        const toBlock = newBlock;\n        const fromBlock = incrementHexInt(oldBlock);\n        const blockBodies = await getBlocksForRange({\n            provider: this.provider,\n            fromBlock,\n            toBlock\n        });\n        const blockHashes = blockBodies.map((block)=>block.hash);\n        this.addResults(blockHashes);\n    }\n}\nmodule.exports = BlockFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2Jsb2NrLWZpbHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUMzQixNQUFNQyxvQkFBb0JELG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU0sRUFBRUUsZUFBZSxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBRXBDLE1BQU1HLG9CQUFvQko7SUFFeEJLLFlBQWEsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUUsQ0FBRTtRQUNqQyxLQUFLO1FBQ0wsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNGLFFBQVEsR0FBR0E7SUFDbEI7SUFFQSxNQUFNRyxPQUFRLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFLEVBQUU7UUFDcEMsTUFBTUMsVUFBVUQ7UUFDaEIsTUFBTUUsWUFBWVYsZ0JBQWdCTztRQUNsQyxNQUFNSSxjQUFjLE1BQU1aLGtCQUFrQjtZQUFFSSxVQUFVLElBQUksQ0FBQ0EsUUFBUTtZQUFFTztZQUFXRDtRQUFRO1FBQzFGLE1BQU1HLGNBQWNELFlBQVlFLEdBQUcsQ0FBQyxDQUFDQyxRQUFVQSxNQUFNQyxJQUFJO1FBQ3pELElBQUksQ0FBQ0MsVUFBVSxDQUFDSjtJQUNsQjtBQUVGO0FBRUFLLE9BQU9DLE9BQU8sR0FBR2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9hcHAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2Jsb2NrLWZpbHRlci5qcz85ZDgxIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJhc2VGaWx0ZXIgPSByZXF1aXJlKCcuL2Jhc2UtZmlsdGVyJylcbmNvbnN0IGdldEJsb2Nrc0ZvclJhbmdlID0gcmVxdWlyZSgnLi9nZXRCbG9ja3NGb3JSYW5nZScpXG5jb25zdCB7IGluY3JlbWVudEhleEludCB9ID0gcmVxdWlyZSgnLi9oZXhVdGlscycpXG5cbmNsYXNzIEJsb2NrRmlsdGVyIGV4dGVuZHMgQmFzZUZpbHRlciB7XG5cbiAgY29uc3RydWN0b3IgKHsgcHJvdmlkZXIsIHBhcmFtcyB9KSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudHlwZSA9ICdibG9jaydcbiAgICB0aGlzLnByb3ZpZGVyID0gcHJvdmlkZXJcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZSAoeyBvbGRCbG9jaywgbmV3QmxvY2sgfSkge1xuICAgIGNvbnN0IHRvQmxvY2sgPSBuZXdCbG9ja1xuICAgIGNvbnN0IGZyb21CbG9jayA9IGluY3JlbWVudEhleEludChvbGRCbG9jaylcbiAgICBjb25zdCBibG9ja0JvZGllcyA9IGF3YWl0IGdldEJsb2Nrc0ZvclJhbmdlKHsgcHJvdmlkZXI6IHRoaXMucHJvdmlkZXIsIGZyb21CbG9jaywgdG9CbG9jayB9KVxuICAgIGNvbnN0IGJsb2NrSGFzaGVzID0gYmxvY2tCb2RpZXMubWFwKChibG9jaykgPT4gYmxvY2suaGFzaClcbiAgICB0aGlzLmFkZFJlc3VsdHMoYmxvY2tIYXNoZXMpXG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJsb2NrRmlsdGVyXG4iXSwibmFtZXMiOlsiQmFzZUZpbHRlciIsInJlcXVpcmUiLCJnZXRCbG9ja3NGb3JSYW5nZSIsImluY3JlbWVudEhleEludCIsIkJsb2NrRmlsdGVyIiwiY29uc3RydWN0b3IiLCJwcm92aWRlciIsInBhcmFtcyIsInR5cGUiLCJ1cGRhdGUiLCJvbGRCbG9jayIsIm5ld0Jsb2NrIiwidG9CbG9jayIsImZyb21CbG9jayIsImJsb2NrQm9kaWVzIiwiYmxvY2tIYXNoZXMiLCJtYXAiLCJibG9jayIsImhhc2giLCJhZGRSZXN1bHRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/eth-json-rpc-filters/block-filter.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/eth-json-rpc-filters/getBlocksForRange.js":
/*!********************************************************************!*\
  !*** ./app/node_modules/eth-json-rpc-filters/getBlocksForRange.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("module.exports = getBlocksForRange;\nasync function getBlocksForRange({ provider, fromBlock, toBlock }) {\n    if (!fromBlock) fromBlock = toBlock;\n    const fromBlockNumber = hexToInt(fromBlock);\n    const toBlockNumber = hexToInt(toBlock);\n    const blockCountToQuery = toBlockNumber - fromBlockNumber + 1;\n    // load all blocks from old to new (inclusive)\n    const missingBlockNumbers = Array(blockCountToQuery).fill().map((_, index)=>fromBlockNumber + index).map(intToHex);\n    const blockBodies = await Promise.all(missingBlockNumbers.map((blockNum)=>query(provider, \"eth_getBlockByNumber\", [\n            blockNum,\n            false\n        ])));\n    return blockBodies;\n}\nfunction hexToInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    return Number.parseInt(hexString, 16);\n}\nfunction incrementHexInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    const value = hexToInt(hexString);\n    return intToHex(value + 1);\n}\nfunction intToHex(int) {\n    if (int === undefined || int === null) return int;\n    const hexString = int.toString(16);\n    return \"0x\" + hexString;\n}\nfunction sendAsync(provider, request) {\n    return new Promise((resolve, reject)=>{\n        provider.sendAsync(request, (error, response)=>{\n            if (error) {\n                reject(error);\n            } else if (response.error) {\n                reject(response.error);\n            } else if (response.result) {\n                resolve(response.result);\n            } else {\n                reject(new Error(\"Result was empty\"));\n            }\n        });\n    });\n}\nasync function query(provider, method, params) {\n    for(let i = 0; i < 3; i++){\n        try {\n            return await sendAsync(provider, {\n                id: 1,\n                jsonrpc: \"2.0\",\n                method,\n                params\n            });\n        } catch (error) {\n            console.error(`provider.sendAsync failed: ${error.stack || error.message || error}`);\n        }\n    }\n    throw new Error(`Block not found for params: ${JSON.stringify(params)}`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS8uL2FwcC9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvZ2V0QmxvY2tzRm9yUmFuZ2UuanM/MWQ0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGdldEJsb2Nrc0ZvclJhbmdlXG5cbmFzeW5jIGZ1bmN0aW9uIGdldEJsb2Nrc0ZvclJhbmdlKHsgcHJvdmlkZXIsIGZyb21CbG9jaywgdG9CbG9jayB9KSB7XG4gIGlmICghZnJvbUJsb2NrKSBmcm9tQmxvY2sgPSB0b0Jsb2NrXG5cbiAgY29uc3QgZnJvbUJsb2NrTnVtYmVyID0gaGV4VG9JbnQoZnJvbUJsb2NrKVxuICBjb25zdCB0b0Jsb2NrTnVtYmVyID0gaGV4VG9JbnQodG9CbG9jaylcbiAgY29uc3QgYmxvY2tDb3VudFRvUXVlcnkgPSB0b0Jsb2NrTnVtYmVyIC0gZnJvbUJsb2NrTnVtYmVyICsgMVxuICAvLyBsb2FkIGFsbCBibG9ja3MgZnJvbSBvbGQgdG8gbmV3IChpbmNsdXNpdmUpXG4gIGNvbnN0IG1pc3NpbmdCbG9ja051bWJlcnMgPSBBcnJheShibG9ja0NvdW50VG9RdWVyeSkuZmlsbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChfLGluZGV4KSA9PiBmcm9tQmxvY2tOdW1iZXIgKyBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoaW50VG9IZXgpXG4gIGNvbnN0IGJsb2NrQm9kaWVzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgbWlzc2luZ0Jsb2NrTnVtYmVycy5tYXAoYmxvY2tOdW0gPT4gcXVlcnkocHJvdmlkZXIsICdldGhfZ2V0QmxvY2tCeU51bWJlcicsIFtibG9ja051bSwgZmFsc2VdKSlcbiAgKVxuICByZXR1cm4gYmxvY2tCb2RpZXNcbn1cblxuZnVuY3Rpb24gaGV4VG9JbnQoaGV4U3RyaW5nKSB7XG4gIGlmIChoZXhTdHJpbmcgPT09IHVuZGVmaW5lZCB8fCBoZXhTdHJpbmcgPT09IG51bGwpIHJldHVybiBoZXhTdHJpbmdcbiAgcmV0dXJuIE51bWJlci5wYXJzZUludChoZXhTdHJpbmcsIDE2KVxufVxuXG5mdW5jdGlvbiBpbmNyZW1lbnRIZXhJbnQoaGV4U3RyaW5nKXtcbiAgaWYgKGhleFN0cmluZyA9PT0gdW5kZWZpbmVkIHx8IGhleFN0cmluZyA9PT0gbnVsbCkgcmV0dXJuIGhleFN0cmluZ1xuICBjb25zdCB2YWx1ZSA9IGhleFRvSW50KGhleFN0cmluZylcbiAgcmV0dXJuIGludFRvSGV4KHZhbHVlICsgMSlcbn1cblxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIGlmIChpbnQgPT09IHVuZGVmaW5lZCB8fCBpbnQgPT09IG51bGwpIHJldHVybiBpbnRcbiAgY29uc3QgaGV4U3RyaW5nID0gaW50LnRvU3RyaW5nKDE2KVxuICByZXR1cm4gJzB4JyArIGhleFN0cmluZ1xufVxuXG5mdW5jdGlvbiBzZW5kQXN5bmMocHJvdmlkZXIsIHJlcXVlc3QpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBwcm92aWRlci5zZW5kQXN5bmMocmVxdWVzdCwgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgIHJlamVjdChyZXNwb25zZS5lcnJvcik7XG4gICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnJlc3VsdCkge1xuICAgICAgICByZXNvbHZlKHJlc3BvbnNlLnJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKFwiUmVzdWx0IHdhcyBlbXB0eVwiKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBxdWVyeShwcm92aWRlciwgbWV0aG9kLCBwYXJhbXMpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHNlbmRBc3luYyhwcm92aWRlciwge1xuICAgICAgICBpZDogMSxcbiAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBwYXJhbXMsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYHByb3ZpZGVyLnNlbmRBc3luYyBmYWlsZWQ6ICR7ZXJyb3Iuc3RhY2sgfHwgZXJyb3IubWVzc2FnZSB8fCBlcnJvcn1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYEJsb2NrIG5vdCBmb3VuZCBmb3IgcGFyYW1zOiAke0pTT04uc3RyaW5naWZ5KHBhcmFtcyl9YCk7XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImdldEJsb2Nrc0ZvclJhbmdlIiwicHJvdmlkZXIiLCJmcm9tQmxvY2siLCJ0b0Jsb2NrIiwiZnJvbUJsb2NrTnVtYmVyIiwiaGV4VG9JbnQiLCJ0b0Jsb2NrTnVtYmVyIiwiYmxvY2tDb3VudFRvUXVlcnkiLCJtaXNzaW5nQmxvY2tOdW1iZXJzIiwiQXJyYXkiLCJmaWxsIiwibWFwIiwiXyIsImluZGV4IiwiaW50VG9IZXgiLCJibG9ja0JvZGllcyIsIlByb21pc2UiLCJhbGwiLCJibG9ja051bSIsInF1ZXJ5IiwiaGV4U3RyaW5nIiwidW5kZWZpbmVkIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJpbmNyZW1lbnRIZXhJbnQiLCJ2YWx1ZSIsImludCIsInRvU3RyaW5nIiwic2VuZEFzeW5jIiwicmVxdWVzdCIsInJlc29sdmUiLCJyZWplY3QiLCJlcnJvciIsInJlc3BvbnNlIiwicmVzdWx0IiwiRXJyb3IiLCJtZXRob2QiLCJwYXJhbXMiLCJpIiwiaWQiLCJqc29ucnBjIiwiY29uc29sZSIsInN0YWNrIiwibWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLGVBQWVBLGtCQUFrQixFQUFFQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFO0lBQy9ELElBQUksQ0FBQ0QsV0FBV0EsWUFBWUM7SUFFNUIsTUFBTUMsa0JBQWtCQyxTQUFTSDtJQUNqQyxNQUFNSSxnQkFBZ0JELFNBQVNGO0lBQy9CLE1BQU1JLG9CQUFvQkQsZ0JBQWdCRixrQkFBa0I7SUFDNUQsOENBQThDO0lBQzlDLE1BQU1JLHNCQUFzQkMsTUFBTUYsbUJBQW1CRyxJQUFJLEdBQzVCQyxHQUFHLENBQUMsQ0FBQ0MsR0FBRUMsUUFBVVQsa0JBQWtCUyxPQUNuQ0YsR0FBRyxDQUFDRztJQUNqQyxNQUFNQyxjQUFjLE1BQU1DLFFBQVFDLEdBQUcsQ0FDbkNULG9CQUFvQkcsR0FBRyxDQUFDTyxDQUFBQSxXQUFZQyxNQUFNbEIsVUFBVSx3QkFBd0I7WUFBQ2lCO1lBQVU7U0FBTTtJQUUvRixPQUFPSDtBQUNUO0FBRUEsU0FBU1YsU0FBU2UsU0FBUztJQUN6QixJQUFJQSxjQUFjQyxhQUFhRCxjQUFjLE1BQU0sT0FBT0E7SUFDMUQsT0FBT0UsT0FBT0MsUUFBUSxDQUFDSCxXQUFXO0FBQ3BDO0FBRUEsU0FBU0ksZ0JBQWdCSixTQUFTO0lBQ2hDLElBQUlBLGNBQWNDLGFBQWFELGNBQWMsTUFBTSxPQUFPQTtJQUMxRCxNQUFNSyxRQUFRcEIsU0FBU2U7SUFDdkIsT0FBT04sU0FBU1csUUFBUTtBQUMxQjtBQUVBLFNBQVNYLFNBQVNZLEdBQUc7SUFDbkIsSUFBSUEsUUFBUUwsYUFBYUssUUFBUSxNQUFNLE9BQU9BO0lBQzlDLE1BQU1OLFlBQVlNLElBQUlDLFFBQVEsQ0FBQztJQUMvQixPQUFPLE9BQU9QO0FBQ2hCO0FBRUEsU0FBU1EsVUFBVTNCLFFBQVEsRUFBRTRCLE9BQU87SUFDbEMsT0FBTyxJQUFJYixRQUFRLENBQUNjLFNBQVNDO1FBQzNCOUIsU0FBUzJCLFNBQVMsQ0FBQ0MsU0FBUyxDQUFDRyxPQUFPQztZQUNsQyxJQUFJRCxPQUFPO2dCQUNURCxPQUFPQztZQUNULE9BQU8sSUFBSUMsU0FBU0QsS0FBSyxFQUFFO2dCQUN6QkQsT0FBT0UsU0FBU0QsS0FBSztZQUN2QixPQUFPLElBQUlDLFNBQVNDLE1BQU0sRUFBRTtnQkFDMUJKLFFBQVFHLFNBQVNDLE1BQU07WUFDekIsT0FBTztnQkFDTEgsT0FBTyxJQUFJSSxNQUFNO1lBQ25CO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsZUFBZWhCLE1BQU1sQixRQUFRLEVBQUVtQyxNQUFNLEVBQUVDLE1BQU07SUFDM0MsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBSztRQUMxQixJQUFJO1lBQ0YsT0FBTyxNQUFNVixVQUFVM0IsVUFBVTtnQkFDL0JzQyxJQUFJO2dCQUNKQyxTQUFTO2dCQUNUSjtnQkFDQUM7WUFDRjtRQUNGLEVBQUUsT0FBT0wsT0FBTztZQUNkUyxRQUFRVCxLQUFLLENBQ1gsQ0FBQywyQkFBMkIsRUFBRUEsTUFBTVUsS0FBSyxJQUFJVixNQUFNVyxPQUFPLElBQUlYLE1BQU0sQ0FBQztRQUV6RTtJQUNGO0lBQ0EsTUFBTSxJQUFJRyxNQUFNLENBQUMsNEJBQTRCLEVBQUVTLEtBQUtDLFNBQVMsQ0FBQ1IsUUFBUSxDQUFDO0FBQ3pFIiwiZmlsZSI6Iihzc3IpLy4vYXBwL25vZGVfbW9kdWxlcy9ldGgtanNvbi1ycGMtZmlsdGVycy9nZXRCbG9ja3NGb3JSYW5nZS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/eth-json-rpc-filters/getBlocksForRange.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/eth-json-rpc-filters/hexUtils.js":
/*!***********************************************************!*\
  !*** ./app/node_modules/eth-json-rpc-filters/hexUtils.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = {\n    minBlockRef,\n    maxBlockRef,\n    sortBlockRefs,\n    bnToHex,\n    blockRefIsNumber,\n    hexToInt,\n    incrementHexInt,\n    intToHex,\n    unsafeRandomBytes\n};\nfunction minBlockRef(...refs) {\n    const sortedRefs = sortBlockRefs(refs);\n    return sortedRefs[0];\n}\nfunction maxBlockRef(...refs) {\n    const sortedRefs = sortBlockRefs(refs);\n    return sortedRefs[sortedRefs.length - 1];\n}\nfunction sortBlockRefs(refs) {\n    return refs.sort((refA, refB)=>{\n        if (refA === \"latest\" || refB === \"earliest\") return 1;\n        if (refB === \"latest\" || refA === \"earliest\") return -1;\n        return hexToInt(refA) - hexToInt(refB);\n    });\n}\nfunction bnToHex(bn) {\n    return \"0x\" + bn.toString(16);\n}\nfunction blockRefIsNumber(blockRef) {\n    return blockRef && ![\n        \"earliest\",\n        \"latest\",\n        \"pending\"\n    ].includes(blockRef);\n}\nfunction hexToInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    return Number.parseInt(hexString, 16);\n}\nfunction incrementHexInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    const value = hexToInt(hexString);\n    return intToHex(value + 1);\n}\nfunction intToHex(int) {\n    if (int === undefined || int === null) return int;\n    let hexString = int.toString(16);\n    const needsLeftPad = hexString.length % 2;\n    if (needsLeftPad) hexString = \"0\" + hexString;\n    return \"0x\" + hexString;\n}\nfunction unsafeRandomBytes(byteCount) {\n    let result = \"0x\";\n    for(let i = 0; i < byteCount; i++){\n        result += unsafeRandomNibble();\n        result += unsafeRandomNibble();\n    }\n    return result;\n}\nfunction unsafeRandomNibble() {\n    return Math.floor(Math.random() * 16).toString(16);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS8uL2FwcC9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvaGV4VXRpbHMuanM/ZDlhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbm1vZHVsZS5leHBvcnRzID0ge1xuICBtaW5CbG9ja1JlZixcbiAgbWF4QmxvY2tSZWYsXG4gIHNvcnRCbG9ja1JlZnMsXG4gIGJuVG9IZXgsXG4gIGJsb2NrUmVmSXNOdW1iZXIsXG4gIGhleFRvSW50LFxuICBpbmNyZW1lbnRIZXhJbnQsXG4gIGludFRvSGV4LFxuICB1bnNhZmVSYW5kb21CeXRlcyxcbn1cblxuZnVuY3Rpb24gbWluQmxvY2tSZWYoLi4ucmVmcykge1xuICBjb25zdCBzb3J0ZWRSZWZzID0gc29ydEJsb2NrUmVmcyhyZWZzKVxuICByZXR1cm4gc29ydGVkUmVmc1swXVxufVxuXG5mdW5jdGlvbiBtYXhCbG9ja1JlZiguLi5yZWZzKSB7XG4gIGNvbnN0IHNvcnRlZFJlZnMgPSBzb3J0QmxvY2tSZWZzKHJlZnMpXG4gIHJldHVybiBzb3J0ZWRSZWZzW3NvcnRlZFJlZnMubGVuZ3RoLTFdXG59XG5cbmZ1bmN0aW9uIHNvcnRCbG9ja1JlZnMocmVmcykge1xuICByZXR1cm4gcmVmcy5zb3J0KChyZWZBLCByZWZCKSA9PiB7XG4gICAgaWYgKHJlZkEgPT09ICdsYXRlc3QnIHx8IHJlZkIgPT09ICdlYXJsaWVzdCcpIHJldHVybiAxXG4gICAgaWYgKHJlZkIgPT09ICdsYXRlc3QnIHx8IHJlZkEgPT09ICdlYXJsaWVzdCcpIHJldHVybiAtMVxuICAgIHJldHVybiBoZXhUb0ludChyZWZBKSAtIGhleFRvSW50KHJlZkIpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGJuVG9IZXgoYm4pIHtcbiAgcmV0dXJuICcweCcgKyBibi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gYmxvY2tSZWZJc051bWJlcihibG9ja1JlZil7XG4gIHJldHVybiBibG9ja1JlZiAmJiAhWydlYXJsaWVzdCcsICdsYXRlc3QnLCAncGVuZGluZyddLmluY2x1ZGVzKGJsb2NrUmVmKVxufVxuXG5mdW5jdGlvbiBoZXhUb0ludChoZXhTdHJpbmcpIHtcbiAgaWYgKGhleFN0cmluZyA9PT0gdW5kZWZpbmVkIHx8IGhleFN0cmluZyA9PT0gbnVsbCkgcmV0dXJuIGhleFN0cmluZ1xuICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KGhleFN0cmluZywgMTYpXG59XG5cbmZ1bmN0aW9uIGluY3JlbWVudEhleEludChoZXhTdHJpbmcpe1xuICBpZiAoaGV4U3RyaW5nID09PSB1bmRlZmluZWQgfHwgaGV4U3RyaW5nID09PSBudWxsKSByZXR1cm4gaGV4U3RyaW5nXG4gIGNvbnN0IHZhbHVlID0gaGV4VG9JbnQoaGV4U3RyaW5nKVxuICByZXR1cm4gaW50VG9IZXgodmFsdWUgKyAxKVxufVxuXG5mdW5jdGlvbiBpbnRUb0hleChpbnQpIHtcbiAgaWYgKGludCA9PT0gdW5kZWZpbmVkIHx8IGludCA9PT0gbnVsbCkgcmV0dXJuIGludFxuICBsZXQgaGV4U3RyaW5nID0gaW50LnRvU3RyaW5nKDE2KVxuICBjb25zdCBuZWVkc0xlZnRQYWQgPSBoZXhTdHJpbmcubGVuZ3RoICUgMlxuICBpZiAobmVlZHNMZWZ0UGFkKSBoZXhTdHJpbmcgPSAnMCcgKyBoZXhTdHJpbmdcbiAgcmV0dXJuICcweCcgKyBoZXhTdHJpbmdcbn1cblxuZnVuY3Rpb24gdW5zYWZlUmFuZG9tQnl0ZXMoYnl0ZUNvdW50KSB7XG4gIGxldCByZXN1bHQgPSAnMHgnXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZUNvdW50OyBpKyspIHtcbiAgICByZXN1bHQgKz0gdW5zYWZlUmFuZG9tTmliYmxlKClcbiAgICByZXN1bHQgKz0gdW5zYWZlUmFuZG9tTmliYmxlKClcbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHVuc2FmZVJhbmRvbU5pYmJsZSgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE2KS50b1N0cmluZygxNilcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibWluQmxvY2tSZWYiLCJtYXhCbG9ja1JlZiIsInNvcnRCbG9ja1JlZnMiLCJiblRvSGV4IiwiYmxvY2tSZWZJc051bWJlciIsImhleFRvSW50IiwiaW5jcmVtZW50SGV4SW50IiwiaW50VG9IZXgiLCJ1bnNhZmVSYW5kb21CeXRlcyIsInJlZnMiLCJzb3J0ZWRSZWZzIiwibGVuZ3RoIiwic29ydCIsInJlZkEiLCJyZWZCIiwiYm4iLCJ0b1N0cmluZyIsImJsb2NrUmVmIiwiaW5jbHVkZXMiLCJoZXhTdHJpbmciLCJ1bmRlZmluZWQiLCJOdW1iZXIiLCJwYXJzZUludCIsInZhbHVlIiwiaW50IiwibmVlZHNMZWZ0UGFkIiwiYnl0ZUNvdW50IiwicmVzdWx0IiwiaSIsInVuc2FmZVJhbmRvbU5pYmJsZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSJdLCJtYXBwaW5ncyI6IkFBQ0FBLE9BQU9DLE9BQU8sR0FBRztJQUNmQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztBQUNGO0FBRUEsU0FBU1IsWUFBWSxHQUFHUyxJQUFJO0lBQzFCLE1BQU1DLGFBQWFSLGNBQWNPO0lBQ2pDLE9BQU9DLFVBQVUsQ0FBQyxFQUFFO0FBQ3RCO0FBRUEsU0FBU1QsWUFBWSxHQUFHUSxJQUFJO0lBQzFCLE1BQU1DLGFBQWFSLGNBQWNPO0lBQ2pDLE9BQU9DLFVBQVUsQ0FBQ0EsV0FBV0MsTUFBTSxHQUFDLEVBQUU7QUFDeEM7QUFFQSxTQUFTVCxjQUFjTyxJQUFJO0lBQ3pCLE9BQU9BLEtBQUtHLElBQUksQ0FBQyxDQUFDQyxNQUFNQztRQUN0QixJQUFJRCxTQUFTLFlBQVlDLFNBQVMsWUFBWSxPQUFPO1FBQ3JELElBQUlBLFNBQVMsWUFBWUQsU0FBUyxZQUFZLE9BQU8sQ0FBQztRQUN0RCxPQUFPUixTQUFTUSxRQUFRUixTQUFTUztJQUNuQztBQUNGO0FBRUEsU0FBU1gsUUFBUVksRUFBRTtJQUNqQixPQUFPLE9BQU9BLEdBQUdDLFFBQVEsQ0FBQztBQUM1QjtBQUVBLFNBQVNaLGlCQUFpQmEsUUFBUTtJQUNoQyxPQUFPQSxZQUFZLENBQUM7UUFBQztRQUFZO1FBQVU7S0FBVSxDQUFDQyxRQUFRLENBQUNEO0FBQ2pFO0FBRUEsU0FBU1osU0FBU2MsU0FBUztJQUN6QixJQUFJQSxjQUFjQyxhQUFhRCxjQUFjLE1BQU0sT0FBT0E7SUFDMUQsT0FBT0UsT0FBT0MsUUFBUSxDQUFDSCxXQUFXO0FBQ3BDO0FBRUEsU0FBU2IsZ0JBQWdCYSxTQUFTO0lBQ2hDLElBQUlBLGNBQWNDLGFBQWFELGNBQWMsTUFBTSxPQUFPQTtJQUMxRCxNQUFNSSxRQUFRbEIsU0FBU2M7SUFDdkIsT0FBT1osU0FBU2dCLFFBQVE7QUFDMUI7QUFFQSxTQUFTaEIsU0FBU2lCLEdBQUc7SUFDbkIsSUFBSUEsUUFBUUosYUFBYUksUUFBUSxNQUFNLE9BQU9BO0lBQzlDLElBQUlMLFlBQVlLLElBQUlSLFFBQVEsQ0FBQztJQUM3QixNQUFNUyxlQUFlTixVQUFVUixNQUFNLEdBQUc7SUFDeEMsSUFBSWMsY0FBY04sWUFBWSxNQUFNQTtJQUNwQyxPQUFPLE9BQU9BO0FBQ2hCO0FBRUEsU0FBU1gsa0JBQWtCa0IsU0FBUztJQUNsQyxJQUFJQyxTQUFTO0lBQ2IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLFdBQVdFLElBQUs7UUFDbENELFVBQVVFO1FBQ1ZGLFVBQVVFO0lBQ1o7SUFDQSxPQUFPRjtBQUNUO0FBRUEsU0FBU0U7SUFDUCxPQUFPQyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLE1BQU0sS0FBSyxJQUFJaEIsUUFBUSxDQUFDO0FBQ2pEIiwiZmlsZSI6Iihzc3IpLy4vYXBwL25vZGVfbW9kdWxlcy9ldGgtanNvbi1ycGMtZmlsdGVycy9oZXhVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/eth-json-rpc-filters/hexUtils.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/eth-json-rpc-filters/index.js":
/*!********************************************************!*\
  !*** ./app/node_modules/eth-json-rpc-filters/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Mutex = (__webpack_require__(/*! async-mutex */ \"(ssr)/./app/node_modules/async-mutex/lib/index.js\").Mutex);\nconst { createAsyncMiddleware, createScaffoldMiddleware } = __webpack_require__(/*! json-rpc-engine */ \"(ssr)/./app/node_modules/json-rpc-engine/dist/index.js\");\nconst LogFilter = __webpack_require__(/*! ./log-filter.js */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/log-filter.js\");\nconst BlockFilter = __webpack_require__(/*! ./block-filter.js */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/block-filter.js\");\nconst TxFilter = __webpack_require__(/*! ./tx-filter.js */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/tx-filter.js\");\nconst { intToHex, hexToInt } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/hexUtils.js\");\nmodule.exports = createEthFilterMiddleware;\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n    // create filter collection\n    let filterIndex = 0;\n    let filters = {};\n    // create update mutex\n    const mutex = new Mutex();\n    const waitForFree = mutexMiddlewareWrapper({\n        mutex\n    });\n    const middleware = createScaffoldMiddleware({\n        // install filters\n        eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n        eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n        eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n        // uninstall filters\n        eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n        // checking filter changes\n        eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n        eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n    });\n    // setup filter updating and destroy handler\n    const filterUpdater = async ({ oldBlock, newBlock })=>{\n        if (filters.length === 0) return;\n        // lock update reads\n        const releaseLock = await mutex.acquire();\n        try {\n            // process all filters in parallel\n            await Promise.all(objValues(filters).map(async (filter)=>{\n                try {\n                    await filter.update({\n                        oldBlock,\n                        newBlock\n                    });\n                } catch (err) {\n                    // handle each error individually so filter update errors don't affect other filters\n                    console.error(err);\n                }\n            }));\n        } catch (err) {\n            // log error so we don't skip the releaseLock\n            console.error(err);\n        }\n        // unlock update reads\n        releaseLock();\n    };\n    // expose filter methods directly\n    middleware.newLogFilter = newLogFilter;\n    middleware.newBlockFilter = newBlockFilter;\n    middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n    middleware.uninstallFilter = uninstallFilterHandler;\n    middleware.getFilterChanges = getFilterChanges;\n    middleware.getFilterLogs = getFilterLogs;\n    // expose destroy method for cleanup\n    middleware.destroy = ()=>{\n        uninstallAllFilters();\n    };\n    return middleware;\n    //\n    // new filters\n    //\n    async function newLogFilter(params) {\n        const filter = new LogFilter({\n            provider,\n            params\n        });\n        const filterIndex = await installFilter(filter);\n        return filter;\n    }\n    async function newBlockFilter() {\n        const filter = new BlockFilter({\n            provider\n        });\n        const filterIndex = await installFilter(filter);\n        return filter;\n    }\n    async function newPendingTransactionFilter() {\n        const filter = new TxFilter({\n            provider\n        });\n        const filterIndex = await installFilter(filter);\n        return filter;\n    }\n    //\n    // get filter changes\n    //\n    async function getFilterChanges(filterIndexHex) {\n        const filterIndex = hexToInt(filterIndexHex);\n        const filter = filters[filterIndex];\n        if (!filter) {\n            throw new Error(`No filter for index \"${filterIndex}\"`);\n        }\n        const results = filter.getChangesAndClear();\n        return results;\n    }\n    async function getFilterLogs(filterIndexHex) {\n        const filterIndex = hexToInt(filterIndexHex);\n        const filter = filters[filterIndex];\n        if (!filter) {\n            throw new Error(`No filter for index \"${filterIndex}\"`);\n        }\n        // only return results for log filters\n        let results = [];\n        if (filter.type === \"log\") {\n            results = filter.getAllResults();\n        }\n        return results;\n    }\n    //\n    // remove filters\n    //\n    async function uninstallFilterHandler(filterIndexHex) {\n        // check filter exists\n        const filterIndex = hexToInt(filterIndexHex);\n        const filter = filters[filterIndex];\n        const result = Boolean(filter);\n        // uninstall filter\n        if (result) {\n            await uninstallFilter(filterIndex);\n        }\n        return result;\n    }\n    //\n    // utils\n    //\n    async function installFilter(filter) {\n        const prevFilterCount = objValues(filters).length;\n        // install filter\n        const currentBlock = await blockTracker.getLatestBlock();\n        await filter.initialize({\n            currentBlock\n        });\n        filterIndex++;\n        filters[filterIndex] = filter;\n        filter.id = filterIndex;\n        filter.idHex = intToHex(filterIndex);\n        // update block tracker subs\n        const newFilterCount = objValues(filters).length;\n        updateBlockTrackerSubs({\n            prevFilterCount,\n            newFilterCount\n        });\n        return filterIndex;\n    }\n    async function uninstallFilter(filterIndex) {\n        const prevFilterCount = objValues(filters).length;\n        delete filters[filterIndex];\n        // update block tracker subs\n        const newFilterCount = objValues(filters).length;\n        updateBlockTrackerSubs({\n            prevFilterCount,\n            newFilterCount\n        });\n    }\n    async function uninstallAllFilters() {\n        const prevFilterCount = objValues(filters).length;\n        filters = {};\n        // update block tracker subs\n        updateBlockTrackerSubs({\n            prevFilterCount,\n            newFilterCount: 0\n        });\n    }\n    function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n        // subscribe\n        if (prevFilterCount === 0 && newFilterCount > 0) {\n            blockTracker.on(\"sync\", filterUpdater);\n            return;\n        }\n        // unsubscribe\n        if (prevFilterCount > 0 && newFilterCount === 0) {\n            blockTracker.removeListener(\"sync\", filterUpdater);\n            return;\n        }\n    }\n}\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n    return toAsyncRpcMiddleware(async (...args)=>{\n        const filter = await createFilterFn(...args);\n        const result = intToHex(filter.id);\n        return result;\n    });\n}\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n    return createAsyncMiddleware(async (req, res)=>{\n        const result = await asyncFn.apply(null, req.params);\n        res.result = result;\n    });\n}\nfunction mutexMiddlewareWrapper({ mutex }) {\n    return (middleware)=>{\n        return async (req, res, next, end)=>{\n            // wait for mutex available\n            // we can release immediately because\n            // we just need to make sure updates aren't active\n            const releaseLock = await mutex.acquire();\n            releaseLock();\n            middleware(req, res, next, end);\n        };\n    };\n}\nfunction objValues(obj, fn) {\n    const values = [];\n    for(let key in obj){\n        values.push(obj[key]);\n    }\n    return values;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/eth-json-rpc-filters/index.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/eth-json-rpc-filters/log-filter.js":
/*!*************************************************************!*\
  !*** ./app/node_modules/eth-json-rpc-filters/log-filter.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const EthQuery = __webpack_require__(/*! eth-query */ \"(ssr)/./app/node_modules/eth-query/index.js\");\nconst pify = __webpack_require__(/*! pify */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/node_modules/pify/index.js\");\nconst BaseFilterWithHistory = __webpack_require__(/*! ./base-filter-history */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/base-filter-history.js\");\nconst { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/hexUtils.js\");\nclass LogFilter extends BaseFilterWithHistory {\n    constructor({ provider, params }){\n        super();\n        this.type = \"log\";\n        this.ethQuery = new EthQuery(provider);\n        this.params = Object.assign({\n            fromBlock: \"latest\",\n            toBlock: \"latest\",\n            address: undefined,\n            topics: []\n        }, params);\n        // normalize address parameter\n        if (this.params.address) {\n            // ensure array\n            if (!Array.isArray(this.params.address)) {\n                this.params.address = [\n                    this.params.address\n                ];\n            }\n            // ensure lowercase\n            this.params.address = this.params.address.map((address)=>address.toLowerCase());\n        }\n    }\n    async initialize({ currentBlock }) {\n        // resolve params.fromBlock\n        let fromBlock = this.params.fromBlock;\n        if ([\n            \"latest\",\n            \"pending\"\n        ].includes(fromBlock)) fromBlock = currentBlock;\n        if (\"earliest\" === fromBlock) fromBlock = \"0x0\";\n        this.params.fromBlock = fromBlock;\n        // set toBlock for initial lookup\n        const toBlock = minBlockRef(this.params.toBlock, currentBlock);\n        const params = Object.assign({}, this.params, {\n            toBlock\n        });\n        // fetch logs and add to results\n        const newLogs = await this._fetchLogs(params);\n        this.addInitialResults(newLogs);\n    }\n    async update({ oldBlock, newBlock }) {\n        // configure params for this update\n        const toBlock = newBlock;\n        let fromBlock;\n        // oldBlock is empty on first sync\n        if (oldBlock) {\n            fromBlock = incrementHexInt(oldBlock);\n        } else {\n            fromBlock = newBlock;\n        }\n        // fetch logs\n        const params = Object.assign({}, this.params, {\n            fromBlock,\n            toBlock\n        });\n        const newLogs = await this._fetchLogs(params);\n        const matchingLogs = newLogs.filter((log)=>this.matchLog(log));\n        // add to results\n        this.addResults(matchingLogs);\n    }\n    async _fetchLogs(params) {\n        const newLogs = await pify((cb)=>this.ethQuery.getLogs(params, cb))();\n        // add to results\n        return newLogs;\n    }\n    matchLog(log) {\n        // check if block number in bounds:\n        if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false;\n        if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false;\n        // address is correct:\n        const normalizedLogAddress = log.address && log.address.toLowerCase();\n        if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false;\n        // topics match:\n        // topics are position-dependant\n        // topics can be nested to represent `or` [[a || b], c]\n        // topics can be null, representing a wild card for that position\n        const topicsMatch = this.params.topics.every((topicPattern, index)=>{\n            // pattern is longer than actual topics\n            let logTopic = log.topics[index];\n            if (!logTopic) return false;\n            logTopic = logTopic.toLowerCase();\n            // normalize subTopics\n            let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [\n                topicPattern\n            ];\n            // check for wild card\n            const subtopicsIncludeWildcard = subtopicsToMatch.includes(null);\n            if (subtopicsIncludeWildcard) return true;\n            subtopicsToMatch = subtopicsToMatch.map((topic)=>topic.toLowerCase());\n            // check each possible matching topic\n            const topicDoesMatch = subtopicsToMatch.includes(logTopic);\n            return topicDoesMatch;\n        });\n        return topicsMatch;\n    }\n}\nmodule.exports = LogFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/eth-json-rpc-filters/log-filter.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/eth-json-rpc-filters/node_modules/pify/index.js":
/*!**************************************************************************!*\
  !*** ./app/node_modules/eth-json-rpc-filters/node_modules/pify/index.js ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nconst processFn = (fn, options, proxy, unwrapped)=>function(...arguments_) {\n        const P = options.promiseModule;\n        return new P((resolve, reject)=>{\n            if (options.multiArgs) {\n                arguments_.push((...result)=>{\n                    if (options.errorFirst) {\n                        if (result[0]) {\n                            reject(result);\n                        } else {\n                            result.shift();\n                            resolve(result);\n                        }\n                    } else {\n                        resolve(result);\n                    }\n                });\n            } else if (options.errorFirst) {\n                arguments_.push((error, result)=>{\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve(result);\n                    }\n                });\n            } else {\n                arguments_.push(resolve);\n            }\n            const self = this === proxy ? unwrapped : this;\n            Reflect.apply(fn, self, arguments_);\n        });\n    };\nconst filterCache = new WeakMap();\nmodule.exports = (input, options)=>{\n    options = {\n        exclude: [\n            /.+(?:Sync|Stream)$/\n        ],\n        errorFirst: true,\n        promiseModule: Promise,\n        ...options\n    };\n    const objectType = typeof input;\n    if (!(input !== null && (objectType === \"object\" || objectType === \"function\"))) {\n        throw new TypeError(`Expected \\`input\\` to be a \\`Function\\` or \\`Object\\`, got \\`${input === null ? \"null\" : objectType}\\``);\n    }\n    const filter = (target, key)=>{\n        let cached = filterCache.get(target);\n        if (!cached) {\n            cached = {};\n            filterCache.set(target, cached);\n        }\n        if (key in cached) {\n            return cached[key];\n        }\n        const match = (pattern)=>typeof pattern === \"string\" || typeof key === \"symbol\" ? key === pattern : pattern.test(key);\n        const desc = Reflect.getOwnPropertyDescriptor(target, key);\n        const writableOrConfigurableOwn = desc === undefined || desc.writable || desc.configurable;\n        const included = options.include ? options.include.some(match) : !options.exclude.some(match);\n        const shouldFilter = included && writableOrConfigurableOwn;\n        cached[key] = shouldFilter;\n        return shouldFilter;\n    };\n    const cache = new WeakMap();\n    const proxy = new Proxy(input, {\n        apply (target, thisArg, args) {\n            const cached = cache.get(target);\n            if (cached) {\n                return Reflect.apply(cached, thisArg, args);\n            }\n            const pified = options.excludeMain ? target : processFn(target, options, proxy, target);\n            cache.set(target, pified);\n            return Reflect.apply(pified, thisArg, args);\n        },\n        get (target, key) {\n            const property = target[key];\n            // eslint-disable-next-line no-use-extend-native/no-use-extend-native\n            if (!filter(target, key) || property === Function.prototype[key]) {\n                return property;\n            }\n            const cached = cache.get(property);\n            if (cached) {\n                return cached;\n            }\n            if (typeof property === \"function\") {\n                const pified = processFn(property, options, proxy, target);\n                cache.set(property, pified);\n                return pified;\n            }\n            return property;\n        }\n    });\n    return proxy;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/eth-json-rpc-filters/node_modules/pify/index.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/eth-json-rpc-filters/subscriptionManager.js":
/*!**********************************************************************!*\
  !*** ./app/node_modules/eth-json-rpc-filters/subscriptionManager.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SafeEventEmitter = (__webpack_require__(/*! @metamask/safe-event-emitter */ \"(ssr)/./app/node_modules/@metamask/safe-event-emitter/index.js\")[\"default\"]);\nconst { createAsyncMiddleware, createScaffoldMiddleware } = __webpack_require__(/*! json-rpc-engine */ \"(ssr)/./app/node_modules/json-rpc-engine/dist/index.js\");\nconst createFilterMiddleware = __webpack_require__(/*! ./index.js */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/index.js\");\nconst { unsafeRandomBytes, incrementHexInt } = __webpack_require__(/*! ./hexUtils.js */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/hexUtils.js\");\nconst getBlocksForRange = __webpack_require__(/*! ./getBlocksForRange.js */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/getBlocksForRange.js\");\nmodule.exports = createSubscriptionMiddleware;\nfunction createSubscriptionMiddleware({ blockTracker, provider }) {\n    // state and utilities for handling subscriptions\n    const subscriptions = {};\n    const filterManager = createFilterMiddleware({\n        blockTracker,\n        provider\n    });\n    // internal flag\n    let isDestroyed = false;\n    // create subscriptionManager api object\n    const events = new SafeEventEmitter();\n    const middleware = createScaffoldMiddleware({\n        eth_subscribe: createAsyncMiddleware(subscribe),\n        eth_unsubscribe: createAsyncMiddleware(unsubscribe)\n    });\n    middleware.destroy = destroy;\n    return {\n        events,\n        middleware\n    };\n    async function subscribe(req, res) {\n        if (isDestroyed) throw new Error(\"SubscriptionManager - attempting to use after destroying\");\n        const subscriptionType = req.params[0];\n        // subId is 16 byte hex string\n        const subId = unsafeRandomBytes(16);\n        // create sub\n        let sub;\n        switch(subscriptionType){\n            case \"newHeads\":\n                sub = createSubNewHeads({\n                    subId\n                });\n                break;\n            case \"logs\":\n                const filterParams = req.params[1];\n                const filter = await filterManager.newLogFilter(filterParams);\n                sub = createSubFromFilter({\n                    subId,\n                    filter\n                });\n                break;\n            default:\n                throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`);\n        }\n        subscriptions[subId] = sub;\n        res.result = subId;\n        return;\n        function createSubNewHeads({ subId }) {\n            const sub = {\n                type: subscriptionType,\n                destroy: async ()=>{\n                    blockTracker.removeListener(\"sync\", sub.update);\n                },\n                update: async ({ oldBlock, newBlock })=>{\n                    // for newHeads\n                    const toBlock = newBlock;\n                    const fromBlock = incrementHexInt(oldBlock);\n                    const rawBlocks = await getBlocksForRange({\n                        provider,\n                        fromBlock,\n                        toBlock\n                    });\n                    const results = rawBlocks.map(normalizeBlock).filter((block)=>block !== null);\n                    results.forEach((value)=>{\n                        _emitSubscriptionResult(subId, value);\n                    });\n                }\n            };\n            // check for subscription updates on new block\n            blockTracker.on(\"sync\", sub.update);\n            return sub;\n        }\n        function createSubFromFilter({ subId, filter }) {\n            filter.on(\"update\", (result)=>_emitSubscriptionResult(subId, result));\n            const sub = {\n                type: subscriptionType,\n                destroy: async ()=>{\n                    return await filterManager.uninstallFilter(filter.idHex);\n                }\n            };\n            return sub;\n        }\n    }\n    async function unsubscribe(req, res) {\n        if (isDestroyed) throw new Error(\"SubscriptionManager - attempting to use after destroying\");\n        const id = req.params[0];\n        const subscription = subscriptions[id];\n        // if missing, return \"false\" to indicate it was not removed\n        if (!subscription) {\n            res.result = false;\n            return;\n        }\n        // cleanup subscription\n        delete subscriptions[id];\n        await subscription.destroy();\n        res.result = true;\n    }\n    function _emitSubscriptionResult(filterIdHex, value) {\n        events.emit(\"notification\", {\n            jsonrpc: \"2.0\",\n            method: \"eth_subscription\",\n            params: {\n                subscription: filterIdHex,\n                result: value\n            }\n        });\n    }\n    function destroy() {\n        events.removeAllListeners();\n        for(const id in subscriptions){\n            subscriptions[id].destroy();\n            delete subscriptions[id];\n        }\n        isDestroyed = true;\n    }\n}\nfunction normalizeBlock(block) {\n    if (block === null || block === undefined) {\n        return null;\n    }\n    return {\n        hash: block.hash,\n        parentHash: block.parentHash,\n        sha3Uncles: block.sha3Uncles,\n        miner: block.miner,\n        stateRoot: block.stateRoot,\n        transactionsRoot: block.transactionsRoot,\n        receiptsRoot: block.receiptsRoot,\n        logsBloom: block.logsBloom,\n        difficulty: block.difficulty,\n        number: block.number,\n        gasLimit: block.gasLimit,\n        gasUsed: block.gasUsed,\n        nonce: block.nonce,\n        mixHash: block.mixHash,\n        timestamp: block.timestamp,\n        extraData: block.extraData\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/eth-json-rpc-filters/subscriptionManager.js\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/eth-json-rpc-filters/tx-filter.js":
/*!************************************************************!*\
  !*** ./app/node_modules/eth-json-rpc-filters/tx-filter.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const BaseFilter = __webpack_require__(/*! ./base-filter */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/base-filter.js\");\nconst getBlocksForRange = __webpack_require__(/*! ./getBlocksForRange */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/getBlocksForRange.js\");\nconst { incrementHexInt } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./app/node_modules/eth-json-rpc-filters/hexUtils.js\");\nclass TxFilter extends BaseFilter {\n    constructor({ provider }){\n        super();\n        this.type = \"tx\";\n        this.provider = provider;\n    }\n    async update({ oldBlock }) {\n        const toBlock = oldBlock;\n        const fromBlock = incrementHexInt(oldBlock);\n        const blocks = await getBlocksForRange({\n            provider: this.provider,\n            fromBlock,\n            toBlock\n        });\n        const blockTxHashes = [];\n        for (const block of blocks){\n            blockTxHashes.push(...block.transactions);\n        }\n        // add to results\n        this.addResults(blockTxHashes);\n    }\n}\nmodule.exports = TxFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL3R4LWZpbHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUMzQixNQUFNQyxvQkFBb0JELG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU0sRUFBRUUsZUFBZSxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBRXBDLE1BQU1HLGlCQUFpQko7SUFFckJLLFlBQWEsRUFBRUMsUUFBUSxFQUFFLENBQUU7UUFDekIsS0FBSztRQUNMLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDRCxRQUFRLEdBQUdBO0lBQ2xCO0lBRUEsTUFBTUUsT0FBUSxFQUFFQyxRQUFRLEVBQUUsRUFBRTtRQUMxQixNQUFNQyxVQUFVRDtRQUNoQixNQUFNRSxZQUFZUixnQkFBZ0JNO1FBQ2xDLE1BQU1HLFNBQVMsTUFBTVYsa0JBQWtCO1lBQUVJLFVBQVUsSUFBSSxDQUFDQSxRQUFRO1lBQUVLO1lBQVdEO1FBQVE7UUFDckYsTUFBTUcsZ0JBQWdCLEVBQUU7UUFDeEIsS0FBSyxNQUFNQyxTQUFTRixPQUFRO1lBQzFCQyxjQUFjRSxJQUFJLElBQUlELE1BQU1FLFlBQVk7UUFDMUM7UUFDQSxpQkFBaUI7UUFDakIsSUFBSSxDQUFDQyxVQUFVLENBQUNKO0lBQ2xCO0FBRUY7QUFFQUssT0FBT0MsT0FBTyxHQUFHZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLy4vYXBwL25vZGVfbW9kdWxlcy9ldGgtanNvbi1ycGMtZmlsdGVycy90eC1maWx0ZXIuanM/ZmMzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCYXNlRmlsdGVyID0gcmVxdWlyZSgnLi9iYXNlLWZpbHRlcicpXG5jb25zdCBnZXRCbG9ja3NGb3JSYW5nZSA9IHJlcXVpcmUoJy4vZ2V0QmxvY2tzRm9yUmFuZ2UnKVxuY29uc3QgeyBpbmNyZW1lbnRIZXhJbnQgfSA9IHJlcXVpcmUoJy4vaGV4VXRpbHMnKVxuXG5jbGFzcyBUeEZpbHRlciBleHRlbmRzIEJhc2VGaWx0ZXIge1xuXG4gIGNvbnN0cnVjdG9yICh7IHByb3ZpZGVyIH0pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy50eXBlID0gJ3R4J1xuICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlclxuICB9XG5cbiAgYXN5bmMgdXBkYXRlICh7IG9sZEJsb2NrIH0pIHtcbiAgICBjb25zdCB0b0Jsb2NrID0gb2xkQmxvY2tcbiAgICBjb25zdCBmcm9tQmxvY2sgPSBpbmNyZW1lbnRIZXhJbnQob2xkQmxvY2spXG4gICAgY29uc3QgYmxvY2tzID0gYXdhaXQgZ2V0QmxvY2tzRm9yUmFuZ2UoeyBwcm92aWRlcjogdGhpcy5wcm92aWRlciwgZnJvbUJsb2NrLCB0b0Jsb2NrIH0pXG4gICAgY29uc3QgYmxvY2tUeEhhc2hlcyA9IFtdXG4gICAgZm9yIChjb25zdCBibG9jayBvZiBibG9ja3MpIHtcbiAgICAgIGJsb2NrVHhIYXNoZXMucHVzaCguLi5ibG9jay50cmFuc2FjdGlvbnMpXG4gICAgfVxuICAgIC8vIGFkZCB0byByZXN1bHRzXG4gICAgdGhpcy5hZGRSZXN1bHRzKGJsb2NrVHhIYXNoZXMpXG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFR4RmlsdGVyXG4iXSwibmFtZXMiOlsiQmFzZUZpbHRlciIsInJlcXVpcmUiLCJnZXRCbG9ja3NGb3JSYW5nZSIsImluY3JlbWVudEhleEludCIsIlR4RmlsdGVyIiwiY29uc3RydWN0b3IiLCJwcm92aWRlciIsInR5cGUiLCJ1cGRhdGUiLCJvbGRCbG9jayIsInRvQmxvY2siLCJmcm9tQmxvY2siLCJibG9ja3MiLCJibG9ja1R4SGFzaGVzIiwiYmxvY2siLCJwdXNoIiwidHJhbnNhY3Rpb25zIiwiYWRkUmVzdWx0cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/eth-json-rpc-filters/tx-filter.js\n");

/***/ })

};
;