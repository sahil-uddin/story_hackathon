"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanstack";
exports.ids = ["vendor-chunks/@tanstack"];
exports.modules = {

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/focusManager.mjs":
/*!**************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/focusManager.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FocusManager: () => (/* binding */ FocusManager),\n/* harmony export */   focusManager: () => (/* binding */ focusManager)\n/* harmony export */ });\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\nclass FocusManager extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(){\n        super();\n        this.setup = (onFocus)=>{\n            // addEventListener does not exist in React Native, but window does\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (!_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer && window.addEventListener) {\n                const listener = ()=>onFocus(); // Listen to visibillitychange and focus\n                window.addEventListener(\"visibilitychange\", listener, false);\n                window.addEventListener(\"focus\", listener, false);\n                return ()=>{\n                    // Be sure to unsubscribe if a new handler is set\n                    window.removeEventListener(\"visibilitychange\", listener);\n                    window.removeEventListener(\"focus\", listener);\n                };\n            }\n            return;\n        };\n    }\n    onSubscribe() {\n        if (!this.cleanup) {\n            this.setEventListener(this.setup);\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            var _this$cleanup;\n            (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n            this.cleanup = undefined;\n        }\n    }\n    setEventListener(setup) {\n        var _this$cleanup2;\n        this.setup = setup;\n        (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n        this.cleanup = setup((focused)=>{\n            if (typeof focused === \"boolean\") {\n                this.setFocused(focused);\n            } else {\n                this.onFocus();\n            }\n        });\n    }\n    setFocused(focused) {\n        const changed = this.focused !== focused;\n        if (changed) {\n            this.focused = focused;\n            this.onFocus();\n        }\n    }\n    onFocus() {\n        this.listeners.forEach(({ listener })=>{\n            listener();\n        });\n    }\n    isFocused() {\n        if (typeof this.focused === \"boolean\") {\n            return this.focused;\n        } // document global can be unavailable in react native\n        if (typeof document === \"undefined\") {\n            return true;\n        }\n        return [\n            undefined,\n            \"visible\",\n            \"prerender\"\n        ].includes(document.visibilityState);\n    }\n}\nconst focusManager = new FocusManager();\n //# sourceMappingURL=focusManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9mb2N1c01hbmFnZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0Q7QUFDWDtBQUV2QyxNQUFNRSxxQkFBcUJGLDJEQUFZQTtJQUNyQ0csYUFBYztRQUNaLEtBQUs7UUFFTCxJQUFJLENBQUNDLEtBQUssR0FBR0MsQ0FBQUE7WUFDWCxtRUFBbUU7WUFDbkUsdUVBQXVFO1lBQ3ZFLElBQUksQ0FBQ0osZ0RBQVFBLElBQUlLLE9BQU9DLGdCQUFnQixFQUFFO2dCQUN4QyxNQUFNQyxXQUFXLElBQU1ILFdBQVcsd0NBQXdDO2dCQUcxRUMsT0FBT0MsZ0JBQWdCLENBQUMsb0JBQW9CQyxVQUFVO2dCQUN0REYsT0FBT0MsZ0JBQWdCLENBQUMsU0FBU0MsVUFBVTtnQkFDM0MsT0FBTztvQkFDTCxpREFBaUQ7b0JBQ2pERixPQUFPRyxtQkFBbUIsQ0FBQyxvQkFBb0JEO29CQUMvQ0YsT0FBT0csbUJBQW1CLENBQUMsU0FBU0Q7Z0JBQ3RDO1lBQ0Y7WUFFQTtRQUNGO0lBQ0Y7SUFFQUUsY0FBYztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUNDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUNDLGdCQUFnQixDQUFDLElBQUksQ0FBQ1IsS0FBSztRQUNsQztJQUNGO0lBRUFTLGdCQUFnQjtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUNDLFlBQVksSUFBSTtZQUN4QixJQUFJQztZQUVIQSxDQUFBQSxnQkFBZ0IsSUFBSSxDQUFDSixPQUFPLEtBQUssT0FBTyxLQUFLLElBQUlJLGNBQWNDLElBQUksQ0FBQyxJQUFJO1lBQ3pFLElBQUksQ0FBQ0wsT0FBTyxHQUFHTTtRQUNqQjtJQUNGO0lBRUFMLGlCQUFpQlIsS0FBSyxFQUFFO1FBQ3RCLElBQUljO1FBRUosSUFBSSxDQUFDZCxLQUFLLEdBQUdBO1FBQ1pjLENBQUFBLGlCQUFpQixJQUFJLENBQUNQLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSU8sZUFBZUYsSUFBSSxDQUFDLElBQUk7UUFDM0UsSUFBSSxDQUFDTCxPQUFPLEdBQUdQLE1BQU1lLENBQUFBO1lBQ25CLElBQUksT0FBT0EsWUFBWSxXQUFXO2dCQUNoQyxJQUFJLENBQUNDLFVBQVUsQ0FBQ0Q7WUFDbEIsT0FBTztnQkFDTCxJQUFJLENBQUNkLE9BQU87WUFDZDtRQUNGO0lBQ0Y7SUFFQWUsV0FBV0QsT0FBTyxFQUFFO1FBQ2xCLE1BQU1FLFVBQVUsSUFBSSxDQUFDRixPQUFPLEtBQUtBO1FBRWpDLElBQUlFLFNBQVM7WUFDWCxJQUFJLENBQUNGLE9BQU8sR0FBR0E7WUFDZixJQUFJLENBQUNkLE9BQU87UUFDZDtJQUNGO0lBRUFBLFVBQVU7UUFDUixJQUFJLENBQUNpQixTQUFTLENBQUNDLE9BQU8sQ0FBQyxDQUFDLEVBQ3RCZixRQUFRLEVBQ1Q7WUFDQ0E7UUFDRjtJQUNGO0lBRUFnQixZQUFZO1FBQ1YsSUFBSSxPQUFPLElBQUksQ0FBQ0wsT0FBTyxLQUFLLFdBQVc7WUFDckMsT0FBTyxJQUFJLENBQUNBLE9BQU87UUFDckIsRUFBRSxxREFBcUQ7UUFHdkQsSUFBSSxPQUFPTSxhQUFhLGFBQWE7WUFDbkMsT0FBTztRQUNUO1FBRUEsT0FBTztZQUFDUjtZQUFXO1lBQVc7U0FBWSxDQUFDUyxRQUFRLENBQUNELFNBQVNFLGVBQWU7SUFDOUU7QUFFRjtBQUNBLE1BQU1DLGVBQWUsSUFBSTFCO0FBRWEsQ0FDdEMseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9mb2N1c01hbmFnZXIubWpzP2FjYTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmFibGUubWpzJztcbmltcG9ydCB7IGlzU2VydmVyIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5jbGFzcyBGb2N1c01hbmFnZXIgZXh0ZW5kcyBTdWJzY3JpYmFibGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5zZXR1cCA9IG9uRm9jdXMgPT4ge1xuICAgICAgLy8gYWRkRXZlbnRMaXN0ZW5lciBkb2VzIG5vdCBleGlzdCBpbiBSZWFjdCBOYXRpdmUsIGJ1dCB3aW5kb3cgZG9lc1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICAgIGlmICghaXNTZXJ2ZXIgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiBvbkZvY3VzKCk7IC8vIExpc3RlbiB0byB2aXNpYmlsbGl0eWNoYW5nZSBhbmQgZm9jdXNcblxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAvLyBCZSBzdXJlIHRvIHVuc3Vic2NyaWJlIGlmIGEgbmV3IGhhbmRsZXIgaXMgc2V0XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBsaXN0ZW5lcik7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgbGlzdGVuZXIpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfTtcbiAgfVxuXG4gIG9uU3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5jbGVhbnVwKSB7XG4gICAgICB0aGlzLnNldEV2ZW50TGlzdGVuZXIodGhpcy5zZXR1cCk7XG4gICAgfVxuICB9XG5cbiAgb25VbnN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuaGFzTGlzdGVuZXJzKCkpIHtcbiAgICAgIHZhciBfdGhpcyRjbGVhbnVwO1xuXG4gICAgICAoX3RoaXMkY2xlYW51cCA9IHRoaXMuY2xlYW51cCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGNsZWFudXAuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMuY2xlYW51cCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVyKHNldHVwKSB7XG4gICAgdmFyIF90aGlzJGNsZWFudXAyO1xuXG4gICAgdGhpcy5zZXR1cCA9IHNldHVwO1xuICAgIChfdGhpcyRjbGVhbnVwMiA9IHRoaXMuY2xlYW51cCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJGNsZWFudXAyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5jbGVhbnVwID0gc2V0dXAoZm9jdXNlZCA9PiB7XG4gICAgICBpZiAodHlwZW9mIGZvY3VzZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICB0aGlzLnNldEZvY3VzZWQoZm9jdXNlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldEZvY3VzZWQoZm9jdXNlZCkge1xuICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLmZvY3VzZWQgIT09IGZvY3VzZWQ7XG5cbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpcy5mb2N1c2VkID0gZm9jdXNlZDtcbiAgICAgIHRoaXMub25Gb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIG9uRm9jdXMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaCgoe1xuICAgICAgbGlzdGVuZXJcbiAgICB9KSA9PiB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9XG5cbiAgaXNGb2N1c2VkKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5mb2N1c2VkID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiB0aGlzLmZvY3VzZWQ7XG4gICAgfSAvLyBkb2N1bWVudCBnbG9iYWwgY2FuIGJlIHVuYXZhaWxhYmxlIGluIHJlYWN0IG5hdGl2ZVxuXG5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFt1bmRlZmluZWQsICd2aXNpYmxlJywgJ3ByZXJlbmRlciddLmluY2x1ZGVzKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSk7XG4gIH1cblxufVxuY29uc3QgZm9jdXNNYW5hZ2VyID0gbmV3IEZvY3VzTWFuYWdlcigpO1xuXG5leHBvcnQgeyBGb2N1c01hbmFnZXIsIGZvY3VzTWFuYWdlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9jdXNNYW5hZ2VyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJTdWJzY3JpYmFibGUiLCJpc1NlcnZlciIsIkZvY3VzTWFuYWdlciIsImNvbnN0cnVjdG9yIiwic2V0dXAiLCJvbkZvY3VzIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uU3Vic2NyaWJlIiwiY2xlYW51cCIsInNldEV2ZW50TGlzdGVuZXIiLCJvblVuc3Vic2NyaWJlIiwiaGFzTGlzdGVuZXJzIiwiX3RoaXMkY2xlYW51cCIsImNhbGwiLCJ1bmRlZmluZWQiLCJfdGhpcyRjbGVhbnVwMiIsImZvY3VzZWQiLCJzZXRGb2N1c2VkIiwiY2hhbmdlZCIsImxpc3RlbmVycyIsImZvckVhY2giLCJpc0ZvY3VzZWQiLCJkb2N1bWVudCIsImluY2x1ZGVzIiwidmlzaWJpbGl0eVN0YXRlIiwiZm9jdXNNYW5hZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/focusManager.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/hydration.mjs":
/*!***********************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/hydration.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultShouldDehydrateMutation: () => (/* binding */ defaultShouldDehydrateMutation),\n/* harmony export */   defaultShouldDehydrateQuery: () => (/* binding */ defaultShouldDehydrateQuery),\n/* harmony export */   dehydrate: () => (/* binding */ dehydrate),\n/* harmony export */   hydrate: () => (/* binding */ hydrate)\n/* harmony export */ });\n// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n    return {\n        mutationKey: mutation.options.mutationKey,\n        state: mutation.state\n    };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query) {\n    return {\n        state: query.state,\n        queryKey: query.queryKey,\n        queryHash: query.queryHash\n    };\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n    return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n    return query.state.status === \"success\";\n}\nfunction dehydrate(client, options = {}) {\n    const mutations = [];\n    const queries = [];\n    if (options.dehydrateMutations !== false) {\n        const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n        client.getMutationCache().getAll().forEach((mutation)=>{\n            if (shouldDehydrateMutation(mutation)) {\n                mutations.push(dehydrateMutation(mutation));\n            }\n        });\n    }\n    if (options.dehydrateQueries !== false) {\n        const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n        client.getQueryCache().getAll().forEach((query)=>{\n            if (shouldDehydrateQuery(query)) {\n                queries.push(dehydrateQuery(query));\n            }\n        });\n    }\n    return {\n        mutations,\n        queries\n    };\n}\nfunction hydrate(client, dehydratedState, options) {\n    if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n        return;\n    }\n    const mutationCache = client.getMutationCache();\n    const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const queries = dehydratedState.queries || [];\n    mutations.forEach((dehydratedMutation)=>{\n        var _options$defaultOptio;\n        mutationCache.build(client, {\n            ...options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations,\n            mutationKey: dehydratedMutation.mutationKey\n        }, dehydratedMutation.state);\n    });\n    queries.forEach(({ queryKey, state, queryHash })=>{\n        var _options$defaultOptio2;\n        const query = queryCache.get(queryHash); // Do not hydrate if an existing query exists with newer data\n        if (query) {\n            if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n                // omit fetchStatus from dehydrated state\n                // so that query stays in its current fetchStatus\n                const { fetchStatus: _ignored, ...dehydratedQueryState } = state;\n                query.setState(dehydratedQueryState);\n            }\n            return;\n        } // Restore query\n        queryCache.build(client, {\n            ...options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries,\n            queryKey,\n            queryHash\n        }, // query being stuck in fetching state upon hydration\n        {\n            ...state,\n            fetchStatus: \"idle\"\n        });\n    });\n}\n //# sourceMappingURL=hydration.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/hydration.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs":
/*!***********************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNextPageParam: () => (/* binding */ getNextPageParam),\n/* harmony export */   getPreviousPageParam: () => (/* binding */ getPreviousPageParam),\n/* harmony export */   hasNextPage: () => (/* binding */ hasNextPage),\n/* harmony export */   hasPreviousPage: () => (/* binding */ hasPreviousPage),\n/* harmony export */   infiniteQueryBehavior: () => (/* binding */ infiniteQueryBehavior)\n/* harmony export */ });\nfunction infiniteQueryBehavior() {\n    return {\n        onFetch: (context)=>{\n            context.fetchFn = ()=>{\n                var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n                const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n                const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n                const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n                const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === \"forward\";\n                const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === \"backward\";\n                const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n                const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n                let newPageParams = oldPageParams;\n                let cancelled = false;\n                const addSignalProperty = (object)=>{\n                    Object.defineProperty(object, \"signal\", {\n                        enumerable: true,\n                        get: ()=>{\n                            var _context$signal;\n                            if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                                cancelled = true;\n                            } else {\n                                var _context$signal2;\n                                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener(\"abort\", ()=>{\n                                    cancelled = true;\n                                });\n                            }\n                            return context.signal;\n                        }\n                    });\n                }; // Get query function\n                const queryFn = context.options.queryFn || (()=>Promise.reject(\"Missing queryFn for queryKey '\" + context.options.queryHash + \"'\"));\n                const buildNewPages = (pages, param, page, previous)=>{\n                    newPageParams = previous ? [\n                        param,\n                        ...newPageParams\n                    ] : [\n                        ...newPageParams,\n                        param\n                    ];\n                    return previous ? [\n                        page,\n                        ...pages\n                    ] : [\n                        ...pages,\n                        page\n                    ];\n                }; // Create function to fetch a page\n                const fetchPage = (pages, manual, param, previous)=>{\n                    if (cancelled) {\n                        return Promise.reject(\"Cancelled\");\n                    }\n                    if (typeof param === \"undefined\" && !manual && pages.length) {\n                        return Promise.resolve(pages);\n                    }\n                    const queryFnContext = {\n                        queryKey: context.queryKey,\n                        pageParam: param,\n                        meta: context.options.meta\n                    };\n                    addSignalProperty(queryFnContext);\n                    const queryFnResult = queryFn(queryFnContext);\n                    const promise = Promise.resolve(queryFnResult).then((page)=>buildNewPages(pages, param, page, previous));\n                    return promise;\n                };\n                let promise; // Fetch first page?\n                if (!oldPages.length) {\n                    promise = fetchPage([]);\n                } else if (isFetchingNextPage) {\n                    const manual = typeof pageParam !== \"undefined\";\n                    const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n                    promise = fetchPage(oldPages, manual, param);\n                } else if (isFetchingPreviousPage) {\n                    const manual = typeof pageParam !== \"undefined\";\n                    const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n                    promise = fetchPage(oldPages, manual, param, true);\n                } else {\n                    newPageParams = [];\n                    const manual = typeof context.options.getNextPageParam === \"undefined\";\n                    const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n                    promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n                    for(let i = 1; i < oldPages.length; i++){\n                        promise = promise.then((pages)=>{\n                            const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n                            if (shouldFetchNextPage) {\n                                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                                return fetchPage(pages, manual, param);\n                            }\n                            return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n                        });\n                    }\n                }\n                const finalPromise = promise.then((pages)=>({\n                        pages,\n                        pageParams: newPageParams\n                    }));\n                return finalPromise;\n            };\n        }\n    };\n}\nfunction getNextPageParam(options, pages) {\n    return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nfunction getPreviousPageParam(options, pages) {\n    return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */ function hasNextPage(options, pages) {\n    if (options.getNextPageParam && Array.isArray(pages)) {\n        const nextPageParam = getNextPageParam(options, pages);\n        return typeof nextPageParam !== \"undefined\" && nextPageParam !== null && nextPageParam !== false;\n    }\n    return;\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */ function hasPreviousPage(options, pages) {\n    if (options.getPreviousPageParam && Array.isArray(pages)) {\n        const previousPageParam = getPreviousPageParam(options, pages);\n        return typeof previousPageParam !== \"undefined\" && previousPageParam !== null && previousPageParam !== false;\n    }\n    return;\n}\n //# sourceMappingURL=infiniteQueryBehavior.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs":
/*!***********************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InfiniteQueryObserver: () => (/* binding */ InfiniteQueryObserver)\n/* harmony export */ });\n/* harmony import */ var _queryObserver_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queryObserver.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/queryObserver.mjs\");\n/* harmony import */ var _infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./infiniteQueryBehavior.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs\");\n\n\nclass InfiniteQueryObserver extends _queryObserver_mjs__WEBPACK_IMPORTED_MODULE_0__.QueryObserver {\n    // Type override\n    // Type override\n    // Type override\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(client, options){\n        super(client, options);\n    }\n    bindMethods() {\n        super.bindMethods();\n        this.fetchNextPage = this.fetchNextPage.bind(this);\n        this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n    }\n    setOptions(options, notifyOptions) {\n        super.setOptions({\n            ...options,\n            behavior: (0,_infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_1__.infiniteQueryBehavior)()\n        }, notifyOptions);\n    }\n    getOptimisticResult(options) {\n        options.behavior = (0,_infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_1__.infiniteQueryBehavior)();\n        return super.getOptimisticResult(options);\n    }\n    fetchNextPage({ pageParam, ...options } = {}) {\n        return this.fetch({\n            ...options,\n            meta: {\n                fetchMore: {\n                    direction: \"forward\",\n                    pageParam\n                }\n            }\n        });\n    }\n    fetchPreviousPage({ pageParam, ...options } = {}) {\n        return this.fetch({\n            ...options,\n            meta: {\n                fetchMore: {\n                    direction: \"backward\",\n                    pageParam\n                }\n            }\n        });\n    }\n    createResult(query, options) {\n        var _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet, _state$data, _state$data2;\n        const { state } = query;\n        const result = super.createResult(query, options);\n        const { isFetching, isRefetching } = result;\n        const isFetchingNextPage = isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === \"forward\";\n        const isFetchingPreviousPage = isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === \"backward\";\n        return {\n            ...result,\n            fetchNextPage: this.fetchNextPage,\n            fetchPreviousPage: this.fetchPreviousPage,\n            hasNextPage: (0,_infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_1__.hasNextPage)(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n            hasPreviousPage: (0,_infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_1__.hasPreviousPage)(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n            isFetchingNextPage,\n            isFetchingPreviousPage,\n            isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n        };\n    }\n}\n //# sourceMappingURL=infiniteQueryObserver.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9pbmZpbml0ZVF1ZXJ5T2JzZXJ2ZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDtBQUM4QztBQUVsRyxNQUFNSSw4QkFBOEJKLDZEQUFhQTtJQUMvQyxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixxRUFBcUU7SUFDckVLLFlBQVlDLE1BQU0sRUFBRUMsT0FBTyxDQUFFO1FBQzNCLEtBQUssQ0FBQ0QsUUFBUUM7SUFDaEI7SUFFQUMsY0FBYztRQUNaLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNDLGFBQWEsR0FBRyxJQUFJLENBQUNBLGFBQWEsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7UUFDakQsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxJQUFJLENBQUNBLGlCQUFpQixDQUFDRCxJQUFJLENBQUMsSUFBSTtJQUMzRDtJQUVBRSxXQUFXTCxPQUFPLEVBQUVNLGFBQWEsRUFBRTtRQUNqQyxLQUFLLENBQUNELFdBQVc7WUFBRSxHQUFHTCxPQUFPO1lBQzNCTyxVQUFVYixpRkFBcUJBO1FBQ2pDLEdBQUdZO0lBQ0w7SUFFQUUsb0JBQW9CUixPQUFPLEVBQUU7UUFDM0JBLFFBQVFPLFFBQVEsR0FBR2IsaUZBQXFCQTtRQUN4QyxPQUFPLEtBQUssQ0FBQ2Msb0JBQW9CUjtJQUNuQztJQUVBRSxjQUFjLEVBQ1pPLFNBQVMsRUFDVCxHQUFHVCxTQUNKLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDTixPQUFPLElBQUksQ0FBQ1UsS0FBSyxDQUFDO1lBQUUsR0FBR1YsT0FBTztZQUM1QlcsTUFBTTtnQkFDSkMsV0FBVztvQkFDVEMsV0FBVztvQkFDWEo7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7SUFFQUwsa0JBQWtCLEVBQ2hCSyxTQUFTLEVBQ1QsR0FBR1QsU0FDSixHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ04sT0FBTyxJQUFJLENBQUNVLEtBQUssQ0FBQztZQUFFLEdBQUdWLE9BQU87WUFDNUJXLE1BQU07Z0JBQ0pDLFdBQVc7b0JBQ1RDLFdBQVc7b0JBQ1hKO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBRUFLLGFBQWFDLEtBQUssRUFBRWYsT0FBTyxFQUFFO1FBQzNCLElBQUlnQixrQkFBa0JDLHVCQUF1QkMsbUJBQW1CQyx1QkFBdUJDLGFBQWFDO1FBRXBHLE1BQU0sRUFDSkMsS0FBSyxFQUNOLEdBQUdQO1FBQ0osTUFBTVEsU0FBUyxLQUFLLENBQUNULGFBQWFDLE9BQU9mO1FBQ3pDLE1BQU0sRUFDSndCLFVBQVUsRUFDVkMsWUFBWSxFQUNiLEdBQUdGO1FBQ0osTUFBTUcscUJBQXFCRixjQUFjLENBQUMsQ0FBQ1IsbUJBQW1CTSxNQUFNSyxTQUFTLEtBQUssT0FBTyxLQUFLLElBQUksQ0FBQ1Ysd0JBQXdCRCxpQkFBaUJKLFNBQVMsS0FBSyxPQUFPLEtBQUssSUFBSUssc0JBQXNCSixTQUFTLE1BQU07UUFDL00sTUFBTWUseUJBQXlCSixjQUFjLENBQUMsQ0FBQ04sb0JBQW9CSSxNQUFNSyxTQUFTLEtBQUssT0FBTyxLQUFLLElBQUksQ0FBQ1Isd0JBQXdCRCxrQkFBa0JOLFNBQVMsS0FBSyxPQUFPLEtBQUssSUFBSU8sc0JBQXNCTixTQUFTLE1BQU07UUFDck4sT0FBTztZQUFFLEdBQUdVLE1BQU07WUFDaEJyQixlQUFlLElBQUksQ0FBQ0EsYUFBYTtZQUNqQ0UsbUJBQW1CLElBQUksQ0FBQ0EsaUJBQWlCO1lBQ3pDVCxhQUFhQSx1RUFBV0EsQ0FBQ0ssU0FBUyxDQUFDb0IsY0FBY0UsTUFBTU8sSUFBSSxLQUFLLE9BQU8sS0FBSyxJQUFJVCxZQUFZVSxLQUFLO1lBQ2pHbEMsaUJBQWlCQSwyRUFBZUEsQ0FBQ0ksU0FBUyxDQUFDcUIsZUFBZUMsTUFBTU8sSUFBSSxLQUFLLE9BQU8sS0FBSyxJQUFJUixhQUFhUyxLQUFLO1lBQzNHSjtZQUNBRTtZQUNBSCxjQUFjQSxnQkFBZ0IsQ0FBQ0Msc0JBQXNCLENBQUNFO1FBQ3hEO0lBQ0Y7QUFFRjtBQUVpQyxDQUNqQyxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS8uL2FwcC9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL2luZmluaXRlUXVlcnlPYnNlcnZlci5tanM/ZWZhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWVyeU9ic2VydmVyIH0gZnJvbSAnLi9xdWVyeU9ic2VydmVyLm1qcyc7XG5pbXBvcnQgeyBpbmZpbml0ZVF1ZXJ5QmVoYXZpb3IsIGhhc05leHRQYWdlLCBoYXNQcmV2aW91c1BhZ2UgfSBmcm9tICcuL2luZmluaXRlUXVlcnlCZWhhdmlvci5tanMnO1xuXG5jbGFzcyBJbmZpbml0ZVF1ZXJ5T2JzZXJ2ZXIgZXh0ZW5kcyBRdWVyeU9ic2VydmVyIHtcbiAgLy8gVHlwZSBvdmVycmlkZVxuICAvLyBUeXBlIG92ZXJyaWRlXG4gIC8vIFR5cGUgb3ZlcnJpZGVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2VsZXNzLWNvbnN0cnVjdG9yXG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgb3B0aW9ucykge1xuICAgIHN1cGVyKGNsaWVudCwgb3B0aW9ucyk7XG4gIH1cblxuICBiaW5kTWV0aG9kcygpIHtcbiAgICBzdXBlci5iaW5kTWV0aG9kcygpO1xuICAgIHRoaXMuZmV0Y2hOZXh0UGFnZSA9IHRoaXMuZmV0Y2hOZXh0UGFnZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZmV0Y2hQcmV2aW91c1BhZ2UgPSB0aGlzLmZldGNoUHJldmlvdXNQYWdlLmJpbmQodGhpcyk7XG4gIH1cblxuICBzZXRPcHRpb25zKG9wdGlvbnMsIG5vdGlmeU9wdGlvbnMpIHtcbiAgICBzdXBlci5zZXRPcHRpb25zKHsgLi4ub3B0aW9ucyxcbiAgICAgIGJlaGF2aW9yOiBpbmZpbml0ZVF1ZXJ5QmVoYXZpb3IoKVxuICAgIH0sIG5vdGlmeU9wdGlvbnMpO1xuICB9XG5cbiAgZ2V0T3B0aW1pc3RpY1Jlc3VsdChvcHRpb25zKSB7XG4gICAgb3B0aW9ucy5iZWhhdmlvciA9IGluZmluaXRlUXVlcnlCZWhhdmlvcigpO1xuICAgIHJldHVybiBzdXBlci5nZXRPcHRpbWlzdGljUmVzdWx0KG9wdGlvbnMpO1xuICB9XG5cbiAgZmV0Y2hOZXh0UGFnZSh7XG4gICAgcGFnZVBhcmFtLFxuICAgIC4uLm9wdGlvbnNcbiAgfSA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goeyAuLi5vcHRpb25zLFxuICAgICAgbWV0YToge1xuICAgICAgICBmZXRjaE1vcmU6IHtcbiAgICAgICAgICBkaXJlY3Rpb246ICdmb3J3YXJkJyxcbiAgICAgICAgICBwYWdlUGFyYW1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZmV0Y2hQcmV2aW91c1BhZ2Uoe1xuICAgIHBhZ2VQYXJhbSxcbiAgICAuLi5vcHRpb25zXG4gIH0gPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmZldGNoKHsgLi4ub3B0aW9ucyxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgZmV0Y2hNb3JlOiB7XG4gICAgICAgICAgZGlyZWN0aW9uOiAnYmFja3dhcmQnLFxuICAgICAgICAgIHBhZ2VQYXJhbVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVSZXN1bHQocXVlcnksIG9wdGlvbnMpIHtcbiAgICB2YXIgX3N0YXRlJGZldGNoTWV0YSwgX3N0YXRlJGZldGNoTWV0YSRmZXRjLCBfc3RhdGUkZmV0Y2hNZXRhMiwgX3N0YXRlJGZldGNoTWV0YTIkZmV0LCBfc3RhdGUkZGF0YSwgX3N0YXRlJGRhdGEyO1xuXG4gICAgY29uc3Qge1xuICAgICAgc3RhdGVcbiAgICB9ID0gcXVlcnk7XG4gICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuY3JlYXRlUmVzdWx0KHF1ZXJ5LCBvcHRpb25zKTtcbiAgICBjb25zdCB7XG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgaXNSZWZldGNoaW5nXG4gICAgfSA9IHJlc3VsdDtcbiAgICBjb25zdCBpc0ZldGNoaW5nTmV4dFBhZ2UgPSBpc0ZldGNoaW5nICYmICgoX3N0YXRlJGZldGNoTWV0YSA9IHN0YXRlLmZldGNoTWV0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfc3RhdGUkZmV0Y2hNZXRhJGZldGMgPSBfc3RhdGUkZmV0Y2hNZXRhLmZldGNoTW9yZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9zdGF0ZSRmZXRjaE1ldGEkZmV0Yy5kaXJlY3Rpb24pID09PSAnZm9yd2FyZCc7XG4gICAgY29uc3QgaXNGZXRjaGluZ1ByZXZpb3VzUGFnZSA9IGlzRmV0Y2hpbmcgJiYgKChfc3RhdGUkZmV0Y2hNZXRhMiA9IHN0YXRlLmZldGNoTWV0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfc3RhdGUkZmV0Y2hNZXRhMiRmZXQgPSBfc3RhdGUkZmV0Y2hNZXRhMi5mZXRjaE1vcmUpID09IG51bGwgPyB2b2lkIDAgOiBfc3RhdGUkZmV0Y2hNZXRhMiRmZXQuZGlyZWN0aW9uKSA9PT0gJ2JhY2t3YXJkJztcbiAgICByZXR1cm4geyAuLi5yZXN1bHQsXG4gICAgICBmZXRjaE5leHRQYWdlOiB0aGlzLmZldGNoTmV4dFBhZ2UsXG4gICAgICBmZXRjaFByZXZpb3VzUGFnZTogdGhpcy5mZXRjaFByZXZpb3VzUGFnZSxcbiAgICAgIGhhc05leHRQYWdlOiBoYXNOZXh0UGFnZShvcHRpb25zLCAoX3N0YXRlJGRhdGEgPSBzdGF0ZS5kYXRhKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGRhdGEucGFnZXMpLFxuICAgICAgaGFzUHJldmlvdXNQYWdlOiBoYXNQcmV2aW91c1BhZ2Uob3B0aW9ucywgKF9zdGF0ZSRkYXRhMiA9IHN0YXRlLmRhdGEpID09IG51bGwgPyB2b2lkIDAgOiBfc3RhdGUkZGF0YTIucGFnZXMpLFxuICAgICAgaXNGZXRjaGluZ05leHRQYWdlLFxuICAgICAgaXNGZXRjaGluZ1ByZXZpb3VzUGFnZSxcbiAgICAgIGlzUmVmZXRjaGluZzogaXNSZWZldGNoaW5nICYmICFpc0ZldGNoaW5nTmV4dFBhZ2UgJiYgIWlzRmV0Y2hpbmdQcmV2aW91c1BhZ2VcbiAgICB9O1xuICB9XG5cbn1cblxuZXhwb3J0IHsgSW5maW5pdGVRdWVyeU9ic2VydmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmZpbml0ZVF1ZXJ5T2JzZXJ2ZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlF1ZXJ5T2JzZXJ2ZXIiLCJpbmZpbml0ZVF1ZXJ5QmVoYXZpb3IiLCJoYXNOZXh0UGFnZSIsImhhc1ByZXZpb3VzUGFnZSIsIkluZmluaXRlUXVlcnlPYnNlcnZlciIsImNvbnN0cnVjdG9yIiwiY2xpZW50Iiwib3B0aW9ucyIsImJpbmRNZXRob2RzIiwiZmV0Y2hOZXh0UGFnZSIsImJpbmQiLCJmZXRjaFByZXZpb3VzUGFnZSIsInNldE9wdGlvbnMiLCJub3RpZnlPcHRpb25zIiwiYmVoYXZpb3IiLCJnZXRPcHRpbWlzdGljUmVzdWx0IiwicGFnZVBhcmFtIiwiZmV0Y2giLCJtZXRhIiwiZmV0Y2hNb3JlIiwiZGlyZWN0aW9uIiwiY3JlYXRlUmVzdWx0IiwicXVlcnkiLCJfc3RhdGUkZmV0Y2hNZXRhIiwiX3N0YXRlJGZldGNoTWV0YSRmZXRjIiwiX3N0YXRlJGZldGNoTWV0YTIiLCJfc3RhdGUkZmV0Y2hNZXRhMiRmZXQiLCJfc3RhdGUkZGF0YSIsIl9zdGF0ZSRkYXRhMiIsInN0YXRlIiwicmVzdWx0IiwiaXNGZXRjaGluZyIsImlzUmVmZXRjaGluZyIsImlzRmV0Y2hpbmdOZXh0UGFnZSIsImZldGNoTWV0YSIsImlzRmV0Y2hpbmdQcmV2aW91c1BhZ2UiLCJkYXRhIiwicGFnZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/logger.mjs":
/*!********************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/logger.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultLogger: () => (/* binding */ defaultLogger)\n/* harmony export */ });\nconst defaultLogger = console;\n //# sourceMappingURL=logger.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9sb2dnZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxnQkFBZ0JDO0FBRUcsQ0FDekIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9sb2dnZXIubWpzPzUyNzAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdExvZ2dlciA9IGNvbnNvbGU7XG5cbmV4cG9ydCB7IGRlZmF1bHRMb2dnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5tanMubWFwXG4iXSwibmFtZXMiOlsiZGVmYXVsdExvZ2dlciIsImNvbnNvbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/logger.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/mutation.mjs":
/*!**********************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/mutation.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mutation: () => (/* binding */ Mutation),\n/* harmony export */   getDefaultState: () => (/* binding */ getDefaultState)\n/* harmony export */ });\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/logger.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _removable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./removable.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/removable.mjs\");\n/* harmony import */ var _retryer_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./retryer.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/retryer.mjs\");\n\n\n\n\n// CLASS\nclass Mutation extends _removable_mjs__WEBPACK_IMPORTED_MODULE_0__.Removable {\n    constructor(config){\n        super();\n        this.defaultOptions = config.defaultOptions;\n        this.mutationId = config.mutationId;\n        this.mutationCache = config.mutationCache;\n        this.logger = config.logger || _logger_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultLogger;\n        this.observers = [];\n        this.state = config.state || getDefaultState();\n        this.setOptions(config.options);\n        this.scheduleGc();\n    }\n    setOptions(options) {\n        this.options = {\n            ...this.defaultOptions,\n            ...options\n        };\n        this.updateCacheTime(this.options.cacheTime);\n    }\n    get meta() {\n        return this.options.meta;\n    }\n    setState(state) {\n        this.dispatch({\n            type: \"setState\",\n            state\n        });\n    }\n    addObserver(observer) {\n        if (!this.observers.includes(observer)) {\n            this.observers.push(observer); // Stop the mutation from being garbage collected\n            this.clearGcTimeout();\n            this.mutationCache.notify({\n                type: \"observerAdded\",\n                mutation: this,\n                observer\n            });\n        }\n    }\n    removeObserver(observer) {\n        this.observers = this.observers.filter((x)=>x !== observer);\n        this.scheduleGc();\n        this.mutationCache.notify({\n            type: \"observerRemoved\",\n            mutation: this,\n            observer\n        });\n    }\n    optionalRemove() {\n        if (!this.observers.length) {\n            if (this.state.status === \"loading\") {\n                this.scheduleGc();\n            } else {\n                this.mutationCache.remove(this);\n            }\n        }\n    }\n    continue() {\n        var _this$retryer$continu, _this$retryer;\n        return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();\n    }\n    async execute() {\n        const executeMutation = ()=>{\n            var _this$options$retry;\n            this.retryer = (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_2__.createRetryer)({\n                fn: ()=>{\n                    if (!this.options.mutationFn) {\n                        return Promise.reject(\"No mutationFn found\");\n                    }\n                    return this.options.mutationFn(this.state.variables);\n                },\n                onFail: (failureCount, error)=>{\n                    this.dispatch({\n                        type: \"failed\",\n                        failureCount,\n                        error\n                    });\n                },\n                onPause: ()=>{\n                    this.dispatch({\n                        type: \"pause\"\n                    });\n                },\n                onContinue: ()=>{\n                    this.dispatch({\n                        type: \"continue\"\n                    });\n                },\n                retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n                retryDelay: this.options.retryDelay,\n                networkMode: this.options.networkMode\n            });\n            return this.retryer.promise;\n        };\n        const restored = this.state.status === \"loading\";\n        try {\n            var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;\n            if (!restored) {\n                var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n                this.dispatch({\n                    type: \"loading\",\n                    variables: this.options.variables\n                }); // Notify cache callback\n                await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n                const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n                if (context !== this.state.context) {\n                    this.dispatch({\n                        type: \"loading\",\n                        context,\n                        variables: this.state.variables\n                    });\n                }\n            }\n            const data = await executeMutation(); // Notify cache callback\n            await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n            await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context)); // Notify cache callback\n            await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));\n            await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n            this.dispatch({\n                type: \"success\",\n                data\n            });\n            return data;\n        } catch (error) {\n            try {\n                var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;\n                // Notify cache callback\n                await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));\n                if (true) {\n                    this.logger.error(error);\n                }\n                await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context)); // Notify cache callback\n                await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, undefined, error, this.state.variables, this.state.context, this));\n                await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n                throw error;\n            } finally{\n                this.dispatch({\n                    type: \"error\",\n                    error: error\n                });\n            }\n        }\n    }\n    dispatch(action) {\n        const reducer = (state)=>{\n            switch(action.type){\n                case \"failed\":\n                    return {\n                        ...state,\n                        failureCount: action.failureCount,\n                        failureReason: action.error\n                    };\n                case \"pause\":\n                    return {\n                        ...state,\n                        isPaused: true\n                    };\n                case \"continue\":\n                    return {\n                        ...state,\n                        isPaused: false\n                    };\n                case \"loading\":\n                    return {\n                        ...state,\n                        context: action.context,\n                        data: undefined,\n                        failureCount: 0,\n                        failureReason: null,\n                        error: null,\n                        isPaused: !(0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_2__.canFetch)(this.options.networkMode),\n                        status: \"loading\",\n                        variables: action.variables\n                    };\n                case \"success\":\n                    return {\n                        ...state,\n                        data: action.data,\n                        failureCount: 0,\n                        failureReason: null,\n                        error: null,\n                        status: \"success\",\n                        isPaused: false\n                    };\n                case \"error\":\n                    return {\n                        ...state,\n                        data: undefined,\n                        error: action.error,\n                        failureCount: state.failureCount + 1,\n                        failureReason: action.error,\n                        isPaused: false,\n                        status: \"error\"\n                    };\n                case \"setState\":\n                    return {\n                        ...state,\n                        ...action.state\n                    };\n            }\n        };\n        this.state = reducer(this.state);\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.observers.forEach((observer)=>{\n                observer.onMutationUpdate(action);\n            });\n            this.mutationCache.notify({\n                mutation: this,\n                type: \"updated\",\n                action\n            });\n        });\n    }\n}\nfunction getDefaultState() {\n    return {\n        context: undefined,\n        data: undefined,\n        error: null,\n        failureCount: 0,\n        failureReason: null,\n        isPaused: false,\n        status: \"idle\",\n        variables: undefined\n    };\n}\n //# sourceMappingURL=mutation.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/mutation.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/mutationCache.mjs":
/*!***************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/mutationCache.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutationCache: () => (/* binding */ MutationCache)\n/* harmony export */ });\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _mutation_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mutation.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/mutation.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n\n\n\n\n// CLASS\nclass MutationCache extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(config){\n        super();\n        this.config = config || {};\n        this.mutations = [];\n        this.mutationId = 0;\n    }\n    build(client, options, state) {\n        const mutation = new _mutation_mjs__WEBPACK_IMPORTED_MODULE_1__.Mutation({\n            mutationCache: this,\n            logger: client.getLogger(),\n            mutationId: ++this.mutationId,\n            options: client.defaultMutationOptions(options),\n            state,\n            defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined\n        });\n        this.add(mutation);\n        return mutation;\n    }\n    add(mutation) {\n        this.mutations.push(mutation);\n        this.notify({\n            type: \"added\",\n            mutation\n        });\n    }\n    remove(mutation) {\n        this.mutations = this.mutations.filter((x)=>x !== mutation);\n        this.notify({\n            type: \"removed\",\n            mutation\n        });\n    }\n    clear() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.mutations.forEach((mutation)=>{\n                this.remove(mutation);\n            });\n        });\n    }\n    getAll() {\n        return this.mutations;\n    }\n    find(filters) {\n        if (typeof filters.exact === \"undefined\") {\n            filters.exact = true;\n        }\n        return this.mutations.find((mutation)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.matchMutation)(filters, mutation));\n    }\n    findAll(filters) {\n        return this.mutations.filter((mutation)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.matchMutation)(filters, mutation));\n    }\n    notify(event) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.listeners.forEach(({ listener })=>{\n                listener(event);\n            });\n        });\n    }\n    resumePausedMutations() {\n        var _this$resuming;\n        this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(()=>{\n            const pausedMutations = this.mutations.filter((x)=>x.state.isPaused);\n            return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>pausedMutations.reduce((promise, mutation)=>promise.then(()=>mutation.continue().catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.noop)), Promise.resolve()));\n        }).then(()=>{\n            this.resuming = undefined;\n        });\n        return this.resuming;\n    }\n}\n //# sourceMappingURL=mutationCache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9tdXRhdGlvbkNhY2hlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRDtBQUNWO0FBQ1E7QUFDQTtBQUVsRCxRQUFRO0FBQ1IsTUFBTUssc0JBQXNCRCwyREFBWUE7SUFDdENFLFlBQVlDLE1BQU0sQ0FBRTtRQUNsQixLQUFLO1FBQ0wsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLFVBQVUsQ0FBQztRQUN6QixJQUFJLENBQUNDLFNBQVMsR0FBRyxFQUFFO1FBQ25CLElBQUksQ0FBQ0MsVUFBVSxHQUFHO0lBQ3BCO0lBRUFDLE1BQU1DLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUU7UUFDNUIsTUFBTUMsV0FBVyxJQUFJYixtREFBUUEsQ0FBQztZQUM1QmMsZUFBZSxJQUFJO1lBQ25CQyxRQUFRTCxPQUFPTSxTQUFTO1lBQ3hCUixZQUFZLEVBQUUsSUFBSSxDQUFDQSxVQUFVO1lBQzdCRyxTQUFTRCxPQUFPTyxzQkFBc0IsQ0FBQ047WUFDdkNDO1lBQ0FNLGdCQUFnQlAsUUFBUVEsV0FBVyxHQUFHVCxPQUFPVSxtQkFBbUIsQ0FBQ1QsUUFBUVEsV0FBVyxJQUFJRTtRQUMxRjtRQUNBLElBQUksQ0FBQ0MsR0FBRyxDQUFDVDtRQUNULE9BQU9BO0lBQ1Q7SUFFQVMsSUFBSVQsUUFBUSxFQUFFO1FBQ1osSUFBSSxDQUFDTixTQUFTLENBQUNnQixJQUFJLENBQUNWO1FBQ3BCLElBQUksQ0FBQ1csTUFBTSxDQUFDO1lBQ1ZDLE1BQU07WUFDTlo7UUFDRjtJQUNGO0lBRUFhLE9BQU9iLFFBQVEsRUFBRTtRQUNmLElBQUksQ0FBQ04sU0FBUyxHQUFHLElBQUksQ0FBQ0EsU0FBUyxDQUFDb0IsTUFBTSxDQUFDQyxDQUFBQSxJQUFLQSxNQUFNZjtRQUNsRCxJQUFJLENBQUNXLE1BQU0sQ0FBQztZQUNWQyxNQUFNO1lBQ05aO1FBQ0Y7SUFDRjtJQUVBZ0IsUUFBUTtRQUNOOUIsNkRBQWFBLENBQUMrQixLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDdkIsU0FBUyxDQUFDd0IsT0FBTyxDQUFDbEIsQ0FBQUE7Z0JBQ3JCLElBQUksQ0FBQ2EsTUFBTSxDQUFDYjtZQUNkO1FBQ0Y7SUFDRjtJQUVBbUIsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDekIsU0FBUztJQUN2QjtJQUVBMEIsS0FBS0MsT0FBTyxFQUFFO1FBQ1osSUFBSSxPQUFPQSxRQUFRQyxLQUFLLEtBQUssYUFBYTtZQUN4Q0QsUUFBUUMsS0FBSyxHQUFHO1FBQ2xCO1FBRUEsT0FBTyxJQUFJLENBQUM1QixTQUFTLENBQUMwQixJQUFJLENBQUNwQixDQUFBQSxXQUFZWix5REFBYUEsQ0FBQ2lDLFNBQVNyQjtJQUNoRTtJQUVBdUIsUUFBUUYsT0FBTyxFQUFFO1FBQ2YsT0FBTyxJQUFJLENBQUMzQixTQUFTLENBQUNvQixNQUFNLENBQUNkLENBQUFBLFdBQVlaLHlEQUFhQSxDQUFDaUMsU0FBU3JCO0lBQ2xFO0lBRUFXLE9BQU9hLEtBQUssRUFBRTtRQUNadEMsNkRBQWFBLENBQUMrQixLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDUSxTQUFTLENBQUNQLE9BQU8sQ0FBQyxDQUFDLEVBQ3RCUSxRQUFRLEVBQ1Q7Z0JBQ0NBLFNBQVNGO1lBQ1g7UUFDRjtJQUNGO0lBRUFHLHdCQUF3QjtRQUN0QixJQUFJQztRQUVKLElBQUksQ0FBQ0MsUUFBUSxHQUFHLENBQUMsQ0FBQ0QsaUJBQWlCLElBQUksQ0FBQ0MsUUFBUSxLQUFLLE9BQU9ELGlCQUFpQkUsUUFBUUMsT0FBTyxFQUFDLEVBQUdDLElBQUksQ0FBQztZQUNuRyxNQUFNQyxrQkFBa0IsSUFBSSxDQUFDdkMsU0FBUyxDQUFDb0IsTUFBTSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFaEIsS0FBSyxDQUFDbUMsUUFBUTtZQUNuRSxPQUFPaEQsNkRBQWFBLENBQUMrQixLQUFLLENBQUMsSUFBTWdCLGdCQUFnQkUsTUFBTSxDQUFDLENBQUNDLFNBQVNwQyxXQUFhb0MsUUFBUUosSUFBSSxDQUFDLElBQU1oQyxTQUFTcUMsUUFBUSxHQUFHQyxLQUFLLENBQUNqRCw0Q0FBSUEsSUFBSXlDLFFBQVFDLE9BQU87UUFDckosR0FBR0MsSUFBSSxDQUFDO1lBQ04sSUFBSSxDQUFDSCxRQUFRLEdBQUdyQjtRQUNsQjtRQUNBLE9BQU8sSUFBSSxDQUFDcUIsUUFBUTtJQUN0QjtBQUVGO0FBRXlCLENBQ3pCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLy4vYXBwL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9saWIvbXV0YXRpb25DYWNoZS5tanM/MWNkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi9ub3RpZnlNYW5hZ2VyLm1qcyc7XG5pbXBvcnQgeyBNdXRhdGlvbiB9IGZyb20gJy4vbXV0YXRpb24ubWpzJztcbmltcG9ydCB7IG1hdGNoTXV0YXRpb24sIG5vb3AgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tICcuL3N1YnNjcmliYWJsZS5tanMnO1xuXG4vLyBDTEFTU1xuY2xhc3MgTXV0YXRpb25DYWNoZSBleHRlbmRzIFN1YnNjcmliYWJsZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgdGhpcy5tdXRhdGlvbnMgPSBbXTtcbiAgICB0aGlzLm11dGF0aW9uSWQgPSAwO1xuICB9XG5cbiAgYnVpbGQoY2xpZW50LCBvcHRpb25zLCBzdGF0ZSkge1xuICAgIGNvbnN0IG11dGF0aW9uID0gbmV3IE11dGF0aW9uKHtcbiAgICAgIG11dGF0aW9uQ2FjaGU6IHRoaXMsXG4gICAgICBsb2dnZXI6IGNsaWVudC5nZXRMb2dnZXIoKSxcbiAgICAgIG11dGF0aW9uSWQ6ICsrdGhpcy5tdXRhdGlvbklkLFxuICAgICAgb3B0aW9uczogY2xpZW50LmRlZmF1bHRNdXRhdGlvbk9wdGlvbnMob3B0aW9ucyksXG4gICAgICBzdGF0ZSxcbiAgICAgIGRlZmF1bHRPcHRpb25zOiBvcHRpb25zLm11dGF0aW9uS2V5ID8gY2xpZW50LmdldE11dGF0aW9uRGVmYXVsdHMob3B0aW9ucy5tdXRhdGlvbktleSkgOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgICB0aGlzLmFkZChtdXRhdGlvbik7XG4gICAgcmV0dXJuIG11dGF0aW9uO1xuICB9XG5cbiAgYWRkKG11dGF0aW9uKSB7XG4gICAgdGhpcy5tdXRhdGlvbnMucHVzaChtdXRhdGlvbik7XG4gICAgdGhpcy5ub3RpZnkoe1xuICAgICAgdHlwZTogJ2FkZGVkJyxcbiAgICAgIG11dGF0aW9uXG4gICAgfSk7XG4gIH1cblxuICByZW1vdmUobXV0YXRpb24pIHtcbiAgICB0aGlzLm11dGF0aW9ucyA9IHRoaXMubXV0YXRpb25zLmZpbHRlcih4ID0+IHggIT09IG11dGF0aW9uKTtcbiAgICB0aGlzLm5vdGlmeSh7XG4gICAgICB0eXBlOiAncmVtb3ZlZCcsXG4gICAgICBtdXRhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLm11dGF0aW9ucy5mb3JFYWNoKG11dGF0aW9uID0+IHtcbiAgICAgICAgdGhpcy5yZW1vdmUobXV0YXRpb24pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMubXV0YXRpb25zO1xuICB9XG5cbiAgZmluZChmaWx0ZXJzKSB7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXJzLmV4YWN0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZmlsdGVycy5leGFjdCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubXV0YXRpb25zLmZpbmQobXV0YXRpb24gPT4gbWF0Y2hNdXRhdGlvbihmaWx0ZXJzLCBtdXRhdGlvbikpO1xuICB9XG5cbiAgZmluZEFsbChmaWx0ZXJzKSB7XG4gICAgcmV0dXJuIHRoaXMubXV0YXRpb25zLmZpbHRlcihtdXRhdGlvbiA9PiBtYXRjaE11dGF0aW9uKGZpbHRlcnMsIG11dGF0aW9uKSk7XG4gIH1cblxuICBub3RpZnkoZXZlbnQpIHtcbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKCgpID0+IHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKHtcbiAgICAgICAgbGlzdGVuZXJcbiAgICAgIH0pID0+IHtcbiAgICAgICAgbGlzdGVuZXIoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXN1bWVQYXVzZWRNdXRhdGlvbnMoKSB7XG4gICAgdmFyIF90aGlzJHJlc3VtaW5nO1xuXG4gICAgdGhpcy5yZXN1bWluZyA9ICgoX3RoaXMkcmVzdW1pbmcgPSB0aGlzLnJlc3VtaW5nKSAhPSBudWxsID8gX3RoaXMkcmVzdW1pbmcgOiBQcm9taXNlLnJlc29sdmUoKSkudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBwYXVzZWRNdXRhdGlvbnMgPSB0aGlzLm11dGF0aW9ucy5maWx0ZXIoeCA9PiB4LnN0YXRlLmlzUGF1c2VkKTtcbiAgICAgIHJldHVybiBub3RpZnlNYW5hZ2VyLmJhdGNoKCgpID0+IHBhdXNlZE11dGF0aW9ucy5yZWR1Y2UoKHByb21pc2UsIG11dGF0aW9uKSA9PiBwcm9taXNlLnRoZW4oKCkgPT4gbXV0YXRpb24uY29udGludWUoKS5jYXRjaChub29wKSksIFByb21pc2UucmVzb2x2ZSgpKSk7XG4gICAgfSkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLnJlc3VtaW5nID0gdW5kZWZpbmVkO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnJlc3VtaW5nO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgTXV0YXRpb25DYWNoZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXV0YXRpb25DYWNoZS5tanMubWFwXG4iXSwibmFtZXMiOlsibm90aWZ5TWFuYWdlciIsIk11dGF0aW9uIiwibWF0Y2hNdXRhdGlvbiIsIm5vb3AiLCJTdWJzY3JpYmFibGUiLCJNdXRhdGlvbkNhY2hlIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJtdXRhdGlvbnMiLCJtdXRhdGlvbklkIiwiYnVpbGQiLCJjbGllbnQiLCJvcHRpb25zIiwic3RhdGUiLCJtdXRhdGlvbiIsIm11dGF0aW9uQ2FjaGUiLCJsb2dnZXIiLCJnZXRMb2dnZXIiLCJkZWZhdWx0TXV0YXRpb25PcHRpb25zIiwiZGVmYXVsdE9wdGlvbnMiLCJtdXRhdGlvbktleSIsImdldE11dGF0aW9uRGVmYXVsdHMiLCJ1bmRlZmluZWQiLCJhZGQiLCJwdXNoIiwibm90aWZ5IiwidHlwZSIsInJlbW92ZSIsImZpbHRlciIsIngiLCJjbGVhciIsImJhdGNoIiwiZm9yRWFjaCIsImdldEFsbCIsImZpbmQiLCJmaWx0ZXJzIiwiZXhhY3QiLCJmaW5kQWxsIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJsaXN0ZW5lciIsInJlc3VtZVBhdXNlZE11dGF0aW9ucyIsIl90aGlzJHJlc3VtaW5nIiwicmVzdW1pbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJwYXVzZWRNdXRhdGlvbnMiLCJpc1BhdXNlZCIsInJlZHVjZSIsInByb21pc2UiLCJjb250aW51ZSIsImNhdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/mutationCache.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs":
/*!******************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutationObserver: () => (/* binding */ MutationObserver)\n/* harmony export */ });\n/* harmony import */ var _mutation_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mutation.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/mutation.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\n\n\n// CLASS\nclass MutationObserver extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(client, options){\n        super();\n        this.client = client;\n        this.setOptions(options);\n        this.bindMethods();\n        this.updateResult();\n    }\n    bindMethods() {\n        this.mutate = this.mutate.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n    setOptions(options) {\n        var _this$currentMutation;\n        const prevOptions = this.options;\n        this.options = this.client.defaultMutationOptions(options);\n        if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(prevOptions, this.options)) {\n            this.client.getMutationCache().notify({\n                type: \"observerOptionsUpdated\",\n                mutation: this.currentMutation,\n                observer: this\n            });\n        }\n        (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            var _this$currentMutation2;\n            (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);\n        }\n    }\n    onMutationUpdate(action) {\n        this.updateResult(); // Determine which callbacks to trigger\n        const notifyOptions = {\n            listeners: true\n        };\n        if (action.type === \"success\") {\n            notifyOptions.onSuccess = true;\n        } else if (action.type === \"error\") {\n            notifyOptions.onError = true;\n        }\n        this.notify(notifyOptions);\n    }\n    getCurrentResult() {\n        return this.currentResult;\n    }\n    reset() {\n        this.currentMutation = undefined;\n        this.updateResult();\n        this.notify({\n            listeners: true\n        });\n    }\n    mutate(variables, options) {\n        this.mutateOptions = options;\n        if (this.currentMutation) {\n            this.currentMutation.removeObserver(this);\n        }\n        this.currentMutation = this.client.getMutationCache().build(this.client, {\n            ...this.options,\n            variables: typeof variables !== \"undefined\" ? variables : this.options.variables\n        });\n        this.currentMutation.addObserver(this);\n        return this.currentMutation.execute();\n    }\n    updateResult() {\n        const state = this.currentMutation ? this.currentMutation.state : (0,_mutation_mjs__WEBPACK_IMPORTED_MODULE_2__.getDefaultState)();\n        const result = {\n            ...state,\n            isLoading: state.status === \"loading\",\n            isSuccess: state.status === \"success\",\n            isError: state.status === \"error\",\n            isIdle: state.status === \"idle\",\n            mutate: this.mutate,\n            reset: this.reset\n        };\n        this.currentResult = result;\n    }\n    notify(options) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            // First trigger the mutate callbacks\n            if (this.mutateOptions && this.hasListeners()) {\n                if (options.onSuccess) {\n                    var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n                    (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n                    (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n                } else if (options.onError) {\n                    var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n                    (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n                    (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n                }\n            } // Then trigger the listeners\n            if (options.listeners) {\n                this.listeners.forEach(({ listener })=>{\n                    listener(this.currentResult);\n                });\n            }\n        });\n    }\n}\n //# sourceMappingURL=mutationObserver.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/notifyManager.mjs":
/*!***************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/notifyManager.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNotifyManager: () => (/* binding */ createNotifyManager),\n/* harmony export */   notifyManager: () => (/* binding */ notifyManager)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\nfunction createNotifyManager() {\n    let queue = [];\n    let transactions = 0;\n    let notifyFn = (callback)=>{\n        callback();\n    };\n    let batchNotifyFn = (callback)=>{\n        callback();\n    };\n    const batch = (callback)=>{\n        let result;\n        transactions++;\n        try {\n            result = callback();\n        } finally{\n            transactions--;\n            if (!transactions) {\n                flush();\n            }\n        }\n        return result;\n    };\n    const schedule = (callback)=>{\n        if (transactions) {\n            queue.push(callback);\n        } else {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.scheduleMicrotask)(()=>{\n                notifyFn(callback);\n            });\n        }\n    };\n    /**\n   * All calls to the wrapped function will be batched.\n   */ const batchCalls = (callback)=>{\n        return (...args)=>{\n            schedule(()=>{\n                callback(...args);\n            });\n        };\n    };\n    const flush = ()=>{\n        const originalQueue = queue;\n        queue = [];\n        if (originalQueue.length) {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.scheduleMicrotask)(()=>{\n                batchNotifyFn(()=>{\n                    originalQueue.forEach((callback)=>{\n                        notifyFn(callback);\n                    });\n                });\n            });\n        }\n    };\n    /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */ const setNotifyFunction = (fn)=>{\n        notifyFn = fn;\n    };\n    /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */ const setBatchNotifyFunction = (fn)=>{\n        batchNotifyFn = fn;\n    };\n    return {\n        batch,\n        batchCalls,\n        schedule,\n        setNotifyFunction,\n        setBatchNotifyFunction\n    };\n} // SINGLETON\nconst notifyManager = createNotifyManager();\n //# sourceMappingURL=notifyManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9ub3RpZnlNYW5hZ2VyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0Q7QUFFaEQsU0FBU0M7SUFDUCxJQUFJQyxRQUFRLEVBQUU7SUFDZCxJQUFJQyxlQUFlO0lBRW5CLElBQUlDLFdBQVdDLENBQUFBO1FBQ2JBO0lBQ0Y7SUFFQSxJQUFJQyxnQkFBZ0JELENBQUFBO1FBQ2xCQTtJQUNGO0lBRUEsTUFBTUUsUUFBUUYsQ0FBQUE7UUFDWixJQUFJRztRQUNKTDtRQUVBLElBQUk7WUFDRkssU0FBU0g7UUFDWCxTQUFVO1lBQ1JGO1lBRUEsSUFBSSxDQUFDQSxjQUFjO2dCQUNqQk07WUFDRjtRQUNGO1FBRUEsT0FBT0Q7SUFDVDtJQUVBLE1BQU1FLFdBQVdMLENBQUFBO1FBQ2YsSUFBSUYsY0FBYztZQUNoQkQsTUFBTVMsSUFBSSxDQUFDTjtRQUNiLE9BQU87WUFDTEwsNkRBQWlCQSxDQUFDO2dCQUNoQkksU0FBU0M7WUFDWDtRQUNGO0lBQ0Y7SUFDQTs7R0FFQyxHQUdELE1BQU1PLGFBQWFQLENBQUFBO1FBQ2pCLE9BQU8sQ0FBQyxHQUFHUTtZQUNUSCxTQUFTO2dCQUNQTCxZQUFZUTtZQUNkO1FBQ0Y7SUFDRjtJQUVBLE1BQU1KLFFBQVE7UUFDWixNQUFNSyxnQkFBZ0JaO1FBQ3RCQSxRQUFRLEVBQUU7UUFFVixJQUFJWSxjQUFjQyxNQUFNLEVBQUU7WUFDeEJmLDZEQUFpQkEsQ0FBQztnQkFDaEJNLGNBQWM7b0JBQ1pRLGNBQWNFLE9BQU8sQ0FBQ1gsQ0FBQUE7d0JBQ3BCRCxTQUFTQztvQkFDWDtnQkFDRjtZQUNGO1FBQ0Y7SUFDRjtJQUNBOzs7R0FHQyxHQUdELE1BQU1ZLG9CQUFvQkMsQ0FBQUE7UUFDeEJkLFdBQVdjO0lBQ2I7SUFDQTs7O0dBR0MsR0FHRCxNQUFNQyx5QkFBeUJELENBQUFBO1FBQzdCWixnQkFBZ0JZO0lBQ2xCO0lBRUEsT0FBTztRQUNMWDtRQUNBSztRQUNBRjtRQUNBTztRQUNBRTtJQUNGO0FBQ0YsRUFBRSxZQUFZO0FBRWQsTUFBTUMsZ0JBQWdCbkI7QUFFd0IsQ0FDOUMsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9ub3RpZnlNYW5hZ2VyLm1qcz81ZWE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjaGVkdWxlTWljcm90YXNrIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVOb3RpZnlNYW5hZ2VyKCkge1xuICBsZXQgcXVldWUgPSBbXTtcbiAgbGV0IHRyYW5zYWN0aW9ucyA9IDA7XG5cbiAgbGV0IG5vdGlmeUZuID0gY2FsbGJhY2sgPT4ge1xuICAgIGNhbGxiYWNrKCk7XG4gIH07XG5cbiAgbGV0IGJhdGNoTm90aWZ5Rm4gPSBjYWxsYmFjayA9PiB7XG4gICAgY2FsbGJhY2soKTtcbiAgfTtcblxuICBjb25zdCBiYXRjaCA9IGNhbGxiYWNrID0+IHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyYW5zYWN0aW9ucysrO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyYW5zYWN0aW9ucy0tO1xuXG4gICAgICBpZiAoIXRyYW5zYWN0aW9ucykge1xuICAgICAgICBmbHVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgY29uc3Qgc2NoZWR1bGUgPSBjYWxsYmFjayA9PiB7XG4gICAgaWYgKHRyYW5zYWN0aW9ucykge1xuICAgICAgcXVldWUucHVzaChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVkdWxlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgbm90aWZ5Rm4oY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogQWxsIGNhbGxzIHRvIHRoZSB3cmFwcGVkIGZ1bmN0aW9uIHdpbGwgYmUgYmF0Y2hlZC5cbiAgICovXG5cblxuICBjb25zdCBiYXRjaENhbGxzID0gY2FsbGJhY2sgPT4ge1xuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgc2NoZWR1bGUoKCkgPT4ge1xuICAgICAgICBjYWxsYmFjayguLi5hcmdzKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgY29uc3QgZmx1c2ggPSAoKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxRdWV1ZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gW107XG5cbiAgICBpZiAob3JpZ2luYWxRdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHNjaGVkdWxlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgYmF0Y2hOb3RpZnlGbigoKSA9PiB7XG4gICAgICAgICAgb3JpZ2luYWxRdWV1ZS5mb3JFYWNoKGNhbGxiYWNrID0+IHtcbiAgICAgICAgICAgIG5vdGlmeUZuKGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gc2V0IGEgY3VzdG9tIG5vdGlmeSBmdW5jdGlvbi5cbiAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBmb3IgZXhhbXBsZSB3cmFwIG5vdGlmaWNhdGlvbnMgd2l0aCBgUmVhY3QuYWN0YCB3aGlsZSBydW5uaW5nIHRlc3RzLlxuICAgKi9cblxuXG4gIGNvbnN0IHNldE5vdGlmeUZ1bmN0aW9uID0gZm4gPT4ge1xuICAgIG5vdGlmeUZuID0gZm47XG4gIH07XG4gIC8qKlxuICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gc2V0IGEgY3VzdG9tIGZ1bmN0aW9uIHRvIGJhdGNoIG5vdGlmaWNhdGlvbnMgdG9nZXRoZXIgaW50byBhIHNpbmdsZSB0aWNrLlxuICAgKiBCeSBkZWZhdWx0IFJlYWN0IFF1ZXJ5IHdpbGwgdXNlIHRoZSBiYXRjaCBmdW5jdGlvbiBwcm92aWRlZCBieSBSZWFjdERPTSBvciBSZWFjdCBOYXRpdmUuXG4gICAqL1xuXG5cbiAgY29uc3Qgc2V0QmF0Y2hOb3RpZnlGdW5jdGlvbiA9IGZuID0+IHtcbiAgICBiYXRjaE5vdGlmeUZuID0gZm47XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBiYXRjaCxcbiAgICBiYXRjaENhbGxzLFxuICAgIHNjaGVkdWxlLFxuICAgIHNldE5vdGlmeUZ1bmN0aW9uLFxuICAgIHNldEJhdGNoTm90aWZ5RnVuY3Rpb25cbiAgfTtcbn0gLy8gU0lOR0xFVE9OXG5cbmNvbnN0IG5vdGlmeU1hbmFnZXIgPSBjcmVhdGVOb3RpZnlNYW5hZ2VyKCk7XG5cbmV4cG9ydCB7IGNyZWF0ZU5vdGlmeU1hbmFnZXIsIG5vdGlmeU1hbmFnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vdGlmeU1hbmFnZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbInNjaGVkdWxlTWljcm90YXNrIiwiY3JlYXRlTm90aWZ5TWFuYWdlciIsInF1ZXVlIiwidHJhbnNhY3Rpb25zIiwibm90aWZ5Rm4iLCJjYWxsYmFjayIsImJhdGNoTm90aWZ5Rm4iLCJiYXRjaCIsInJlc3VsdCIsImZsdXNoIiwic2NoZWR1bGUiLCJwdXNoIiwiYmF0Y2hDYWxscyIsImFyZ3MiLCJvcmlnaW5hbFF1ZXVlIiwibGVuZ3RoIiwiZm9yRWFjaCIsInNldE5vdGlmeUZ1bmN0aW9uIiwiZm4iLCJzZXRCYXRjaE5vdGlmeUZ1bmN0aW9uIiwibm90aWZ5TWFuYWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/onlineManager.mjs":
/*!***************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/onlineManager.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnlineManager: () => (/* binding */ OnlineManager),\n/* harmony export */   onlineManager: () => (/* binding */ onlineManager)\n/* harmony export */ });\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\nconst onlineEvents = [\n    \"online\",\n    \"offline\"\n];\nclass OnlineManager extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(){\n        super();\n        this.setup = (onOnline)=>{\n            // addEventListener does not exist in React Native, but window does\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (!_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer && window.addEventListener) {\n                const listener = ()=>onOnline(); // Listen to online\n                onlineEvents.forEach((event)=>{\n                    window.addEventListener(event, listener, false);\n                });\n                return ()=>{\n                    // Be sure to unsubscribe if a new handler is set\n                    onlineEvents.forEach((event)=>{\n                        window.removeEventListener(event, listener);\n                    });\n                };\n            }\n            return;\n        };\n    }\n    onSubscribe() {\n        if (!this.cleanup) {\n            this.setEventListener(this.setup);\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            var _this$cleanup;\n            (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n            this.cleanup = undefined;\n        }\n    }\n    setEventListener(setup) {\n        var _this$cleanup2;\n        this.setup = setup;\n        (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n        this.cleanup = setup((online)=>{\n            if (typeof online === \"boolean\") {\n                this.setOnline(online);\n            } else {\n                this.onOnline();\n            }\n        });\n    }\n    setOnline(online) {\n        const changed = this.online !== online;\n        if (changed) {\n            this.online = online;\n            this.onOnline();\n        }\n    }\n    onOnline() {\n        this.listeners.forEach(({ listener })=>{\n            listener();\n        });\n    }\n    isOnline() {\n        if (typeof this.online === \"boolean\") {\n            return this.online;\n        }\n        if (typeof navigator === \"undefined\" || typeof navigator.onLine === \"undefined\") {\n            return true;\n        }\n        return navigator.onLine;\n    }\n}\nconst onlineManager = new OnlineManager();\n //# sourceMappingURL=onlineManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9vbmxpbmVNYW5hZ2VyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtEO0FBQ1g7QUFFdkMsTUFBTUUsZUFBZTtJQUFDO0lBQVU7Q0FBVTtBQUMxQyxNQUFNQyxzQkFBc0JILDJEQUFZQTtJQUN0Q0ksYUFBYztRQUNaLEtBQUs7UUFFTCxJQUFJLENBQUNDLEtBQUssR0FBR0MsQ0FBQUE7WUFDWCxtRUFBbUU7WUFDbkUsdUVBQXVFO1lBQ3ZFLElBQUksQ0FBQ0wsZ0RBQVFBLElBQUlNLE9BQU9DLGdCQUFnQixFQUFFO2dCQUN4QyxNQUFNQyxXQUFXLElBQU1ILFlBQVksbUJBQW1CO2dCQUd0REosYUFBYVEsT0FBTyxDQUFDQyxDQUFBQTtvQkFDbkJKLE9BQU9DLGdCQUFnQixDQUFDRyxPQUFPRixVQUFVO2dCQUMzQztnQkFDQSxPQUFPO29CQUNMLGlEQUFpRDtvQkFDakRQLGFBQWFRLE9BQU8sQ0FBQ0MsQ0FBQUE7d0JBQ25CSixPQUFPSyxtQkFBbUIsQ0FBQ0QsT0FBT0Y7b0JBQ3BDO2dCQUNGO1lBQ0Y7WUFFQTtRQUNGO0lBQ0Y7SUFFQUksY0FBYztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUNDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUNDLGdCQUFnQixDQUFDLElBQUksQ0FBQ1YsS0FBSztRQUNsQztJQUNGO0lBRUFXLGdCQUFnQjtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUNDLFlBQVksSUFBSTtZQUN4QixJQUFJQztZQUVIQSxDQUFBQSxnQkFBZ0IsSUFBSSxDQUFDSixPQUFPLEtBQUssT0FBTyxLQUFLLElBQUlJLGNBQWNDLElBQUksQ0FBQyxJQUFJO1lBQ3pFLElBQUksQ0FBQ0wsT0FBTyxHQUFHTTtRQUNqQjtJQUNGO0lBRUFMLGlCQUFpQlYsS0FBSyxFQUFFO1FBQ3RCLElBQUlnQjtRQUVKLElBQUksQ0FBQ2hCLEtBQUssR0FBR0E7UUFDWmdCLENBQUFBLGlCQUFpQixJQUFJLENBQUNQLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSU8sZUFBZUYsSUFBSSxDQUFDLElBQUk7UUFDM0UsSUFBSSxDQUFDTCxPQUFPLEdBQUdULE1BQU1pQixDQUFBQTtZQUNuQixJQUFJLE9BQU9BLFdBQVcsV0FBVztnQkFDL0IsSUFBSSxDQUFDQyxTQUFTLENBQUNEO1lBQ2pCLE9BQU87Z0JBQ0wsSUFBSSxDQUFDaEIsUUFBUTtZQUNmO1FBQ0Y7SUFDRjtJQUVBaUIsVUFBVUQsTUFBTSxFQUFFO1FBQ2hCLE1BQU1FLFVBQVUsSUFBSSxDQUFDRixNQUFNLEtBQUtBO1FBRWhDLElBQUlFLFNBQVM7WUFDWCxJQUFJLENBQUNGLE1BQU0sR0FBR0E7WUFDZCxJQUFJLENBQUNoQixRQUFRO1FBQ2Y7SUFDRjtJQUVBQSxXQUFXO1FBQ1QsSUFBSSxDQUFDbUIsU0FBUyxDQUFDZixPQUFPLENBQUMsQ0FBQyxFQUN0QkQsUUFBUSxFQUNUO1lBQ0NBO1FBQ0Y7SUFDRjtJQUVBaUIsV0FBVztRQUNULElBQUksT0FBTyxJQUFJLENBQUNKLE1BQU0sS0FBSyxXQUFXO1lBQ3BDLE9BQU8sSUFBSSxDQUFDQSxNQUFNO1FBQ3BCO1FBRUEsSUFBSSxPQUFPSyxjQUFjLGVBQWUsT0FBT0EsVUFBVUMsTUFBTSxLQUFLLGFBQWE7WUFDL0UsT0FBTztRQUNUO1FBRUEsT0FBT0QsVUFBVUMsTUFBTTtJQUN6QjtBQUVGO0FBQ0EsTUFBTUMsZ0JBQWdCLElBQUkxQjtBQUVjLENBQ3hDLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLy4vYXBwL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9saWIvb25saW5lTWFuYWdlci5tanM/YWQwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tICcuL3N1YnNjcmliYWJsZS5tanMnO1xuaW1wb3J0IHsgaXNTZXJ2ZXIgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmNvbnN0IG9ubGluZUV2ZW50cyA9IFsnb25saW5lJywgJ29mZmxpbmUnXTtcbmNsYXNzIE9ubGluZU1hbmFnZXIgZXh0ZW5kcyBTdWJzY3JpYmFibGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5zZXR1cCA9IG9uT25saW5lID0+IHtcbiAgICAgIC8vIGFkZEV2ZW50TGlzdGVuZXIgZG9lcyBub3QgZXhpc3QgaW4gUmVhY3QgTmF0aXZlLCBidXQgd2luZG93IGRvZXNcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG4gICAgICBpZiAoIWlzU2VydmVyICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4gb25PbmxpbmUoKTsgLy8gTGlzdGVuIHRvIG9ubGluZVxuXG5cbiAgICAgICAgb25saW5lRXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAvLyBCZSBzdXJlIHRvIHVuc3Vic2NyaWJlIGlmIGEgbmV3IGhhbmRsZXIgaXMgc2V0XG4gICAgICAgICAgb25saW5lRXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH07XG4gIH1cblxuICBvblN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuY2xlYW51cCkge1xuICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVyKHRoaXMuc2V0dXApO1xuICAgIH1cbiAgfVxuXG4gIG9uVW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICB2YXIgX3RoaXMkY2xlYW51cDtcblxuICAgICAgKF90aGlzJGNsZWFudXAgPSB0aGlzLmNsZWFudXApID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjbGVhbnVwLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLmNsZWFudXAgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcihzZXR1cCkge1xuICAgIHZhciBfdGhpcyRjbGVhbnVwMjtcblxuICAgIHRoaXMuc2V0dXAgPSBzZXR1cDtcbiAgICAoX3RoaXMkY2xlYW51cDIgPSB0aGlzLmNsZWFudXApID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjbGVhbnVwMi5jYWxsKHRoaXMpO1xuICAgIHRoaXMuY2xlYW51cCA9IHNldHVwKG9ubGluZSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG9ubGluZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRoaXMuc2V0T25saW5lKG9ubGluZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uT25saW5lKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZXRPbmxpbmUob25saW5lKSB7XG4gICAgY29uc3QgY2hhbmdlZCA9IHRoaXMub25saW5lICE9PSBvbmxpbmU7XG5cbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpcy5vbmxpbmUgPSBvbmxpbmU7XG4gICAgICB0aGlzLm9uT25saW5lKCk7XG4gICAgfVxuICB9XG5cbiAgb25PbmxpbmUoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaCgoe1xuICAgICAgbGlzdGVuZXJcbiAgICB9KSA9PiB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9XG5cbiAgaXNPbmxpbmUoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9ubGluZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gdGhpcy5vbmxpbmU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBuYXZpZ2F0b3Iub25MaW5lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hdmlnYXRvci5vbkxpbmU7XG4gIH1cblxufVxuY29uc3Qgb25saW5lTWFuYWdlciA9IG5ldyBPbmxpbmVNYW5hZ2VyKCk7XG5cbmV4cG9ydCB7IE9ubGluZU1hbmFnZXIsIG9ubGluZU1hbmFnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ubGluZU1hbmFnZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlN1YnNjcmliYWJsZSIsImlzU2VydmVyIiwib25saW5lRXZlbnRzIiwiT25saW5lTWFuYWdlciIsImNvbnN0cnVjdG9yIiwic2V0dXAiLCJvbk9ubGluZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lciIsImZvckVhY2giLCJldmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvblN1YnNjcmliZSIsImNsZWFudXAiLCJzZXRFdmVudExpc3RlbmVyIiwib25VbnN1YnNjcmliZSIsImhhc0xpc3RlbmVycyIsIl90aGlzJGNsZWFudXAiLCJjYWxsIiwidW5kZWZpbmVkIiwiX3RoaXMkY2xlYW51cDIiLCJvbmxpbmUiLCJzZXRPbmxpbmUiLCJjaGFuZ2VkIiwibGlzdGVuZXJzIiwiaXNPbmxpbmUiLCJuYXZpZ2F0b3IiLCJvbkxpbmUiLCJvbmxpbmVNYW5hZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/onlineManager.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/query.mjs":
/*!*******************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/query.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Query: () => (/* binding */ Query)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/logger.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _retryer_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./retryer.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/retryer.mjs\");\n/* harmony import */ var _removable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./removable.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/removable.mjs\");\n\n\n\n\n\n// CLASS\nclass Query extends _removable_mjs__WEBPACK_IMPORTED_MODULE_0__.Removable {\n    constructor(config){\n        super();\n        this.abortSignalConsumed = false;\n        this.defaultOptions = config.defaultOptions;\n        this.setOptions(config.options);\n        this.observers = [];\n        this.cache = config.cache;\n        this.logger = config.logger || _logger_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultLogger;\n        this.queryKey = config.queryKey;\n        this.queryHash = config.queryHash;\n        this.initialState = config.state || getDefaultState(this.options);\n        this.state = this.initialState;\n        this.scheduleGc();\n    }\n    get meta() {\n        return this.options.meta;\n    }\n    setOptions(options) {\n        this.options = {\n            ...this.defaultOptions,\n            ...options\n        };\n        this.updateCacheTime(this.options.cacheTime);\n    }\n    optionalRemove() {\n        if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n            this.cache.remove(this);\n        }\n    }\n    setData(newData, options) {\n        const data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.replaceData)(this.state.data, newData, this.options); // Set data and mark it as cached\n        this.dispatch({\n            data,\n            type: \"success\",\n            dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n            manual: options == null ? void 0 : options.manual\n        });\n        return data;\n    }\n    setState(state, setStateOptions) {\n        this.dispatch({\n            type: \"setState\",\n            state,\n            setStateOptions\n        });\n    }\n    cancel(options) {\n        var _this$retryer;\n        const promise = this.promise;\n        (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n        return promise ? promise.then(_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.noop) : Promise.resolve();\n    }\n    destroy() {\n        super.destroy();\n        this.cancel({\n            silent: true\n        });\n    }\n    reset() {\n        this.destroy();\n        this.setState(this.initialState);\n    }\n    isActive() {\n        return this.observers.some((observer)=>observer.options.enabled !== false);\n    }\n    isDisabled() {\n        return this.getObserversCount() > 0 && !this.isActive();\n    }\n    isStale() {\n        return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some((observer)=>observer.getCurrentResult().isStale);\n    }\n    isStaleByTime(staleTime = 0) {\n        return this.state.isInvalidated || !this.state.dataUpdatedAt || !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.timeUntilStale)(this.state.dataUpdatedAt, staleTime);\n    }\n    onFocus() {\n        var _this$retryer2;\n        const observer = this.observers.find((x)=>x.shouldFetchOnWindowFocus());\n        if (observer) {\n            observer.refetch({\n                cancelRefetch: false\n            });\n        } // Continue fetch if currently paused\n        (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n    }\n    onOnline() {\n        var _this$retryer3;\n        const observer = this.observers.find((x)=>x.shouldFetchOnReconnect());\n        if (observer) {\n            observer.refetch({\n                cancelRefetch: false\n            });\n        } // Continue fetch if currently paused\n        (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n    }\n    addObserver(observer) {\n        if (!this.observers.includes(observer)) {\n            this.observers.push(observer); // Stop the query from being garbage collected\n            this.clearGcTimeout();\n            this.cache.notify({\n                type: \"observerAdded\",\n                query: this,\n                observer\n            });\n        }\n    }\n    removeObserver(observer) {\n        if (this.observers.includes(observer)) {\n            this.observers = this.observers.filter((x)=>x !== observer);\n            if (!this.observers.length) {\n                // If the transport layer does not support cancellation\n                // we'll let the query continue so the result can be cached\n                if (this.retryer) {\n                    if (this.abortSignalConsumed) {\n                        this.retryer.cancel({\n                            revert: true\n                        });\n                    } else {\n                        this.retryer.cancelRetry();\n                    }\n                }\n                this.scheduleGc();\n            }\n            this.cache.notify({\n                type: \"observerRemoved\",\n                query: this,\n                observer\n            });\n        }\n    }\n    getObserversCount() {\n        return this.observers.length;\n    }\n    invalidate() {\n        if (!this.state.isInvalidated) {\n            this.dispatch({\n                type: \"invalidate\"\n            });\n        }\n    }\n    fetch(options, fetchOptions) {\n        var _this$options$behavio, _context$fetchOptions;\n        if (this.state.fetchStatus !== \"idle\") {\n            if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n                // Silently cancel current fetch if the user wants to cancel refetches\n                this.cancel({\n                    silent: true\n                });\n            } else if (this.promise) {\n                var _this$retryer4;\n                // make sure that retries that were potentially cancelled due to unmounts can continue\n                (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n                return this.promise;\n            }\n        } // Update config if passed, otherwise the config from the last execution is used\n        if (options) {\n            this.setOptions(options);\n        } // Use the options from the first observer with a query function if no function is found.\n        // This can happen when the query is hydrated or created with setQueryData.\n        if (!this.options.queryFn) {\n            const observer = this.observers.find((x)=>x.options.queryFn);\n            if (observer) {\n                this.setOptions(observer.options);\n            }\n        }\n        if (true) {\n            if (!Array.isArray(this.options.queryKey)) {\n                this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n            }\n        }\n        const abortController = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.getAbortController)(); // Create query function context\n        const queryFnContext = {\n            queryKey: this.queryKey,\n            pageParam: undefined,\n            meta: this.meta\n        }; // Adds an enumerable signal property to the object that\n        // which sets abortSignalConsumed to true when the signal\n        // is read.\n        const addSignalProperty = (object)=>{\n            Object.defineProperty(object, \"signal\", {\n                enumerable: true,\n                get: ()=>{\n                    if (abortController) {\n                        this.abortSignalConsumed = true;\n                        return abortController.signal;\n                    }\n                    return undefined;\n                }\n            });\n        };\n        addSignalProperty(queryFnContext); // Create fetch function\n        const fetchFn = ()=>{\n            if (!this.options.queryFn) {\n                return Promise.reject(\"Missing queryFn for queryKey '\" + this.options.queryHash + \"'\");\n            }\n            this.abortSignalConsumed = false;\n            return this.options.queryFn(queryFnContext);\n        }; // Trigger behavior hook\n        const context = {\n            fetchOptions,\n            options: this.options,\n            queryKey: this.queryKey,\n            state: this.state,\n            fetchFn\n        };\n        addSignalProperty(context);\n        (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n        this.revertState = this.state; // Set to fetching state if not already in it\n        if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n            var _context$fetchOptions2;\n            this.dispatch({\n                type: \"fetch\",\n                meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n            });\n        }\n        const onError = (error)=>{\n            // Optimistically update state if needed\n            if (!((0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(error) && error.silent)) {\n                this.dispatch({\n                    type: \"error\",\n                    error: error\n                });\n            }\n            if (!(0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(error)) {\n                var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2;\n                // Notify cache callback\n                (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);\n                (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, this.state.data, error, this);\n                if (true) {\n                    this.logger.error(error);\n                }\n            }\n            if (!this.isFetchingOptimistic) {\n                // Schedule query gc after fetching\n                this.scheduleGc();\n            }\n            this.isFetchingOptimistic = false;\n        }; // Try to fetch the data\n        this.retryer = (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.createRetryer)({\n            fn: context.fetchFn,\n            abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n            onSuccess: (data)=>{\n                var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;\n                if (typeof data === \"undefined\") {\n                    if (true) {\n                        this.logger.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \" + this.queryHash);\n                    }\n                    onError(new Error(this.queryHash + \" data is undefined\"));\n                    return;\n                }\n                this.setData(data); // Notify cache callback\n                (_this$cache$config$on3 = (_this$cache$config3 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data, this);\n                (_this$cache$config$on4 = (_this$cache$config4 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data, this.state.error, this);\n                if (!this.isFetchingOptimistic) {\n                    // Schedule query gc after fetching\n                    this.scheduleGc();\n                }\n                this.isFetchingOptimistic = false;\n            },\n            onError,\n            onFail: (failureCount, error)=>{\n                this.dispatch({\n                    type: \"failed\",\n                    failureCount,\n                    error\n                });\n            },\n            onPause: ()=>{\n                this.dispatch({\n                    type: \"pause\"\n                });\n            },\n            onContinue: ()=>{\n                this.dispatch({\n                    type: \"continue\"\n                });\n            },\n            retry: context.options.retry,\n            retryDelay: context.options.retryDelay,\n            networkMode: context.options.networkMode\n        });\n        this.promise = this.retryer.promise;\n        return this.promise;\n    }\n    dispatch(action) {\n        const reducer = (state)=>{\n            var _action$meta, _action$dataUpdatedAt;\n            switch(action.type){\n                case \"failed\":\n                    return {\n                        ...state,\n                        fetchFailureCount: action.failureCount,\n                        fetchFailureReason: action.error\n                    };\n                case \"pause\":\n                    return {\n                        ...state,\n                        fetchStatus: \"paused\"\n                    };\n                case \"continue\":\n                    return {\n                        ...state,\n                        fetchStatus: \"fetching\"\n                    };\n                case \"fetch\":\n                    return {\n                        ...state,\n                        fetchFailureCount: 0,\n                        fetchFailureReason: null,\n                        fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n                        fetchStatus: (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.canFetch)(this.options.networkMode) ? \"fetching\" : \"paused\",\n                        ...!state.dataUpdatedAt && {\n                            error: null,\n                            status: \"loading\"\n                        }\n                    };\n                case \"success\":\n                    return {\n                        ...state,\n                        data: action.data,\n                        dataUpdateCount: state.dataUpdateCount + 1,\n                        dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n                        error: null,\n                        isInvalidated: false,\n                        status: \"success\",\n                        ...!action.manual && {\n                            fetchStatus: \"idle\",\n                            fetchFailureCount: 0,\n                            fetchFailureReason: null\n                        }\n                    };\n                case \"error\":\n                    const error = action.error;\n                    if ((0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(error) && error.revert && this.revertState) {\n                        return {\n                            ...this.revertState,\n                            fetchStatus: \"idle\"\n                        };\n                    }\n                    return {\n                        ...state,\n                        error: error,\n                        errorUpdateCount: state.errorUpdateCount + 1,\n                        errorUpdatedAt: Date.now(),\n                        fetchFailureCount: state.fetchFailureCount + 1,\n                        fetchFailureReason: error,\n                        fetchStatus: \"idle\",\n                        status: \"error\"\n                    };\n                case \"invalidate\":\n                    return {\n                        ...state,\n                        isInvalidated: true\n                    };\n                case \"setState\":\n                    return {\n                        ...state,\n                        ...action.state\n                    };\n            }\n        };\n        this.state = reducer(this.state);\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__.notifyManager.batch(()=>{\n            this.observers.forEach((observer)=>{\n                observer.onQueryUpdate(action);\n            });\n            this.cache.notify({\n                query: this,\n                type: \"updated\",\n                action\n            });\n        });\n    }\n}\nfunction getDefaultState(options) {\n    const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n    const hasData = typeof data !== \"undefined\";\n    const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n    return {\n        data,\n        dataUpdateCount: 0,\n        dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n        error: null,\n        errorUpdateCount: 0,\n        errorUpdatedAt: 0,\n        fetchFailureCount: 0,\n        fetchFailureReason: null,\n        fetchMeta: null,\n        isInvalidated: false,\n        status: hasData ? \"success\" : \"loading\",\n        fetchStatus: \"idle\"\n    };\n}\n //# sourceMappingURL=query.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/query.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/queryCache.mjs":
/*!************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/queryCache.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryCache: () => (/* binding */ QueryCache)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _query_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/query.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n\n\n\n\n// CLASS\nclass QueryCache extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(config){\n        super();\n        this.config = config || {};\n        this.queries = [];\n        this.queriesMap = {};\n    }\n    build(client, options, state) {\n        var _options$queryHash;\n        const queryKey = options.queryKey;\n        const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.hashQueryKeyByOptions)(queryKey, options);\n        let query = this.get(queryHash);\n        if (!query) {\n            query = new _query_mjs__WEBPACK_IMPORTED_MODULE_2__.Query({\n                cache: this,\n                logger: client.getLogger(),\n                queryKey,\n                queryHash,\n                options: client.defaultQueryOptions(options),\n                state,\n                defaultOptions: client.getQueryDefaults(queryKey)\n            });\n            this.add(query);\n        }\n        return query;\n    }\n    add(query) {\n        if (!this.queriesMap[query.queryHash]) {\n            this.queriesMap[query.queryHash] = query;\n            this.queries.push(query);\n            this.notify({\n                type: \"added\",\n                query\n            });\n        }\n    }\n    remove(query) {\n        const queryInMap = this.queriesMap[query.queryHash];\n        if (queryInMap) {\n            query.destroy();\n            this.queries = this.queries.filter((x)=>x !== query);\n            if (queryInMap === query) {\n                delete this.queriesMap[query.queryHash];\n            }\n            this.notify({\n                type: \"removed\",\n                query\n            });\n        }\n    }\n    clear() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.queries.forEach((query)=>{\n                this.remove(query);\n            });\n        });\n    }\n    get(queryHash) {\n        return this.queriesMap[queryHash];\n    }\n    getAll() {\n        return this.queries;\n    }\n    find(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseFilterArgs)(arg1, arg2);\n        if (typeof filters.exact === \"undefined\") {\n            filters.exact = true;\n        }\n        return this.queries.find((query)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.matchQuery)(filters, query));\n    }\n    findAll(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseFilterArgs)(arg1, arg2);\n        return Object.keys(filters).length > 0 ? this.queries.filter((query)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.matchQuery)(filters, query)) : this.queries;\n    }\n    notify(event) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.listeners.forEach(({ listener })=>{\n                listener(event);\n            });\n        });\n    }\n    onFocus() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.queries.forEach((query)=>{\n                query.onFocus();\n            });\n        });\n    }\n    onOnline() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.queries.forEach((query)=>{\n                query.onOnline();\n            });\n        });\n    }\n}\n //# sourceMappingURL=queryCache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/queryCache.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/queryClient.mjs":
/*!*************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/queryClient.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryClient: () => (/* binding */ QueryClient)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _queryCache_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queryCache.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/queryCache.mjs\");\n/* harmony import */ var _mutationCache_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mutationCache.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/mutationCache.mjs\");\n/* harmony import */ var _focusManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./focusManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/focusManager.mjs\");\n/* harmony import */ var _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./onlineManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/onlineManager.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./infiniteQueryBehavior.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs\");\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/logger.mjs\");\n\n\n\n\n\n\n\n\n// CLASS\nclass QueryClient {\n    constructor(config = {}){\n        this.queryCache = config.queryCache || new _queryCache_mjs__WEBPACK_IMPORTED_MODULE_0__.QueryCache();\n        this.mutationCache = config.mutationCache || new _mutationCache_mjs__WEBPACK_IMPORTED_MODULE_1__.MutationCache();\n        this.logger = config.logger || _logger_mjs__WEBPACK_IMPORTED_MODULE_2__.defaultLogger;\n        this.defaultOptions = config.defaultOptions || {};\n        this.queryDefaults = [];\n        this.mutationDefaults = [];\n        this.mountCount = 0;\n        if ( true && config.logger) {\n            this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\");\n        }\n    }\n    mount() {\n        this.mountCount++;\n        if (this.mountCount !== 1) return;\n        this.unsubscribeFocus = _focusManager_mjs__WEBPACK_IMPORTED_MODULE_3__.focusManager.subscribe(()=>{\n            if (_focusManager_mjs__WEBPACK_IMPORTED_MODULE_3__.focusManager.isFocused()) {\n                this.resumePausedMutations();\n                this.queryCache.onFocus();\n            }\n        });\n        this.unsubscribeOnline = _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_4__.onlineManager.subscribe(()=>{\n            if (_onlineManager_mjs__WEBPACK_IMPORTED_MODULE_4__.onlineManager.isOnline()) {\n                this.resumePausedMutations();\n                this.queryCache.onOnline();\n            }\n        });\n    }\n    unmount() {\n        var _this$unsubscribeFocu, _this$unsubscribeOnli;\n        this.mountCount--;\n        if (this.mountCount !== 0) return;\n        (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n        this.unsubscribeFocus = undefined;\n        (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n        this.unsubscribeOnline = undefined;\n    }\n    isFetching(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2);\n        filters.fetchStatus = \"fetching\";\n        return this.queryCache.findAll(filters).length;\n    }\n    isMutating(filters) {\n        return this.mutationCache.findAll({\n            ...filters,\n            fetching: true\n        }).length;\n    }\n    getQueryData(queryKey, filters) {\n        var _this$queryCache$find;\n        return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n    }\n    ensureQueryData(arg1, arg2, arg3) {\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(arg1, arg2, arg3);\n        const cachedData = this.getQueryData(parsedOptions.queryKey);\n        return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\n    }\n    getQueriesData(queryKeyOrFilters) {\n        return this.getQueryCache().findAll(queryKeyOrFilters).map(({ queryKey, state })=>{\n            const data = state.data;\n            return [\n                queryKey,\n                data\n            ];\n        });\n    }\n    setQueryData(queryKey, updater, options) {\n        const query = this.queryCache.find(queryKey);\n        const prevData = query == null ? void 0 : query.state.data;\n        const data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.functionalUpdate)(updater, prevData);\n        if (typeof data === \"undefined\") {\n            return undefined;\n        }\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(queryKey);\n        const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n        return this.queryCache.build(this, defaultedOptions).setData(data, {\n            ...options,\n            manual: true\n        });\n    }\n    setQueriesData(queryKeyOrFilters, updater, options) {\n        return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>this.getQueryCache().findAll(queryKeyOrFilters).map(({ queryKey })=>[\n                    queryKey,\n                    this.setQueryData(queryKey, updater, options)\n                ]));\n    }\n    getQueryState(queryKey, filters) {\n        var _this$queryCache$find2;\n        return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n    }\n    removeQueries(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2);\n        const queryCache = this.queryCache;\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>{\n            queryCache.findAll(filters).forEach((query)=>{\n                queryCache.remove(query);\n            });\n        });\n    }\n    resetQueries(arg1, arg2, arg3) {\n        const [filters, options] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        const queryCache = this.queryCache;\n        const refetchFilters = {\n            type: \"active\",\n            ...filters\n        };\n        return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>{\n            queryCache.findAll(filters).forEach((query)=>{\n                query.reset();\n            });\n            return this.refetchQueries(refetchFilters, options);\n        });\n    }\n    cancelQueries(arg1, arg2, arg3) {\n        const [filters, cancelOptions = {}] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        if (typeof cancelOptions.revert === \"undefined\") {\n            cancelOptions.revert = true;\n        }\n        const promises = _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>this.queryCache.findAll(filters).map((query)=>query.cancel(cancelOptions)));\n        return Promise.all(promises).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n    }\n    invalidateQueries(arg1, arg2, arg3) {\n        const [filters, options] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>{\n            var _ref, _filters$refetchType;\n            this.queryCache.findAll(filters).forEach((query)=>{\n                query.invalidate();\n            });\n            if (filters.refetchType === \"none\") {\n                return Promise.resolve();\n            }\n            const refetchFilters = {\n                ...filters,\n                type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : \"active\"\n            };\n            return this.refetchQueries(refetchFilters, options);\n        });\n    }\n    refetchQueries(arg1, arg2, arg3) {\n        const [filters, options] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        const promises = _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>this.queryCache.findAll(filters).filter((query)=>!query.isDisabled()).map((query)=>{\n                var _options$cancelRefetc;\n                return query.fetch(undefined, {\n                    ...options,\n                    cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n                    meta: {\n                        refetchPage: filters.refetchPage\n                    }\n                });\n            }));\n        let promise = Promise.all(promises).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n        if (!(options != null && options.throwOnError)) {\n            promise = promise.catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n        }\n        return promise;\n    }\n    fetchQuery(arg1, arg2, arg3) {\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(arg1, arg2, arg3);\n        const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n        if (typeof defaultedOptions.retry === \"undefined\") {\n            defaultedOptions.retry = false;\n        }\n        const query = this.queryCache.build(this, defaultedOptions);\n        return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n    }\n    prefetchQuery(arg1, arg2, arg3) {\n        return this.fetchQuery(arg1, arg2, arg3).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n    }\n    fetchInfiniteQuery(arg1, arg2, arg3) {\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(arg1, arg2, arg3);\n        parsedOptions.behavior = (0,_infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_7__.infiniteQueryBehavior)();\n        return this.fetchQuery(parsedOptions);\n    }\n    prefetchInfiniteQuery(arg1, arg2, arg3) {\n        return this.fetchInfiniteQuery(arg1, arg2, arg3).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n    }\n    resumePausedMutations() {\n        return this.mutationCache.resumePausedMutations();\n    }\n    getQueryCache() {\n        return this.queryCache;\n    }\n    getMutationCache() {\n        return this.mutationCache;\n    }\n    getLogger() {\n        return this.logger;\n    }\n    getDefaultOptions() {\n        return this.defaultOptions;\n    }\n    setDefaultOptions(options) {\n        this.defaultOptions = options;\n    }\n    setQueryDefaults(queryKey, options) {\n        const result = this.queryDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(queryKey) === (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(x.queryKey));\n        if (result) {\n            result.defaultOptions = options;\n        } else {\n            this.queryDefaults.push({\n                queryKey,\n                defaultOptions: options\n            });\n        }\n    }\n    getQueryDefaults(queryKey) {\n        if (!queryKey) {\n            return undefined;\n        } // Get the first matching defaults\n        const firstMatchingDefaults = this.queryDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(queryKey, x.queryKey)); // Additional checks and error in dev mode\n        if (true) {\n            // Retrieve all matching defaults for the given key\n            const matchingDefaults = this.queryDefaults.filter((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n            if (matchingDefaults.length > 1) {\n                this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n            }\n        }\n        return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n    }\n    setMutationDefaults(mutationKey, options) {\n        const result = this.mutationDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(mutationKey) === (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(x.mutationKey));\n        if (result) {\n            result.defaultOptions = options;\n        } else {\n            this.mutationDefaults.push({\n                mutationKey,\n                defaultOptions: options\n            });\n        }\n    }\n    getMutationDefaults(mutationKey) {\n        if (!mutationKey) {\n            return undefined;\n        } // Get the first matching defaults\n        const firstMatchingDefaults = this.mutationDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n        if (true) {\n            // Retrieve all matching defaults for the given key\n            const matchingDefaults = this.mutationDefaults.filter((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n            if (matchingDefaults.length > 1) {\n                this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n            }\n        }\n        return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n    }\n    defaultQueryOptions(options) {\n        if (options != null && options._defaulted) {\n            return options;\n        }\n        const defaultedOptions = {\n            ...this.defaultOptions.queries,\n            ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n            ...options,\n            _defaulted: true\n        };\n        if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n            defaultedOptions.queryHash = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKeyByOptions)(defaultedOptions.queryKey, defaultedOptions);\n        } // dependent default values\n        if (typeof defaultedOptions.refetchOnReconnect === \"undefined\") {\n            defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n        }\n        if (typeof defaultedOptions.useErrorBoundary === \"undefined\") {\n            defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n        }\n        return defaultedOptions;\n    }\n    defaultMutationOptions(options) {\n        if (options != null && options._defaulted) {\n            return options;\n        }\n        return {\n            ...this.defaultOptions.mutations,\n            ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n            ...options,\n            _defaulted: true\n        };\n    }\n    clear() {\n        this.queryCache.clear();\n        this.mutationCache.clear();\n    }\n}\n //# sourceMappingURL=queryClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/queryClient.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/queryObserver.mjs":
/*!***************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/queryObserver.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryObserver: () => (/* binding */ QueryObserver)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _focusManager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./focusManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/focusManager.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _retryer_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./retryer.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/retryer.mjs\");\n\n\n\n\n\nclass QueryObserver extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(client, options){\n        super();\n        this.client = client;\n        this.options = options;\n        this.trackedProps = new Set();\n        this.selectError = null;\n        this.bindMethods();\n        this.setOptions(options);\n    }\n    bindMethods() {\n        this.remove = this.remove.bind(this);\n        this.refetch = this.refetch.bind(this);\n    }\n    onSubscribe() {\n        if (this.listeners.size === 1) {\n            this.currentQuery.addObserver(this);\n            if (shouldFetchOnMount(this.currentQuery, this.options)) {\n                this.executeFetch();\n            }\n            this.updateTimers();\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            this.destroy();\n        }\n    }\n    shouldFetchOnReconnect() {\n        return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n    }\n    shouldFetchOnWindowFocus() {\n        return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n    }\n    destroy() {\n        this.listeners = new Set();\n        this.clearStaleTimeout();\n        this.clearRefetchInterval();\n        this.currentQuery.removeObserver(this);\n    }\n    setOptions(options, notifyOptions) {\n        const prevOptions = this.options;\n        const prevQuery = this.currentQuery;\n        this.options = this.client.defaultQueryOptions(options);\n        if ( true && typeof (options == null ? void 0 : options.isDataEqual) !== \"undefined\") {\n            this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n        }\n        if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(prevOptions, this.options)) {\n            this.client.getQueryCache().notify({\n                type: \"observerOptionsUpdated\",\n                query: this.currentQuery,\n                observer: this\n            });\n        }\n        if (typeof this.options.enabled !== \"undefined\" && typeof this.options.enabled !== \"boolean\") {\n            throw new Error(\"Expected enabled to be a boolean\");\n        } // Keep previous query key if the user does not supply one\n        if (!this.options.queryKey) {\n            this.options.queryKey = prevOptions.queryKey;\n        }\n        this.updateQuery();\n        const mounted = this.hasListeners(); // Fetch if there are subscribers\n        if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n            this.executeFetch();\n        } // Update result\n        this.updateResult(notifyOptions); // Update stale interval if needed\n        if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n            this.updateStaleTimeout();\n        }\n        const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n        if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n            this.updateRefetchInterval(nextRefetchInterval);\n        }\n    }\n    getOptimisticResult(options) {\n        const query = this.client.getQueryCache().build(this.client, options);\n        const result = this.createResult(query, options);\n        if (shouldAssignObserverCurrentProperties(this, result, options)) {\n            // this assigns the optimistic result to the current Observer\n            // because if the query function changes, useQuery will be performing\n            // an effect where it would fetch again.\n            // When the fetch finishes, we perform a deep data cloning in order\n            // to reuse objects references. This deep data clone is performed against\n            // the `observer.currentResult.data` property\n            // When QueryKey changes, we refresh the query and get new `optimistic`\n            // result, while we leave the `observer.currentResult`, so when new data\n            // arrives, it finds the old `observer.currentResult` which is related\n            // to the old QueryKey. Which means that currentResult and selectData are\n            // out of sync already.\n            // To solve this, we move the cursor of the currentResult everytime\n            // an observer reads an optimistic value.\n            // When keeping the previous data, the result doesn't change until new\n            // data arrives.\n            this.currentResult = result;\n            this.currentResultOptions = this.options;\n            this.currentResultState = this.currentQuery.state;\n        }\n        return result;\n    }\n    getCurrentResult() {\n        return this.currentResult;\n    }\n    trackResult(result) {\n        const trackedResult = {};\n        Object.keys(result).forEach((key)=>{\n            Object.defineProperty(trackedResult, key, {\n                configurable: false,\n                enumerable: true,\n                get: ()=>{\n                    this.trackedProps.add(key);\n                    return result[key];\n                }\n            });\n        });\n        return trackedResult;\n    }\n    getCurrentQuery() {\n        return this.currentQuery;\n    }\n    remove() {\n        this.client.getQueryCache().remove(this.currentQuery);\n    }\n    refetch({ refetchPage, ...options } = {}) {\n        return this.fetch({\n            ...options,\n            meta: {\n                refetchPage\n            }\n        });\n    }\n    fetchOptimistic(options) {\n        const defaultedOptions = this.client.defaultQueryOptions(options);\n        const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n        query.isFetchingOptimistic = true;\n        return query.fetch().then(()=>this.createResult(query, defaultedOptions));\n    }\n    fetch(fetchOptions) {\n        var _fetchOptions$cancelR;\n        return this.executeFetch({\n            ...fetchOptions,\n            cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n        }).then(()=>{\n            this.updateResult();\n            return this.currentResult;\n        });\n    }\n    executeFetch(fetchOptions) {\n        // Make sure we reference the latest query as the current one might have been removed\n        this.updateQuery(); // Fetch\n        let promise = this.currentQuery.fetch(this.options, fetchOptions);\n        if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n            promise = promise.catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.noop);\n        }\n        return promise;\n    }\n    updateStaleTimeout() {\n        this.clearStaleTimeout();\n        if (_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer || this.currentResult.isStale || !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isValidTimeout)(this.options.staleTime)) {\n            return;\n        }\n        const time = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.timeUntilStale)(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n        // To mitigate this issue we always add 1 ms to the timeout.\n        const timeout = time + 1;\n        this.staleTimeoutId = setTimeout(()=>{\n            if (!this.currentResult.isStale) {\n                this.updateResult();\n            }\n        }, timeout);\n    }\n    computeRefetchInterval() {\n        var _this$options$refetch;\n        return typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n    }\n    updateRefetchInterval(nextInterval) {\n        this.clearRefetchInterval();\n        this.currentRefetchInterval = nextInterval;\n        if (_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer || this.options.enabled === false || !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isValidTimeout)(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n            return;\n        }\n        this.refetchIntervalId = setInterval(()=>{\n            if (this.options.refetchIntervalInBackground || _focusManager_mjs__WEBPACK_IMPORTED_MODULE_2__.focusManager.isFocused()) {\n                this.executeFetch();\n            }\n        }, this.currentRefetchInterval);\n    }\n    updateTimers() {\n        this.updateStaleTimeout();\n        this.updateRefetchInterval(this.computeRefetchInterval());\n    }\n    clearStaleTimeout() {\n        if (this.staleTimeoutId) {\n            clearTimeout(this.staleTimeoutId);\n            this.staleTimeoutId = undefined;\n        }\n    }\n    clearRefetchInterval() {\n        if (this.refetchIntervalId) {\n            clearInterval(this.refetchIntervalId);\n            this.refetchIntervalId = undefined;\n        }\n    }\n    createResult(query, options) {\n        const prevQuery = this.currentQuery;\n        const prevOptions = this.options;\n        const prevResult = this.currentResult;\n        const prevResultState = this.currentResultState;\n        const prevResultOptions = this.currentResultOptions;\n        const queryChange = query !== prevQuery;\n        const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n        const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n        const { state } = query;\n        let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state;\n        let isPreviousData = false;\n        let isPlaceholderData = false;\n        let data; // Optimistically set result in fetching state if needed\n        if (options._optimisticResults) {\n            const mounted = this.hasListeners();\n            const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n            const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n            if (fetchOnMount || fetchOptionally) {\n                fetchStatus = (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.canFetch)(query.options.networkMode) ? \"fetching\" : \"paused\";\n                if (!dataUpdatedAt) {\n                    status = \"loading\";\n                }\n            }\n            if (options._optimisticResults === \"isRestoring\") {\n                fetchStatus = \"idle\";\n            }\n        } // Keep previous data if needed\n        if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== \"error\") {\n            data = prevQueryResult.data;\n            dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n            status = prevQueryResult.status;\n            isPreviousData = true;\n        } else if (options.select && typeof state.data !== \"undefined\") {\n            // Memoize select result\n            if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n                data = this.selectResult;\n            } else {\n                try {\n                    this.selectFn = options.select;\n                    data = options.select(state.data);\n                    data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.replaceData)(prevResult == null ? void 0 : prevResult.data, data, options);\n                    this.selectResult = data;\n                    this.selectError = null;\n                } catch (selectError) {\n                    if (true) {\n                        this.client.getLogger().error(selectError);\n                    }\n                    this.selectError = selectError;\n                }\n            }\n        } else {\n            data = state.data;\n        } // Show placeholder data if needed\n        if (typeof options.placeholderData !== \"undefined\" && typeof data === \"undefined\" && status === \"loading\") {\n            let placeholderData; // Memoize placeholder data\n            if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n                placeholderData = prevResult.data;\n            } else {\n                placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData() : options.placeholderData;\n                if (options.select && typeof placeholderData !== \"undefined\") {\n                    try {\n                        placeholderData = options.select(placeholderData);\n                        this.selectError = null;\n                    } catch (selectError) {\n                        if (true) {\n                            this.client.getLogger().error(selectError);\n                        }\n                        this.selectError = selectError;\n                    }\n                }\n            }\n            if (typeof placeholderData !== \"undefined\") {\n                status = \"success\";\n                data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.replaceData)(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n                isPlaceholderData = true;\n            }\n        }\n        if (this.selectError) {\n            error = this.selectError;\n            data = this.selectResult;\n            errorUpdatedAt = Date.now();\n            status = \"error\";\n        }\n        const isFetching = fetchStatus === \"fetching\";\n        const isLoading = status === \"loading\";\n        const isError = status === \"error\";\n        const result = {\n            status,\n            fetchStatus,\n            isLoading,\n            isSuccess: status === \"success\",\n            isError,\n            isInitialLoading: isLoading && isFetching,\n            data,\n            dataUpdatedAt,\n            error,\n            errorUpdatedAt,\n            failureCount: state.fetchFailureCount,\n            failureReason: state.fetchFailureReason,\n            errorUpdateCount: state.errorUpdateCount,\n            isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n            isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n            isFetching,\n            isRefetching: isFetching && !isLoading,\n            isLoadingError: isError && state.dataUpdatedAt === 0,\n            isPaused: fetchStatus === \"paused\",\n            isPlaceholderData,\n            isPreviousData,\n            isRefetchError: isError && state.dataUpdatedAt !== 0,\n            isStale: isStale(query, options),\n            refetch: this.refetch,\n            remove: this.remove\n        };\n        return result;\n    }\n    updateResult(notifyOptions) {\n        const prevResult = this.currentResult;\n        const nextResult = this.createResult(this.currentQuery, this.options);\n        this.currentResultState = this.currentQuery.state;\n        this.currentResultOptions = this.options; // Only notify and update result if something has changed\n        if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(nextResult, prevResult)) {\n            return;\n        }\n        this.currentResult = nextResult; // Determine which callbacks to trigger\n        const defaultNotifyOptions = {\n            cache: true\n        };\n        const shouldNotifyListeners = ()=>{\n            if (!prevResult) {\n                return true;\n            }\n            const { notifyOnChangeProps } = this.options;\n            const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n            if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.trackedProps.size) {\n                return true;\n            }\n            const includedProps = new Set(notifyOnChangePropsValue != null ? notifyOnChangePropsValue : this.trackedProps);\n            if (this.options.useErrorBoundary) {\n                includedProps.add(\"error\");\n            }\n            return Object.keys(this.currentResult).some((key)=>{\n                const typedKey = key;\n                const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n                return changed && includedProps.has(typedKey);\n            });\n        };\n        if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n            defaultNotifyOptions.listeners = true;\n        }\n        this.notify({\n            ...defaultNotifyOptions,\n            ...notifyOptions\n        });\n    }\n    updateQuery() {\n        const query = this.client.getQueryCache().build(this.client, this.options);\n        if (query === this.currentQuery) {\n            return;\n        }\n        const prevQuery = this.currentQuery;\n        this.currentQuery = query;\n        this.currentQueryInitialState = query.state;\n        this.previousQueryResult = this.currentResult;\n        if (this.hasListeners()) {\n            prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n            query.addObserver(this);\n        }\n    }\n    onQueryUpdate(action) {\n        const notifyOptions = {};\n        if (action.type === \"success\") {\n            notifyOptions.onSuccess = !action.manual;\n        } else if (action.type === \"error\" && !(0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(action.error)) {\n            notifyOptions.onError = true;\n        }\n        this.updateResult(notifyOptions);\n        if (this.hasListeners()) {\n            this.updateTimers();\n        }\n    }\n    notify(notifyOptions) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__.notifyManager.batch(()=>{\n            // First trigger the configuration callbacks\n            if (notifyOptions.onSuccess) {\n                var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n                (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n                (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n            } else if (notifyOptions.onError) {\n                var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n                (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n                (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n            } // Then trigger the listeners\n            if (notifyOptions.listeners) {\n                this.listeners.forEach(({ listener })=>{\n                    listener(this.currentResult);\n                });\n            } // Then the cache listeners\n            if (notifyOptions.cache) {\n                this.client.getQueryCache().notify({\n                    query: this.currentQuery,\n                    type: \"observerResultsUpdated\"\n                });\n            }\n        });\n    }\n}\nfunction shouldLoadOnMount(query, options) {\n    return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n    return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n    if (options.enabled !== false) {\n        const value = typeof field === \"function\" ? field(query) : field;\n        return value === \"always\" || value !== false && isStale(query, options);\n    }\n    return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n    return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n    return query.isStaleByTime(options.staleTime);\n} // this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult, options) {\n    // it is important to keep this condition like this for three reasons:\n    // 1. It will get removed in the v5\n    // 2. it reads: don't update the properties if we want to keep the previous\n    // data.\n    // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n    // and will result in a bad decision\n    if (options.keepPreviousData) {\n        return false;\n    } // this means we want to put some placeholder data when pending and queryKey\n    // changed.\n    if (options.placeholderData !== undefined) {\n        // re-assign properties only if current data is placeholder data\n        // which means that data did not arrive yet, so, if there is some cached data\n        // we need to \"prepare\" to receive it\n        return optimisticResult.isPlaceholderData;\n    } // if the newly created result isn't what the observer is holding as current,\n    // then we'll need to update the properties as well\n    if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(observer.getCurrentResult(), optimisticResult)) {\n        return true;\n    } // basically, just keep previous properties if nothing changed\n    return false;\n}\n //# sourceMappingURL=queryObserver.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/queryObserver.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/removable.mjs":
/*!***********************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/removable.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Removable: () => (/* binding */ Removable)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\nclass Removable {\n    destroy() {\n        this.clearGcTimeout();\n    }\n    scheduleGc() {\n        this.clearGcTimeout();\n        if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidTimeout)(this.cacheTime)) {\n            this.gcTimeout = setTimeout(()=>{\n                this.optionalRemove();\n            }, this.cacheTime);\n        }\n    }\n    updateCacheTime(newCacheTime) {\n        // Default to 5 minutes (Infinity for server-side) if no cache time is set\n        this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isServer ? Infinity : 5 * 60 * 1000);\n    }\n    clearGcTimeout() {\n        if (this.gcTimeout) {\n            clearTimeout(this.gcTimeout);\n            this.gcTimeout = undefined;\n        }\n    }\n}\n //# sourceMappingURL=removable.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9yZW1vdmFibGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVEO0FBRXZELE1BQU1FO0lBQ0pDLFVBQVU7UUFDUixJQUFJLENBQUNDLGNBQWM7SUFDckI7SUFFQUMsYUFBYTtRQUNYLElBQUksQ0FBQ0QsY0FBYztRQUVuQixJQUFJSiwwREFBY0EsQ0FBQyxJQUFJLENBQUNNLFNBQVMsR0FBRztZQUNsQyxJQUFJLENBQUNDLFNBQVMsR0FBR0MsV0FBVztnQkFDMUIsSUFBSSxDQUFDQyxjQUFjO1lBQ3JCLEdBQUcsSUFBSSxDQUFDSCxTQUFTO1FBQ25CO0lBQ0Y7SUFFQUksZ0JBQWdCQyxZQUFZLEVBQUU7UUFDNUIsMEVBQTBFO1FBQzFFLElBQUksQ0FBQ0wsU0FBUyxHQUFHTSxLQUFLQyxHQUFHLENBQUMsSUFBSSxDQUFDUCxTQUFTLElBQUksR0FBR0ssZ0JBQWdCLE9BQU9BLGVBQWVWLGdEQUFRQSxHQUFHYSxXQUFXLElBQUksS0FBSztJQUN0SDtJQUVBVixpQkFBaUI7UUFDZixJQUFJLElBQUksQ0FBQ0csU0FBUyxFQUFFO1lBQ2xCUSxhQUFhLElBQUksQ0FBQ1IsU0FBUztZQUMzQixJQUFJLENBQUNBLFNBQVMsR0FBR1M7UUFDbkI7SUFDRjtBQUVGO0FBRXFCLENBQ3JCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLy4vYXBwL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9saWIvcmVtb3ZhYmxlLm1qcz82OTBiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVmFsaWRUaW1lb3V0LCBpc1NlcnZlciB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY2xhc3MgUmVtb3ZhYmxlIHtcbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmNsZWFyR2NUaW1lb3V0KCk7XG4gIH1cblxuICBzY2hlZHVsZUdjKCkge1xuICAgIHRoaXMuY2xlYXJHY1RpbWVvdXQoKTtcblxuICAgIGlmIChpc1ZhbGlkVGltZW91dCh0aGlzLmNhY2hlVGltZSkpIHtcbiAgICAgIHRoaXMuZ2NUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMub3B0aW9uYWxSZW1vdmUoKTtcbiAgICAgIH0sIHRoaXMuY2FjaGVUaW1lKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVDYWNoZVRpbWUobmV3Q2FjaGVUaW1lKSB7XG4gICAgLy8gRGVmYXVsdCB0byA1IG1pbnV0ZXMgKEluZmluaXR5IGZvciBzZXJ2ZXItc2lkZSkgaWYgbm8gY2FjaGUgdGltZSBpcyBzZXRcbiAgICB0aGlzLmNhY2hlVGltZSA9IE1hdGgubWF4KHRoaXMuY2FjaGVUaW1lIHx8IDAsIG5ld0NhY2hlVGltZSAhPSBudWxsID8gbmV3Q2FjaGVUaW1lIDogaXNTZXJ2ZXIgPyBJbmZpbml0eSA6IDUgKiA2MCAqIDEwMDApO1xuICB9XG5cbiAgY2xlYXJHY1RpbWVvdXQoKSB7XG4gICAgaWYgKHRoaXMuZ2NUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5nY1RpbWVvdXQpO1xuICAgICAgdGhpcy5nY1RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IHsgUmVtb3ZhYmxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmFibGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbImlzVmFsaWRUaW1lb3V0IiwiaXNTZXJ2ZXIiLCJSZW1vdmFibGUiLCJkZXN0cm95IiwiY2xlYXJHY1RpbWVvdXQiLCJzY2hlZHVsZUdjIiwiY2FjaGVUaW1lIiwiZ2NUaW1lb3V0Iiwic2V0VGltZW91dCIsIm9wdGlvbmFsUmVtb3ZlIiwidXBkYXRlQ2FjaGVUaW1lIiwibmV3Q2FjaGVUaW1lIiwiTWF0aCIsIm1heCIsIkluZmluaXR5IiwiY2xlYXJUaW1lb3V0IiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/removable.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/retryer.mjs":
/*!*********************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/retryer.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancelledError: () => (/* binding */ CancelledError),\n/* harmony export */   canFetch: () => (/* binding */ canFetch),\n/* harmony export */   createRetryer: () => (/* binding */ createRetryer),\n/* harmony export */   isCancelledError: () => (/* binding */ isCancelledError)\n/* harmony export */ });\n/* harmony import */ var _focusManager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./focusManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/focusManager.mjs\");\n/* harmony import */ var _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./onlineManager.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/onlineManager.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\n\nfunction defaultRetryDelay(failureCount) {\n    return Math.min(1000 * 2 ** failureCount, 30000);\n}\nfunction canFetch(networkMode) {\n    return (networkMode != null ? networkMode : \"online\") === \"online\" ? _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_0__.onlineManager.isOnline() : true;\n}\nclass CancelledError {\n    constructor(options){\n        this.revert = options == null ? void 0 : options.revert;\n        this.silent = options == null ? void 0 : options.silent;\n    }\n}\nfunction isCancelledError(value) {\n    return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n    let isRetryCancelled = false;\n    let failureCount = 0;\n    let isResolved = false;\n    let continueFn;\n    let promiseResolve;\n    let promiseReject;\n    const promise = new Promise((outerResolve, outerReject)=>{\n        promiseResolve = outerResolve;\n        promiseReject = outerReject;\n    });\n    const cancel = (cancelOptions)=>{\n        if (!isResolved) {\n            reject(new CancelledError(cancelOptions));\n            config.abort == null ? void 0 : config.abort();\n        }\n    };\n    const cancelRetry = ()=>{\n        isRetryCancelled = true;\n    };\n    const continueRetry = ()=>{\n        isRetryCancelled = false;\n    };\n    const shouldPause = ()=>!_focusManager_mjs__WEBPACK_IMPORTED_MODULE_1__.focusManager.isFocused() || config.networkMode !== \"always\" && !_onlineManager_mjs__WEBPACK_IMPORTED_MODULE_0__.onlineManager.isOnline();\n    const resolve = (value)=>{\n        if (!isResolved) {\n            isResolved = true;\n            config.onSuccess == null ? void 0 : config.onSuccess(value);\n            continueFn == null ? void 0 : continueFn();\n            promiseResolve(value);\n        }\n    };\n    const reject = (value)=>{\n        if (!isResolved) {\n            isResolved = true;\n            config.onError == null ? void 0 : config.onError(value);\n            continueFn == null ? void 0 : continueFn();\n            promiseReject(value);\n        }\n    };\n    const pause = ()=>{\n        return new Promise((continueResolve)=>{\n            continueFn = (value)=>{\n                const canContinue = isResolved || !shouldPause();\n                if (canContinue) {\n                    continueResolve(value);\n                }\n                return canContinue;\n            };\n            config.onPause == null ? void 0 : config.onPause();\n        }).then(()=>{\n            continueFn = undefined;\n            if (!isResolved) {\n                config.onContinue == null ? void 0 : config.onContinue();\n            }\n        });\n    }; // Create loop function\n    const run = ()=>{\n        // Do nothing if already resolved\n        if (isResolved) {\n            return;\n        }\n        let promiseOrValue; // Execute query\n        try {\n            promiseOrValue = config.fn();\n        } catch (error) {\n            promiseOrValue = Promise.reject(error);\n        }\n        Promise.resolve(promiseOrValue).then(resolve).catch((error)=>{\n            var _config$retry, _config$retryDelay;\n            // Stop if the fetch is already resolved\n            if (isResolved) {\n                return;\n            } // Do we need to retry the request?\n            const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n            const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n            const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n            const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n            if (isRetryCancelled || !shouldRetry) {\n                // We are done if the query does not need to be retried\n                reject(error);\n                return;\n            }\n            failureCount++; // Notify on fail\n            config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.sleep)(delay) // Pause if the document is not visible or when the device is offline\n            .then(()=>{\n                if (shouldPause()) {\n                    return pause();\n                }\n                return;\n            }).then(()=>{\n                if (isRetryCancelled) {\n                    reject(error);\n                } else {\n                    run();\n                }\n            });\n        });\n    }; // Start loop\n    if (canFetch(config.networkMode)) {\n        run();\n    } else {\n        pause().then(run);\n    }\n    return {\n        promise,\n        cancel,\n        continue: ()=>{\n            const didContinue = continueFn == null ? void 0 : continueFn();\n            return didContinue ? promise : Promise.resolve();\n        },\n        cancelRetry,\n        continueRetry\n    };\n}\n //# sourceMappingURL=retryer.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/retryer.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/subscribable.mjs":
/*!**************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/subscribable.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Subscribable: () => (/* binding */ Subscribable)\n/* harmony export */ });\nclass Subscribable {\n    constructor(){\n        this.listeners = new Set();\n        this.subscribe = this.subscribe.bind(this);\n    }\n    subscribe(listener) {\n        const identity = {\n            listener\n        };\n        this.listeners.add(identity);\n        this.onSubscribe();\n        return ()=>{\n            this.listeners.delete(identity);\n            this.onUnsubscribe();\n        };\n    }\n    hasListeners() {\n        return this.listeners.size > 0;\n    }\n    onSubscribe() {}\n    onUnsubscribe() {}\n}\n //# sourceMappingURL=subscribable.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9zdWJzY3JpYmFibGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQTtJQUNKQyxhQUFjO1FBQ1osSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSUM7UUFDckIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSSxDQUFDQSxTQUFTLENBQUNDLElBQUksQ0FBQyxJQUFJO0lBQzNDO0lBRUFELFVBQVVFLFFBQVEsRUFBRTtRQUNsQixNQUFNQyxXQUFXO1lBQ2ZEO1FBQ0Y7UUFDQSxJQUFJLENBQUNKLFNBQVMsQ0FBQ00sR0FBRyxDQUFDRDtRQUNuQixJQUFJLENBQUNFLFdBQVc7UUFDaEIsT0FBTztZQUNMLElBQUksQ0FBQ1AsU0FBUyxDQUFDUSxNQUFNLENBQUNIO1lBQ3RCLElBQUksQ0FBQ0ksYUFBYTtRQUNwQjtJQUNGO0lBRUFDLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQ1YsU0FBUyxDQUFDVyxJQUFJLEdBQUc7SUFDL0I7SUFFQUosY0FBYyxDQUNkO0lBRUFFLGdCQUFnQixDQUNoQjtBQUVGO0FBRXdCLENBQ3hCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLy4vYXBwL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9saWIvc3Vic2NyaWJhYmxlLm1qcz8wNWY5Il0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFN1YnNjcmliYWJsZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubGlzdGVuZXJzID0gbmV3IFNldCgpO1xuICAgIHRoaXMuc3Vic2NyaWJlID0gdGhpcy5zdWJzY3JpYmUuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGNvbnN0IGlkZW50aXR5ID0ge1xuICAgICAgbGlzdGVuZXJcbiAgICB9O1xuICAgIHRoaXMubGlzdGVuZXJzLmFkZChpZGVudGl0eSk7XG4gICAgdGhpcy5vblN1YnNjcmliZSgpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLmxpc3RlbmVycy5kZWxldGUoaWRlbnRpdHkpO1xuICAgICAgdGhpcy5vblVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfVxuXG4gIGhhc0xpc3RlbmVycygpIHtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc2l6ZSA+IDA7XG4gIH1cblxuICBvblN1YnNjcmliZSgpIHsvLyBEbyBub3RoaW5nXG4gIH1cblxuICBvblVuc3Vic2NyaWJlKCkgey8vIERvIG5vdGhpbmdcbiAgfVxuXG59XG5cbmV4cG9ydCB7IFN1YnNjcmliYWJsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJhYmxlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJTdWJzY3JpYmFibGUiLCJjb25zdHJ1Y3RvciIsImxpc3RlbmVycyIsIlNldCIsInN1YnNjcmliZSIsImJpbmQiLCJsaXN0ZW5lciIsImlkZW50aXR5IiwiYWRkIiwib25TdWJzY3JpYmUiLCJkZWxldGUiLCJvblVuc3Vic2NyaWJlIiwiaGFzTGlzdGVuZXJzIiwic2l6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/subscribable.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs":
/*!*******************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-core/build/lib/utils.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   functionalUpdate: () => (/* binding */ functionalUpdate),\n/* harmony export */   getAbortController: () => (/* binding */ getAbortController),\n/* harmony export */   hashQueryKey: () => (/* binding */ hashQueryKey),\n/* harmony export */   hashQueryKeyByOptions: () => (/* binding */ hashQueryKeyByOptions),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isPlainArray: () => (/* binding */ isPlainArray),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isQueryKey: () => (/* binding */ isQueryKey),\n/* harmony export */   isServer: () => (/* binding */ isServer),\n/* harmony export */   isValidTimeout: () => (/* binding */ isValidTimeout),\n/* harmony export */   matchMutation: () => (/* binding */ matchMutation),\n/* harmony export */   matchQuery: () => (/* binding */ matchQuery),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   parseFilterArgs: () => (/* binding */ parseFilterArgs),\n/* harmony export */   parseMutationArgs: () => (/* binding */ parseMutationArgs),\n/* harmony export */   parseMutationFilterArgs: () => (/* binding */ parseMutationFilterArgs),\n/* harmony export */   parseQueryArgs: () => (/* binding */ parseQueryArgs),\n/* harmony export */   partialDeepEqual: () => (/* binding */ partialDeepEqual),\n/* harmony export */   partialMatchKey: () => (/* binding */ partialMatchKey),\n/* harmony export */   replaceAt: () => (/* binding */ replaceAt),\n/* harmony export */   replaceData: () => (/* binding */ replaceData),\n/* harmony export */   replaceEqualDeep: () => (/* binding */ replaceEqualDeep),\n/* harmony export */   scheduleMicrotask: () => (/* binding */ scheduleMicrotask),\n/* harmony export */   shallowEqualObjects: () => (/* binding */ shallowEqualObjects),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   timeUntilStale: () => (/* binding */ timeUntilStale)\n/* harmony export */ });\n// TYPES\n// UTILS\nconst isServer =  true || 0;\nfunction noop() {\n    return undefined;\n}\nfunction functionalUpdate(updater, input) {\n    return typeof updater === \"function\" ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n    return typeof value === \"number\" && value >= 0 && value !== Infinity;\n}\nfunction difference(array1, array2) {\n    return array1.filter((x)=>!array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n    const copy = array.slice(0);\n    copy[index] = value;\n    return copy;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n    return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n    if (!isQueryKey(arg1)) {\n        return arg1;\n    }\n    if (typeof arg2 === \"function\") {\n        return {\n            ...arg3,\n            queryKey: arg1,\n            queryFn: arg2\n        };\n    }\n    return {\n        ...arg2,\n        queryKey: arg1\n    };\n}\nfunction parseMutationArgs(arg1, arg2, arg3) {\n    if (isQueryKey(arg1)) {\n        if (typeof arg2 === \"function\") {\n            return {\n                ...arg3,\n                mutationKey: arg1,\n                mutationFn: arg2\n            };\n        }\n        return {\n            ...arg2,\n            mutationKey: arg1\n        };\n    }\n    if (typeof arg1 === \"function\") {\n        return {\n            ...arg2,\n            mutationFn: arg1\n        };\n    }\n    return {\n        ...arg1\n    };\n}\nfunction parseFilterArgs(arg1, arg2, arg3) {\n    return isQueryKey(arg1) ? [\n        {\n            ...arg2,\n            queryKey: arg1\n        },\n        arg3\n    ] : [\n        arg1 || {},\n        arg2\n    ];\n}\nfunction parseMutationFilterArgs(arg1, arg2, arg3) {\n    return isQueryKey(arg1) ? [\n        {\n            ...arg2,\n            mutationKey: arg1\n        },\n        arg3\n    ] : [\n        arg1 || {},\n        arg2\n    ];\n}\nfunction matchQuery(filters, query) {\n    const { type = \"all\", exact, fetchStatus, predicate, queryKey, stale } = filters;\n    if (isQueryKey(queryKey)) {\n        if (exact) {\n            if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n                return false;\n            }\n        } else if (!partialMatchKey(query.queryKey, queryKey)) {\n            return false;\n        }\n    }\n    if (type !== \"all\") {\n        const isActive = query.isActive();\n        if (type === \"active\" && !isActive) {\n            return false;\n        }\n        if (type === \"inactive\" && isActive) {\n            return false;\n        }\n    }\n    if (typeof stale === \"boolean\" && query.isStale() !== stale) {\n        return false;\n    }\n    if (typeof fetchStatus !== \"undefined\" && fetchStatus !== query.state.fetchStatus) {\n        return false;\n    }\n    if (predicate && !predicate(query)) {\n        return false;\n    }\n    return true;\n}\nfunction matchMutation(filters, mutation) {\n    const { exact, fetching, predicate, mutationKey } = filters;\n    if (isQueryKey(mutationKey)) {\n        if (!mutation.options.mutationKey) {\n            return false;\n        }\n        if (exact) {\n            if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {\n                return false;\n            }\n        } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n            return false;\n        }\n    }\n    if (typeof fetching === \"boolean\" && mutation.state.status === \"loading\" !== fetching) {\n        return false;\n    }\n    if (predicate && !predicate(mutation)) {\n        return false;\n    }\n    return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n    const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;\n    return hashFn(queryKey);\n}\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */ function hashQueryKey(queryKey) {\n    return JSON.stringify(queryKey, (_, val)=>isPlainObject(val) ? Object.keys(val).sort().reduce((result, key)=>{\n            result[key] = val[key];\n            return result;\n        }, {}) : val);\n}\n/**\n * Checks if key `b` partially matches with key `a`.\n */ function partialMatchKey(a, b) {\n    return partialDeepEqual(a, b);\n}\n/**\n * Checks if `b` partially matches with `a`.\n */ function partialDeepEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (typeof a !== typeof b) {\n        return false;\n    }\n    if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n        return !Object.keys(b).some((key)=>!partialDeepEqual(a[key], b[key]));\n    }\n    return false;\n}\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */ function replaceEqualDeep(a, b) {\n    if (a === b) {\n        return a;\n    }\n    const array = isPlainArray(a) && isPlainArray(b);\n    if (array || isPlainObject(a) && isPlainObject(b)) {\n        const aSize = array ? a.length : Object.keys(a).length;\n        const bItems = array ? b : Object.keys(b);\n        const bSize = bItems.length;\n        const copy = array ? [] : {};\n        let equalItems = 0;\n        for(let i = 0; i < bSize; i++){\n            const key = array ? i : bItems[i];\n            copy[key] = replaceEqualDeep(a[key], b[key]);\n            if (copy[key] === a[key]) {\n                equalItems++;\n            }\n        }\n        return aSize === bSize && equalItems === aSize ? a : copy;\n    }\n    return b;\n}\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */ function shallowEqualObjects(a, b) {\n    if (a && !b || b && !a) {\n        return false;\n    }\n    for(const key in a){\n        if (a[key] !== b[key]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isPlainArray(value) {\n    return Array.isArray(value) && value.length === Object.keys(value).length;\n} // Copied from: https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o) {\n    if (!hasObjectPrototype(o)) {\n        return false;\n    } // If has modified constructor\n    const ctor = o.constructor;\n    if (typeof ctor === \"undefined\") {\n        return true;\n    } // If has modified prototype\n    const prot = ctor.prototype;\n    if (!hasObjectPrototype(prot)) {\n        return false;\n    } // If constructor does not have an Object-specific method\n    if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n        return false;\n    } // Most likely a plain Object\n    return true;\n}\nfunction hasObjectPrototype(o) {\n    return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction isQueryKey(value) {\n    return Array.isArray(value);\n}\nfunction isError(value) {\n    return value instanceof Error;\n}\nfunction sleep(timeout) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, timeout);\n    });\n}\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */ function scheduleMicrotask(callback) {\n    sleep(0).then(callback);\n}\nfunction getAbortController() {\n    if (typeof AbortController === \"function\") {\n        return new AbortController();\n    }\n    return;\n}\nfunction replaceData(prevData, data, options) {\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {\n        return prevData;\n    } else if (typeof options.structuralSharing === \"function\") {\n        return options.structuralSharing(prevData, data);\n    } else if (options.structuralSharing !== false) {\n        // Structurally share data between prev and new data if needed\n        return replaceEqualDeep(prevData, data);\n    }\n    return data;\n}\n //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs":
/*!************************************************************************************!*\
  !*** ./app/node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   persistQueryClient: () => (/* binding */ persistQueryClient),\n/* harmony export */   persistQueryClientRestore: () => (/* binding */ persistQueryClientRestore),\n/* harmony export */   persistQueryClientSave: () => (/* binding */ persistQueryClientSave),\n/* harmony export */   persistQueryClientSubscribe: () => (/* binding */ persistQueryClientSubscribe)\n/* harmony export */ });\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/hydration.mjs\");\n\n/**\n * Checks if emitted event is about cache change and not about observers.\n * Useful for persist, where we only want to trigger save when cache is changed.\n */ const cacheableEventTypes = [\n    \"added\",\n    \"removed\",\n    \"updated\"\n];\nfunction isCacheableEventType(eventType) {\n    return cacheableEventTypes.includes(eventType);\n}\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */ async function persistQueryClientRestore({ queryClient, persister, maxAge = 1000 * 60 * 60 * 24, buster = \"\", hydrateOptions }) {\n    try {\n        const persistedClient = await persister.restoreClient();\n        if (persistedClient) {\n            if (persistedClient.timestamp) {\n                const expired = Date.now() - persistedClient.timestamp > maxAge;\n                const busted = persistedClient.buster !== buster;\n                if (expired || busted) {\n                    persister.removeClient();\n                } else {\n                    (0,_tanstack_query_core__WEBPACK_IMPORTED_MODULE_0__.hydrate)(queryClient, persistedClient.clientState, hydrateOptions);\n                }\n            } else {\n                persister.removeClient();\n            }\n        }\n    } catch (err) {\n        if (true) {\n            queryClient.getLogger().error(err);\n            queryClient.getLogger().warn(\"Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.\");\n        }\n        persister.removeClient();\n    }\n}\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */ async function persistQueryClientSave({ queryClient, persister, buster = \"\", dehydrateOptions }) {\n    const persistClient = {\n        buster,\n        timestamp: Date.now(),\n        clientState: (0,_tanstack_query_core__WEBPACK_IMPORTED_MODULE_0__.dehydrate)(queryClient, dehydrateOptions)\n    };\n    await persister.persistClient(persistClient);\n}\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */ function persistQueryClientSubscribe(props) {\n    const unsubscribeQueryCache = props.queryClient.getQueryCache().subscribe((event)=>{\n        if (isCacheableEventType(event.type)) {\n            persistQueryClientSave(props);\n        }\n    });\n    const unusbscribeMutationCache = props.queryClient.getMutationCache().subscribe((event)=>{\n        if (isCacheableEventType(event.type)) {\n            persistQueryClientSave(props);\n        }\n    });\n    return ()=>{\n        unsubscribeQueryCache();\n        unusbscribeMutationCache();\n    };\n}\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */ function persistQueryClient(props) {\n    let hasUnsubscribed = false;\n    let persistQueryClientUnsubscribe;\n    const unsubscribe = ()=>{\n        hasUnsubscribed = true;\n        persistQueryClientUnsubscribe == null ? void 0 : persistQueryClientUnsubscribe();\n    }; // Attempt restore\n    const restorePromise = persistQueryClientRestore(props).then(()=>{\n        if (!hasUnsubscribed) {\n            // Subscribe to changes in the query cache to trigger the save\n            persistQueryClientUnsubscribe = persistQueryClientSubscribe(props);\n        }\n    });\n    return [\n        unsubscribe,\n        restorePromise\n    ];\n}\n //# sourceMappingURL=persist.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs":
/*!**********************************************************************************!*\
  !*** ./app/node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryClientProvider: () => (/* binding */ QueryClientProvider),\n/* harmony export */   defaultContext: () => (/* binding */ defaultContext),\n/* harmony export */   useQueryClient: () => (/* binding */ useQueryClient)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ QueryClientProvider,defaultContext,useQueryClient auto */ \nconst defaultContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(context, contextSharing) {\n    if (context) {\n        return context;\n    }\n    if (contextSharing && \"undefined\" !== \"undefined\") {}\n    return defaultContext;\n}\nconst useQueryClient = ({ context } = {})=>{\n    const queryClient = react__WEBPACK_IMPORTED_MODULE_0__.useContext(getQueryClientContext(context, react__WEBPACK_IMPORTED_MODULE_0__.useContext(QueryClientSharingContext)));\n    if (!queryClient) {\n        throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n    }\n    return queryClient;\n};\nconst QueryClientProvider = ({ client, children, context, contextSharing = false })=>{\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        client.mount();\n        return ()=>{\n            client.unmount();\n        };\n    }, [\n        client\n    ]);\n    if ( true && contextSharing) {\n        client.getLogger().error(\"The contextSharing option has been deprecated and will be removed in the next major version\");\n    }\n    const Context = getQueryClientContext(context, contextSharing);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QueryClientSharingContext.Provider, {\n        value: !context && contextSharing\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Context.Provider, {\n        value: client\n    }, children));\n};\n //# sourceMappingURL=QueryClientProvider.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvUXVlcnlDbGllbnRQcm92aWRlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt1R0FDK0I7QUFFL0IsTUFBTUMsaUJBQWlCLFdBQVcsR0FBRUQsZ0RBQW1CLENBQUNHO0FBQ3hELE1BQU1DLDRCQUE0QixXQUFXLEdBQUVKLGdEQUFtQixDQUFDLFFBQVEsNkNBQTZDO0FBQ3hILDBFQUEwRTtBQUMxRSw0Q0FBNEM7QUFDNUMsK0NBQStDO0FBQy9DLGdEQUFnRDtBQUNoRCx1REFBdUQ7QUFDdkQscUJBQXFCO0FBRXJCLFNBQVNLLHNCQUFzQkMsT0FBTyxFQUFFQyxjQUFjO0lBQ3BELElBQUlELFNBQVM7UUFDWCxPQUFPQTtJQUNUO0lBRUEsSUFBSUMsa0JBQWtCLGdCQUFrQixhQUFhLEVBTXBEO0lBRUQsT0FBT047QUFDVDtBQUVBLE1BQU1TLGlCQUFpQixDQUFDLEVBQ3RCSixPQUFPLEVBQ1IsR0FBRyxDQUFDLENBQUM7SUFDSixNQUFNSyxjQUFjWCw2Q0FBZ0IsQ0FBQ0ssc0JBQXNCQyxTQUFTTiw2Q0FBZ0IsQ0FBQ0k7SUFFckYsSUFBSSxDQUFDTyxhQUFhO1FBQ2hCLE1BQU0sSUFBSUUsTUFBTTtJQUNsQjtJQUVBLE9BQU9GO0FBQ1Q7QUFDQSxNQUFNRyxzQkFBc0IsQ0FBQyxFQUMzQkMsTUFBTSxFQUNOQyxRQUFRLEVBQ1JWLE9BQU8sRUFDUEMsaUJBQWlCLEtBQUssRUFDdkI7SUFDQ1AsNENBQWUsQ0FBQztRQUNkZSxPQUFPRyxLQUFLO1FBQ1osT0FBTztZQUNMSCxPQUFPSSxPQUFPO1FBQ2hCO0lBQ0YsR0FBRztRQUFDSjtLQUFPO0lBRVgsSUFBSUssS0FBeUIsSUFBZ0JiLGdCQUFnQjtRQUMzRFEsT0FBT00sU0FBUyxHQUFHQyxLQUFLLENBQUM7SUFDM0I7SUFFQSxNQUFNQyxVQUFVbEIsc0JBQXNCQyxTQUFTQztJQUMvQyxPQUFPLFdBQVcsR0FBRVAsZ0RBQW1CLENBQUNJLDBCQUEwQnFCLFFBQVEsRUFBRTtRQUMxRUMsT0FBTyxDQUFDcEIsV0FBV0M7SUFDckIsR0FBRyxXQUFXLEdBQUVQLGdEQUFtQixDQUFDdUIsUUFBUUUsUUFBUSxFQUFFO1FBQ3BEQyxPQUFPWDtJQUNULEdBQUdDO0FBQ0w7QUFFK0QsQ0FDL0QsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvUXVlcnlDbGllbnRQcm92aWRlci5tanM/ZThhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IGRlZmF1bHRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcbmNvbnN0IFF1ZXJ5Q2xpZW50U2hhcmluZ0NvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChmYWxzZSk7IC8vIElmIHdlIGFyZSBnaXZlbiBhIGNvbnRleHQsIHdlIHdpbGwgdXNlIGl0LlxuLy8gT3RoZXJ3aXNlLCBpZiBjb250ZXh0U2hhcmluZyBpcyBvbiwgd2Ugc2hhcmUgdGhlIGZpcnN0IGFuZCBhdCBsZWFzdCBvbmVcbi8vIGluc3RhbmNlIG9mIHRoZSBjb250ZXh0IGFjcm9zcyB0aGUgd2luZG93XG4vLyB0byBlbnN1cmUgdGhhdCBpZiBSZWFjdCBRdWVyeSBpcyB1c2VkIGFjcm9zc1xuLy8gZGlmZmVyZW50IGJ1bmRsZXMgb3IgbWljcm9mcm9udGVuZHMgdGhleSB3aWxsXG4vLyBhbGwgdXNlIHRoZSBzYW1lICoqaW5zdGFuY2UqKiBvZiBjb250ZXh0LCByZWdhcmRsZXNzXG4vLyBvZiBtb2R1bGUgc2NvcGluZy5cblxuZnVuY3Rpb24gZ2V0UXVlcnlDbGllbnRDb250ZXh0KGNvbnRleHQsIGNvbnRleHRTaGFyaW5nKSB7XG4gIGlmIChjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH1cblxuICBpZiAoY29udGV4dFNoYXJpbmcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoIXdpbmRvdy5SZWFjdFF1ZXJ5Q2xpZW50Q29udGV4dCkge1xuICAgICAgd2luZG93LlJlYWN0UXVlcnlDbGllbnRDb250ZXh0ID0gZGVmYXVsdENvbnRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdpbmRvdy5SZWFjdFF1ZXJ5Q2xpZW50Q29udGV4dDtcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0Q29udGV4dDtcbn1cblxuY29uc3QgdXNlUXVlcnlDbGllbnQgPSAoe1xuICBjb250ZXh0XG59ID0ge30pID0+IHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSBSZWFjdC51c2VDb250ZXh0KGdldFF1ZXJ5Q2xpZW50Q29udGV4dChjb250ZXh0LCBSZWFjdC51c2VDb250ZXh0KFF1ZXJ5Q2xpZW50U2hhcmluZ0NvbnRleHQpKSk7XG5cbiAgaWYgKCFxdWVyeUNsaWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gUXVlcnlDbGllbnQgc2V0LCB1c2UgUXVlcnlDbGllbnRQcm92aWRlciB0byBzZXQgb25lJyk7XG4gIH1cblxuICByZXR1cm4gcXVlcnlDbGllbnQ7XG59O1xuY29uc3QgUXVlcnlDbGllbnRQcm92aWRlciA9ICh7XG4gIGNsaWVudCxcbiAgY2hpbGRyZW4sXG4gIGNvbnRleHQsXG4gIGNvbnRleHRTaGFyaW5nID0gZmFsc2Vcbn0pID0+IHtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjbGllbnQubW91bnQoKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xpZW50LnVubW91bnQoKTtcbiAgICB9O1xuICB9LCBbY2xpZW50XSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29udGV4dFNoYXJpbmcpIHtcbiAgICBjbGllbnQuZ2V0TG9nZ2VyKCkuZXJyb3IoXCJUaGUgY29udGV4dFNoYXJpbmcgb3B0aW9uIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXCIpO1xuICB9XG5cbiAgY29uc3QgQ29udGV4dCA9IGdldFF1ZXJ5Q2xpZW50Q29udGV4dChjb250ZXh0LCBjb250ZXh0U2hhcmluZyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChRdWVyeUNsaWVudFNoYXJpbmdDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6ICFjb250ZXh0ICYmIGNvbnRleHRTaGFyaW5nXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2xpZW50XG4gIH0sIGNoaWxkcmVuKSk7XG59O1xuXG5leHBvcnQgeyBRdWVyeUNsaWVudFByb3ZpZGVyLCBkZWZhdWx0Q29udGV4dCwgdXNlUXVlcnlDbGllbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVF1ZXJ5Q2xpZW50UHJvdmlkZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiZGVmYXVsdENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidW5kZWZpbmVkIiwiUXVlcnlDbGllbnRTaGFyaW5nQ29udGV4dCIsImdldFF1ZXJ5Q2xpZW50Q29udGV4dCIsImNvbnRleHQiLCJjb250ZXh0U2hhcmluZyIsIndpbmRvdyIsIlJlYWN0UXVlcnlDbGllbnRDb250ZXh0IiwidXNlUXVlcnlDbGllbnQiLCJxdWVyeUNsaWVudCIsInVzZUNvbnRleHQiLCJFcnJvciIsIlF1ZXJ5Q2xpZW50UHJvdmlkZXIiLCJjbGllbnQiLCJjaGlsZHJlbiIsInVzZUVmZmVjdCIsIm1vdW50IiwidW5tb3VudCIsInByb2Nlc3MiLCJnZXRMb2dnZXIiLCJlcnJvciIsIkNvbnRleHQiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs":
/*!**************************************************************************************!*\
  !*** ./app/node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryErrorResetBoundary: () => (/* binding */ QueryErrorResetBoundary),\n/* harmony export */   useQueryErrorResetBoundary: () => (/* binding */ useQueryErrorResetBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ QueryErrorResetBoundary,useQueryErrorResetBoundary auto */ \nfunction createValue() {\n    let isReset = false;\n    return {\n        clearReset: ()=>{\n            isReset = false;\n        },\n        reset: ()=>{\n            isReset = true;\n        },\n        isReset: ()=>{\n            return isReset;\n        }\n    };\n}\nconst QueryErrorResetBoundaryContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(createValue()); // HOOK\nconst useQueryErrorResetBoundary = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(QueryErrorResetBoundaryContext); // COMPONENT\nconst QueryErrorResetBoundary = ({ children })=>{\n    const [value] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>createValue());\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QueryErrorResetBoundaryContext.Provider, {\n        value: value\n    }, typeof children === \"function\" ? children(value) : children);\n};\n //# sourceMappingURL=QueryErrorResetBoundary.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozt3R0FDK0I7QUFFL0IsU0FBU0M7SUFDUCxJQUFJQyxVQUFVO0lBQ2QsT0FBTztRQUNMQyxZQUFZO1lBQ1ZELFVBQVU7UUFDWjtRQUNBRSxPQUFPO1lBQ0xGLFVBQVU7UUFDWjtRQUNBQSxTQUFTO1lBQ1AsT0FBT0E7UUFDVDtJQUNGO0FBQ0Y7QUFFQSxNQUFNRyxpQ0FBaUMsV0FBVyxHQUFFTCxnREFBbUIsQ0FBQ0MsZ0JBQWdCLE9BQU87QUFFL0YsTUFBTU0sNkJBQTZCLElBQU1QLDZDQUFnQixDQUFDSyxpQ0FBaUMsWUFBWTtBQUV2RyxNQUFNSSwwQkFBMEIsQ0FBQyxFQUMvQkMsUUFBUSxFQUNUO0lBQ0MsTUFBTSxDQUFDQyxNQUFNLEdBQUdYLDJDQUFjLENBQUMsSUFBTUM7SUFDckMsT0FBTyxXQUFXLEdBQUVELGdEQUFtQixDQUFDSywrQkFBK0JTLFFBQVEsRUFBRTtRQUMvRUgsT0FBT0E7SUFDVCxHQUFHLE9BQU9ELGFBQWEsYUFBYUEsU0FBU0MsU0FBU0Q7QUFDeEQ7QUFFK0QsQ0FDL0Qsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkubWpzPzc1OGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBjcmVhdGVWYWx1ZSgpIHtcbiAgbGV0IGlzUmVzZXQgPSBmYWxzZTtcbiAgcmV0dXJuIHtcbiAgICBjbGVhclJlc2V0OiAoKSA9PiB7XG4gICAgICBpc1Jlc2V0ID0gZmFsc2U7XG4gICAgfSxcbiAgICByZXNldDogKCkgPT4ge1xuICAgICAgaXNSZXNldCA9IHRydWU7XG4gICAgfSxcbiAgICBpc1Jlc2V0OiAoKSA9PiB7XG4gICAgICByZXR1cm4gaXNSZXNldDtcbiAgICB9XG4gIH07XG59XG5cbmNvbnN0IFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGNyZWF0ZVZhbHVlKCkpOyAvLyBIT09LXG5cbmNvbnN0IHVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5ID0gKCkgPT4gUmVhY3QudXNlQ29udGV4dChRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQpOyAvLyBDT01QT05FTlRcblxuY29uc3QgUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkgPSAoe1xuICBjaGlsZHJlblxufSkgPT4ge1xuICBjb25zdCBbdmFsdWVdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gY3JlYXRlVmFsdWUoKSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4odmFsdWUpIDogY2hpbGRyZW4pO1xufTtcblxuZXhwb3J0IHsgUXVlcnlFcnJvclJlc2V0Qm91bmRhcnksIHVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWVyeUVycm9yUmVzZXRCb3VuZGFyeS5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVWYWx1ZSIsImlzUmVzZXQiLCJjbGVhclJlc2V0IiwicmVzZXQiLCJRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkiLCJ1c2VDb250ZXh0IiwiUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkiLCJjaGlsZHJlbiIsInZhbHVlIiwidXNlU3RhdGUiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/react-query/build/lib/isRestoring.mjs":
/*!**************************************************************************!*\
  !*** ./app/node_modules/@tanstack/react-query/build/lib/isRestoring.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IsRestoringProvider: () => (/* binding */ IsRestoringProvider),\n/* harmony export */   useIsRestoring: () => (/* binding */ useIsRestoring)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ IsRestoringProvider,useIsRestoring auto */ \nconst IsRestoringContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(false);\nconst useIsRestoring = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(IsRestoringContext);\nconst IsRestoringProvider = IsRestoringContext.Provider;\n //# sourceMappingURL=isRestoring.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvaXNSZXN0b3JpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozt3RkFDK0I7QUFFL0IsTUFBTUMscUJBQXFCLFdBQVcsR0FBRUQsZ0RBQW1CLENBQUM7QUFDNUQsTUFBTUcsaUJBQWlCLElBQU1ILDZDQUFnQixDQUFDQztBQUM5QyxNQUFNSSxzQkFBc0JKLG1CQUFtQkssUUFBUTtBQUVSLENBQy9DLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLy4vYXBwL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbGliL2lzUmVzdG9yaW5nLm1qcz80ZjllIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgSXNSZXN0b3JpbmdDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoZmFsc2UpO1xuY29uc3QgdXNlSXNSZXN0b3JpbmcgPSAoKSA9PiBSZWFjdC51c2VDb250ZXh0KElzUmVzdG9yaW5nQ29udGV4dCk7XG5jb25zdCBJc1Jlc3RvcmluZ1Byb3ZpZGVyID0gSXNSZXN0b3JpbmdDb250ZXh0LlByb3ZpZGVyO1xuXG5leHBvcnQgeyBJc1Jlc3RvcmluZ1Byb3ZpZGVyLCB1c2VJc1Jlc3RvcmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZXN0b3JpbmcubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiSXNSZXN0b3JpbmdDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVzZUlzUmVzdG9yaW5nIiwidXNlQ29udGV4dCIsIklzUmVzdG9yaW5nUHJvdmlkZXIiLCJQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/react-query/build/lib/isRestoring.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/react-query/build/lib/useMutation.mjs":
/*!**************************************************************************!*\
  !*** ./app/node_modules/@tanstack/react-query/build/lib/useMutation.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMutation: () => (/* binding */ useMutation)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./app/node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _useSyncExternalStore_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useSyncExternalStore.mjs */ \"(ssr)/./app/node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs\");\n/* harmony import */ var _QueryClientProvider_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./QueryClientProvider.mjs */ \"(ssr)/./app/node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./app/node_modules/@tanstack/react-query/build/lib/utils.mjs\");\n/* __next_internal_client_entry_do_not_use__ useMutation auto */ \n\n\n\n\nfunction useMutation(arg1, arg2, arg3) {\n    const options = (0,_tanstack_query_core__WEBPACK_IMPORTED_MODULE_1__.parseMutationArgs)(arg1, arg2, arg3);\n    const queryClient = (0,_QueryClientProvider_mjs__WEBPACK_IMPORTED_MODULE_2__.useQueryClient)({\n        context: options.context\n    });\n    const [observer] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new _tanstack_query_core__WEBPACK_IMPORTED_MODULE_3__.MutationObserver(queryClient, options));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        observer.setOptions(options);\n    }, [\n        observer,\n        options\n    ]);\n    const result = (0,_useSyncExternalStore_mjs__WEBPACK_IMPORTED_MODULE_4__.useSyncExternalStore)(react__WEBPACK_IMPORTED_MODULE_0__.useCallback((onStoreChange)=>observer.subscribe(_tanstack_query_core__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batchCalls(onStoreChange)), [\n        observer\n    ]), ()=>observer.getCurrentResult(), ()=>observer.getCurrentResult());\n    const mutate = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((variables, mutateOptions)=>{\n        observer.mutate(variables, mutateOptions).catch(noop);\n    }, [\n        observer\n    ]);\n    if (result.error && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.shouldThrowError)(observer.options.useErrorBoundary, [\n        result.error\n    ])) {\n        throw result.error;\n    }\n    return {\n        ...result,\n        mutate,\n        mutateAsync: result.mutate\n    };\n} // eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n //# sourceMappingURL=useMutation.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvdXNlTXV0YXRpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O2lFQUMrQjtBQUMyRDtBQUN4QjtBQUNQO0FBQ1o7QUFFL0MsU0FBU08sWUFBWUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUk7SUFDbkMsTUFBTUMsVUFBVVYsdUVBQWlCQSxDQUFDTyxNQUFNQyxNQUFNQztJQUM5QyxNQUFNRSxjQUFjUCx3RUFBY0EsQ0FBQztRQUNqQ1EsU0FBU0YsUUFBUUUsT0FBTztJQUMxQjtJQUNBLE1BQU0sQ0FBQ0MsU0FBUyxHQUFHZCwyQ0FBYyxDQUFDLElBQU0sSUFBSUUsa0VBQWdCQSxDQUFDVSxhQUFhRDtJQUMxRVgsNENBQWUsQ0FBQztRQUNkYyxTQUFTRyxVQUFVLENBQUNOO0lBQ3RCLEdBQUc7UUFBQ0c7UUFBVUg7S0FBUTtJQUN0QixNQUFNTyxTQUFTZCwrRUFBb0JBLENBQUNKLDhDQUFpQixDQUFDb0IsQ0FBQUEsZ0JBQWlCTixTQUFTTyxTQUFTLENBQUNsQiwrREFBYUEsQ0FBQ21CLFVBQVUsQ0FBQ0YsaUJBQWlCO1FBQUNOO0tBQVMsR0FBRyxJQUFNQSxTQUFTUyxnQkFBZ0IsSUFBSSxJQUFNVCxTQUFTUyxnQkFBZ0I7SUFDbk4sTUFBTUMsU0FBU3hCLDhDQUFpQixDQUFDLENBQUN5QixXQUFXQztRQUMzQ1osU0FBU1UsTUFBTSxDQUFDQyxXQUFXQyxlQUFlQyxLQUFLLENBQUNDO0lBQ2xELEdBQUc7UUFBQ2Q7S0FBUztJQUViLElBQUlJLE9BQU9XLEtBQUssSUFBSXZCLDREQUFnQkEsQ0FBQ1EsU0FBU0gsT0FBTyxDQUFDbUIsZ0JBQWdCLEVBQUU7UUFBQ1osT0FBT1csS0FBSztLQUFDLEdBQUc7UUFDdkYsTUFBTVgsT0FBT1csS0FBSztJQUNwQjtJQUVBLE9BQU87UUFBRSxHQUFHWCxNQUFNO1FBQ2hCTTtRQUNBTyxhQUFhYixPQUFPTSxNQUFNO0lBQzVCO0FBQ0YsRUFBRSxnRUFBZ0U7QUFFbEUsU0FBU0ksUUFBUTtBQUVNLENBQ3ZCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLy4vYXBwL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbGliL3VzZU11dGF0aW9uLm1qcz81Y2JjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHBhcnNlTXV0YXRpb25BcmdzLCBNdXRhdGlvbk9ic2VydmVyLCBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmUgfSBmcm9tICcuL3VzZVN5bmNFeHRlcm5hbFN0b3JlLm1qcyc7XG5pbXBvcnQgeyB1c2VRdWVyeUNsaWVudCB9IGZyb20gJy4vUXVlcnlDbGllbnRQcm92aWRlci5tanMnO1xuaW1wb3J0IHsgc2hvdWxkVGhyb3dFcnJvciB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gdXNlTXV0YXRpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICBjb25zdCBvcHRpb25zID0gcGFyc2VNdXRhdGlvbkFyZ3MoYXJnMSwgYXJnMiwgYXJnMyk7XG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlDbGllbnQoe1xuICAgIGNvbnRleHQ6IG9wdGlvbnMuY29udGV4dFxuICB9KTtcbiAgY29uc3QgW29ic2VydmVyXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IG5ldyBNdXRhdGlvbk9ic2VydmVyKHF1ZXJ5Q2xpZW50LCBvcHRpb25zKSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgb2JzZXJ2ZXIuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgfSwgW29ic2VydmVyLCBvcHRpb25zXSk7XG4gIGNvbnN0IHJlc3VsdCA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKFJlYWN0LnVzZUNhbGxiYWNrKG9uU3RvcmVDaGFuZ2UgPT4gb2JzZXJ2ZXIuc3Vic2NyaWJlKG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscyhvblN0b3JlQ2hhbmdlKSksIFtvYnNlcnZlcl0pLCAoKSA9PiBvYnNlcnZlci5nZXRDdXJyZW50UmVzdWx0KCksICgpID0+IG9ic2VydmVyLmdldEN1cnJlbnRSZXN1bHQoKSk7XG4gIGNvbnN0IG11dGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCh2YXJpYWJsZXMsIG11dGF0ZU9wdGlvbnMpID0+IHtcbiAgICBvYnNlcnZlci5tdXRhdGUodmFyaWFibGVzLCBtdXRhdGVPcHRpb25zKS5jYXRjaChub29wKTtcbiAgfSwgW29ic2VydmVyXSk7XG5cbiAgaWYgKHJlc3VsdC5lcnJvciAmJiBzaG91bGRUaHJvd0Vycm9yKG9ic2VydmVyLm9wdGlvbnMudXNlRXJyb3JCb3VuZGFyeSwgW3Jlc3VsdC5lcnJvcl0pKSB7XG4gICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICB9XG5cbiAgcmV0dXJuIHsgLi4ucmVzdWx0LFxuICAgIG11dGF0ZSxcbiAgICBtdXRhdGVBc3luYzogcmVzdWx0Lm11dGF0ZVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5leHBvcnQgeyB1c2VNdXRhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlTXV0YXRpb24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwicGFyc2VNdXRhdGlvbkFyZ3MiLCJNdXRhdGlvbk9ic2VydmVyIiwibm90aWZ5TWFuYWdlciIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlUXVlcnlDbGllbnQiLCJzaG91bGRUaHJvd0Vycm9yIiwidXNlTXV0YXRpb24iLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJvcHRpb25zIiwicXVlcnlDbGllbnQiLCJjb250ZXh0Iiwib2JzZXJ2ZXIiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInNldE9wdGlvbnMiLCJyZXN1bHQiLCJ1c2VDYWxsYmFjayIsIm9uU3RvcmVDaGFuZ2UiLCJzdWJzY3JpYmUiLCJiYXRjaENhbGxzIiwiZ2V0Q3VycmVudFJlc3VsdCIsIm11dGF0ZSIsInZhcmlhYmxlcyIsIm11dGF0ZU9wdGlvbnMiLCJjYXRjaCIsIm5vb3AiLCJlcnJvciIsInVzZUVycm9yQm91bmRhcnkiLCJtdXRhdGVBc3luYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/react-query/build/lib/useMutation.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs":
/*!***********************************************************************************!*\
  !*** ./app/node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSyncExternalStore: () => (/* binding */ useSyncExternalStore)\n/* harmony export */ });\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./app/node_modules/use-sync-external-store/shim/index.js\");\n/* __next_internal_client_entry_do_not_use__ useSyncExternalStore auto */ \nconst useSyncExternalStore = use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore;\n //# sourceMappingURL=useSyncExternalStore.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvdXNlU3luY0V4dGVybmFsU3RvcmUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OzBFQUN1RztBQUV2RyxNQUFNQSx1QkFBdUJDLHVGQUFzQkE7QUFFbkIsQ0FDaEMsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvdXNlU3luY0V4dGVybmFsU3RvcmUubWpzPzA3MjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmUgYXMgdXNlU3luY0V4dGVybmFsU3RvcmUkMSB9IGZyb20gJ3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vaW5kZXguanMnO1xuXG5jb25zdCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlJDE7XG5cbmV4cG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VTeW5jRXh0ZXJuYWxTdG9yZS5tanMubWFwXG4iXSwibmFtZXMiOlsidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSQxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs\n");

/***/ }),

/***/ "(ssr)/./app/node_modules/@tanstack/react-query/build/lib/utils.mjs":
/*!********************************************************************!*\
  !*** ./app/node_modules/@tanstack/react-query/build/lib/utils.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shouldThrowError: () => (/* binding */ shouldThrowError)\n/* harmony export */ });\nfunction shouldThrowError(_useErrorBoundary, params) {\n    // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n    if (typeof _useErrorBoundary === \"function\") {\n        return _useErrorBoundary(...params);\n    }\n    return !!_useErrorBoundary;\n}\n //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9hcHAvbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxpQkFBaUJDLGlCQUFpQixFQUFFQyxNQUFNO0lBQ2pELHFGQUFxRjtJQUNyRixJQUFJLE9BQU9ELHNCQUFzQixZQUFZO1FBQzNDLE9BQU9BLHFCQUFxQkM7SUFDOUI7SUFFQSxPQUFPLENBQUMsQ0FBQ0Q7QUFDWDtBQUU0QixDQUM1QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS8uL2FwcC9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91dGlscy5tanM/MWQxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzaG91bGRUaHJvd0Vycm9yKF91c2VFcnJvckJvdW5kYXJ5LCBwYXJhbXMpIHtcbiAgLy8gQWxsb3cgdXNlRXJyb3JCb3VuZGFyeSBmdW5jdGlvbiB0byBvdmVycmlkZSB0aHJvd2luZyBiZWhhdmlvciBvbiBhIHBlci1lcnJvciBiYXNpc1xuICBpZiAodHlwZW9mIF91c2VFcnJvckJvdW5kYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIF91c2VFcnJvckJvdW5kYXJ5KC4uLnBhcmFtcyk7XG4gIH1cblxuICByZXR1cm4gISFfdXNlRXJyb3JCb3VuZGFyeTtcbn1cblxuZXhwb3J0IHsgc2hvdWxkVGhyb3dFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbInNob3VsZFRocm93RXJyb3IiLCJfdXNlRXJyb3JCb3VuZGFyeSIsInBhcmFtcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./app/node_modules/@tanstack/react-query/build/lib/utils.mjs\n");

/***/ })

};
;